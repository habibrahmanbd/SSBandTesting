[
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f37d5613a9b20a315d208d3e78a2c51aa2eca47e",
    "fixCommitParentSHA1": "5c2d9e952736db1b3b2c663a20cad48d8d1b6922",
    "bugFilePath": "src/com/google/javascript/jscomp/LazyParsedDependencyInfo.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/LazyParsedDependencyInfo.java b/src/com/google/javascript/jscomp/LazyParsedDependencyInfo.java\nindex 4638516..170727a 100644\n--- a/src/com/google/javascript/jscomp/LazyParsedDependencyInfo.java\n+++ b/src/com/google/javascript/jscomp/LazyParsedDependencyInfo.java\n@@ -52,7 +52,13 @@\n       if (features.has(Feature.MODULES)) {\n         String previousModule = loadFlagsBuilder.get(\"module\");\n         if (previousModule != null && !previousModule.equals(\"es6\")) {\n-          compiler.report(JSError.make(ModuleLoader.MODULE_CONFLICT, getName()));\n+          compiler.report(\n+              JSError.make(\n+                  getName(),\n+                  /* lineno= */ -1,\n+                  /* charno= */ -1,\n+                  ModuleLoader.MODULE_CONFLICT,\n+                  getName()));\n         }\n         loadFlagsBuilder.put(\"module\", \"es6\");\n       }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 55,
    "bugNodeStartChar": 2209,
    "bugNodeLength": 53,
    "fixLineNum": 56,
    "fixNodeStartChar": 2224,
    "fixNodeLength": 191,
    "sourceBeforeFix": "JSError.make(ModuleLoader.MODULE_CONFLICT,getName())",
    "sourceAfterFix": "JSError.make(getName(),-1,-1,ModuleLoader.MODULE_CONFLICT,getName())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f37d5613a9b20a315d208d3e78a2c51aa2eca47e",
    "fixCommitParentSHA1": "5c2d9e952736db1b3b2c663a20cad48d8d1b6922",
    "bugFilePath": "src/com/google/javascript/jscomp/deps/JsFileRegexParser.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/deps/JsFileRegexParser.java b/src/com/google/javascript/jscomp/deps/JsFileRegexParser.java\nindex 1102b59..d9f07eb 100644\n--- a/src/com/google/javascript/jscomp/deps/JsFileRegexParser.java\n+++ b/src/com/google/javascript/jscomp/deps/JsFileRegexParser.java\n@@ -249,7 +249,14 @@\n     if (provideGoogModuleConflict || provideEs6ModuleConflict || googEs6ModuleConflict) {\n       // TODO(sdh): should this be an error?\n       errorManager.report(\n-          CheckLevel.WARNING, JSError.make(ModuleLoader.MODULE_CONFLICT, file.toString()));\n+          CheckLevel.WARNING,\n+          JSError.make(\n+              file.toString(),\n+              /* lineno= */ -1,\n+              /* charno= */ -1,\n+              ModuleLoader.MODULE_CONFLICT,\n+              file.toString()));\n+\n       return false;\n     }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 252,
    "bugNodeStartChar": 9738,
    "bugNodeLength": 59,
    "fixLineNum": 253,
    "fixNodeStartChar": 9748,
    "fixNodeLength": 183,
    "sourceBeforeFix": "JSError.make(ModuleLoader.MODULE_CONFLICT,file.toString())",
    "sourceAfterFix": "JSError.make(file.toString(),-1,-1,ModuleLoader.MODULE_CONFLICT,file.toString())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f37d5613a9b20a315d208d3e78a2c51aa2eca47e",
    "fixCommitParentSHA1": "5c2d9e952736db1b3b2c663a20cad48d8d1b6922",
    "bugFilePath": "test/com/google/javascript/jscomp/LazyParsedDependencyInfoTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/LazyParsedDependencyInfoTest.java b/test/com/google/javascript/jscomp/LazyParsedDependencyInfoTest.java\nindex 5197cda..228fe32 100644\n--- a/test/com/google/javascript/jscomp/LazyParsedDependencyInfoTest.java\n+++ b/test/com/google/javascript/jscomp/LazyParsedDependencyInfoTest.java\n@@ -150,6 +150,12 @@\n     assertThat(compiler.getErrorManager().getWarnings()).isEmpty();\n     assertThat(info.getLoadFlags()).containsExactly(\"module\", \"es6\", \"lang\", \"es6\");\n     assertThat(compiler.getErrorManager().getWarnings())\n-        .containsExactly(JSError.make(ModuleLoader.MODULE_CONFLICT, \"my/js.js\"));\n+        .containsExactly(\n+            JSError.make(\n+                \"my/js.js\",\n+                /* lineno= */ -1,\n+                /* charno= */ -1,\n+                ModuleLoader.MODULE_CONFLICT,\n+                \"my/js.js\"));\n   }\n }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 153,
    "bugNodeStartChar": 6256,
    "bugNodeLength": 54,
    "fixLineNum": 154,
    "fixNodeStartChar": 6269,
    "fixNodeLength": 183,
    "sourceBeforeFix": "JSError.make(ModuleLoader.MODULE_CONFLICT,\"my/js.js\")",
    "sourceAfterFix": "JSError.make(\"my/js.js\",-1,-1,ModuleLoader.MODULE_CONFLICT,\"my/js.js\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "c86e1482cf46434c6504e93b41c4f94f1c030374",
    "fixCommitParentSHA1": "43cd63d59f0aa06de85346a1fbcaa5e65b822593",
    "bugFilePath": "src/com/google/javascript/rhino/JSDocInfo.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/JSDocInfo.java b/src/com/google/javascript/rhino/JSDocInfo.java\nindex 0550e7d..e270db7 100644\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n@@ -2033,14 +2033,14 @@\n   /**\n    * Returns the list of authors or null if none.\n    */\n-  public Collection<String> getAuthors() {\n+  public List<String> getAuthors() {\n     return documentation == null ? null : documentation.authors;\n   }\n \n   /**\n    * Returns the list of references or null if none.\n    */\n-  public Collection<String> getReferences() {\n+  public List<String> getReferences() {\n     return documentation == null ? null : documentation.sees;\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 2036,
    "bugNodeStartChar": 59661,
    "bugNodeLength": 18,
    "fixLineNum": 2036,
    "fixNodeStartChar": 59661,
    "fixNodeLength": 12,
    "sourceBeforeFix": "Collection<String>",
    "sourceAfterFix": "List<String>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "c86e1482cf46434c6504e93b41c4f94f1c030374",
    "fixCommitParentSHA1": "43cd63d59f0aa06de85346a1fbcaa5e65b822593",
    "bugFilePath": "src/com/google/javascript/rhino/JSDocInfo.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/JSDocInfo.java b/src/com/google/javascript/rhino/JSDocInfo.java\nindex 0550e7d..e270db7 100644\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n@@ -2033,14 +2033,14 @@\n   /**\n    * Returns the list of authors or null if none.\n    */\n-  public Collection<String> getAuthors() {\n+  public List<String> getAuthors() {\n     return documentation == null ? null : documentation.authors;\n   }\n \n   /**\n    * Returns the list of references or null if none.\n    */\n-  public Collection<String> getReferences() {\n+  public List<String> getReferences() {\n     return documentation == null ? null : documentation.sees;\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 2043,
    "bugNodeStartChar": 59839,
    "bugNodeLength": 18,
    "fixLineNum": 2043,
    "fixNodeStartChar": 59839,
    "fixNodeLength": 12,
    "sourceBeforeFix": "Collection<String>",
    "sourceAfterFix": "List<String>"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/AmbiguateProperties.java b/src/com/google/javascript/jscomp/AmbiguateProperties.java\nindex 2712dda..5da59da 100644\n--- a/src/com/google/javascript/jscomp/AmbiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/AmbiguateProperties.java\n@@ -234,7 +234,7 @@\n     }\n \n     // We may have renamed getter / setter properties.\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n \n     if (logger.isLoggable(Level.FINE)) {\n       logger.fine(\"Collapsed \" + numRenamedPropertyNames + \" properties into \"\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 237,
    "bugNodeStartChar": 8483,
    "bugNodeLength": 64,
    "fixLineNum": 237,
    "fixNodeStartChar": 8483,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/AmbiguateProperties.java b/src/com/google/javascript/jscomp/AmbiguateProperties.java\nindex 2712dda..5da59da 100644\n--- a/src/com/google/javascript/jscomp/AmbiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/AmbiguateProperties.java\n@@ -234,7 +234,7 @@\n     }\n \n     // We may have renamed getter / setter properties.\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n \n     if (logger.isLoggable(Level.FINE)) {\n       logger.fine(\"Collapsed \" + numRenamedPropertyNames + \" properties into \"\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 237,
    "bugNodeStartChar": 8483,
    "bugNodeLength": 64,
    "fixLineNum": 237,
    "fixNodeStartChar": 8483,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 295ea39..82d6e6d 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -3491,7 +3491,7 @@\n       new PassFactory(PassNames.GATHER_GETTERS_AND_SETTERS, /* isOneTimePass= */ true) {\n         @Override\n         protected CompilerPass create(AbstractCompiler compiler) {\n-          return new GatherGettersAndSetterProperties(compiler);\n+          return new GatherGetterAndSetterProperties(compiler);\n         }\n \n         @Override\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 3494,
    "bugNodeStartChar": 119612,
    "bugNodeLength": 46,
    "fixLineNum": 3494,
    "fixNodeStartChar": 119612,
    "fixNodeLength": 45,
    "sourceBeforeFix": "new GatherGettersAndSetterProperties(compiler)",
    "sourceAfterFix": "new GatherGetterAndSetterProperties(compiler)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/DisambiguatePrivateProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DisambiguatePrivateProperties.java b/src/com/google/javascript/jscomp/DisambiguatePrivateProperties.java\nindex 8db8f22..3c9a083 100644\n--- a/src/com/google/javascript/jscomp/DisambiguatePrivateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguatePrivateProperties.java\n@@ -55,7 +55,7 @@\n   public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, root, this);\n     // We may have renamed some getter / setter properties\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n \n   @Override\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 58,
    "bugNodeStartChar": 2256,
    "bugNodeLength": 64,
    "fixLineNum": 58,
    "fixNodeStartChar": 2256,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/DisambiguatePrivateProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DisambiguatePrivateProperties.java b/src/com/google/javascript/jscomp/DisambiguatePrivateProperties.java\nindex 8db8f22..3c9a083 100644\n--- a/src/com/google/javascript/jscomp/DisambiguatePrivateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguatePrivateProperties.java\n@@ -55,7 +55,7 @@\n   public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, root, this);\n     // We may have renamed some getter / setter properties\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n \n   @Override\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 58,
    "bugNodeStartChar": 2256,
    "bugNodeLength": 64,
    "fixLineNum": 58,
    "fixNodeStartChar": 2256,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b27253b..dbb6384 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -412,7 +412,7 @@\n     // Do the actual renaming.\n     renameProperties();\n     // Update any getters and setters we renamed.\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n \n   /** Returns the property for the given name, creating it if necessary. */\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 415,
    "bugNodeStartChar": 15227,
    "bugNodeLength": 64,
    "fixLineNum": 415,
    "fixNodeStartChar": 15227,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b27253b..dbb6384 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -412,7 +412,7 @@\n     // Do the actual renaming.\n     renameProperties();\n     // Update any getters and setters we renamed.\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n \n   /** Returns the property for the given name, creating it if necessary. */\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 415,
    "bugNodeStartChar": 15227,
    "bugNodeLength": 64,
    "fixLineNum": 415,
    "fixNodeStartChar": 15227,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/Es6RewriteModules.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Es6RewriteModules.java b/src/com/google/javascript/jscomp/Es6RewriteModules.java\nindex 34d5c36..3e37241 100644\n--- a/src/com/google/javascript/jscomp/Es6RewriteModules.java\n+++ b/src/com/google/javascript/jscomp/Es6RewriteModules.java\n@@ -165,7 +165,7 @@\n     }\n     compiler.setFeatureSet(compiler.getFeatureSet().without(MODULES));\n     // This pass may add getters properties on module objects.\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n \n   @Override\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 168,
    "bugNodeStartChar": 6990,
    "bugNodeLength": 64,
    "fixLineNum": 168,
    "fixNodeStartChar": 6990,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/Es6RewriteModules.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Es6RewriteModules.java b/src/com/google/javascript/jscomp/Es6RewriteModules.java\nindex 34d5c36..3e37241 100644\n--- a/src/com/google/javascript/jscomp/Es6RewriteModules.java\n+++ b/src/com/google/javascript/jscomp/Es6RewriteModules.java\n@@ -165,7 +165,7 @@\n     }\n     compiler.setFeatureSet(compiler.getFeatureSet().without(MODULES));\n     // This pass may add getters properties on module objects.\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n \n   @Override\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 168,
    "bugNodeStartChar": 6990,
    "bugNodeLength": 64,
    "fixLineNum": 168,
    "fixNodeStartChar": 6990,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/J2clPropertyInlinerPass.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/J2clPropertyInlinerPass.java b/src/com/google/javascript/jscomp/J2clPropertyInlinerPass.java\nindex 6783066..b7c875d 100644\n--- a/src/com/google/javascript/jscomp/J2clPropertyInlinerPass.java\n+++ b/src/com/google/javascript/jscomp/J2clPropertyInlinerPass.java\n@@ -60,7 +60,7 @@\n \n     new StaticFieldGetterSetterInliner(root).run();\n     // This pass may remove getters and setters.\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n \n   class StaticFieldGetterSetterInliner {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 63,
    "bugNodeStartChar": 2477,
    "bugNodeLength": 64,
    "fixLineNum": 63,
    "fixNodeStartChar": 2477,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/J2clPropertyInlinerPass.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/J2clPropertyInlinerPass.java b/src/com/google/javascript/jscomp/J2clPropertyInlinerPass.java\nindex 6783066..b7c875d 100644\n--- a/src/com/google/javascript/jscomp/J2clPropertyInlinerPass.java\n+++ b/src/com/google/javascript/jscomp/J2clPropertyInlinerPass.java\n@@ -60,7 +60,7 @@\n \n     new StaticFieldGetterSetterInliner(root).run();\n     // This pass may remove getters and setters.\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n \n   class StaticFieldGetterSetterInliner {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 63,
    "bugNodeStartChar": 2477,
    "bugNodeLength": 64,
    "fixLineNum": 63,
    "fixNodeStartChar": 2477,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/RemoveUnusedCode.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedCode.java b/src/com/google/javascript/jscomp/RemoveUnusedCode.java\nindex 63d84a6..a42f81c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedCode.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedCode.java\n@@ -249,7 +249,7 @@\n     }\n     traverseAndRemoveUnusedReferences(root);\n     // This pass may remove definitions of getter or setter properties.\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n \n   /**\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 252,
    "bugNodeStartChar": 10525,
    "bugNodeLength": 64,
    "fixLineNum": 252,
    "fixNodeStartChar": 10525,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/RemoveUnusedCode.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedCode.java b/src/com/google/javascript/jscomp/RemoveUnusedCode.java\nindex 63d84a6..a42f81c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedCode.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedCode.java\n@@ -249,7 +249,7 @@\n     }\n     traverseAndRemoveUnusedReferences(root);\n     // This pass may remove definitions of getter or setter properties.\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n \n   /**\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 252,
    "bugNodeStartChar": 10525,
    "bugNodeLength": 64,
    "fixLineNum": 252,
    "fixNodeStartChar": 10525,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/RenameProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/RenameProperties.java b/src/com/google/javascript/jscomp/RenameProperties.java\nindex 4a93fee..faeb59f 100644\n--- a/src/com/google/javascript/jscomp/RenameProperties.java\n+++ b/src/com/google/javascript/jscomp/RenameProperties.java\n@@ -255,7 +255,7 @@\n \n     compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n     // This pass may rename getter or setter properties\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n \n   /**\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 258,
    "bugNodeStartChar": 9770,
    "bugNodeLength": 64,
    "fixLineNum": 258,
    "fixNodeStartChar": 9770,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/RenameProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/RenameProperties.java b/src/com/google/javascript/jscomp/RenameProperties.java\nindex 4a93fee..faeb59f 100644\n--- a/src/com/google/javascript/jscomp/RenameProperties.java\n+++ b/src/com/google/javascript/jscomp/RenameProperties.java\n@@ -255,7 +255,7 @@\n \n     compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n     // This pass may rename getter or setter properties\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n \n   /**\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 258,
    "bugNodeStartChar": 9770,
    "bugNodeLength": 64,
    "fixLineNum": 258,
    "fixNodeStartChar": 9770,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/StripCode.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/StripCode.java b/src/com/google/javascript/jscomp/StripCode.java\nindex 7dc99ec..9d15e95 100644\n--- a/src/com/google/javascript/jscomp/StripCode.java\n+++ b/src/com/google/javascript/jscomp/StripCode.java\n@@ -96,7 +96,7 @@\n \n     NodeTraversal.traverse(compiler, root, new Strip());\n     // This pass may remove definitions of getter or setter properties\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n \n   // -------------------------------------------------------------------------\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 99,
    "bugNodeStartChar": 3889,
    "bugNodeLength": 64,
    "fixLineNum": 99,
    "fixNodeStartChar": 3889,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "src/com/google/javascript/jscomp/StripCode.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/StripCode.java b/src/com/google/javascript/jscomp/StripCode.java\nindex 7dc99ec..9d15e95 100644\n--- a/src/com/google/javascript/jscomp/StripCode.java\n+++ b/src/com/google/javascript/jscomp/StripCode.java\n@@ -96,7 +96,7 @@\n \n     NodeTraversal.traverse(compiler, root, new Strip());\n     // This pass may remove definitions of getter or setter properties\n-    GatherGettersAndSetterProperties.update(compiler, externs, root);\n+    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n \n   // -------------------------------------------------------------------------\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 99,
    "bugNodeStartChar": 3889,
    "bugNodeLength": 64,
    "fixLineNum": 99,
    "fixNodeStartChar": 3889,
    "fixNodeLength": 63,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "test/com/google/javascript/jscomp/CompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java\nindex 2eb8ae6..e2e80b8 100644\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n@@ -1610,7 +1610,7 @@\n         }\n \n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n-          GatherGettersAndSetterProperties.update(compiler, externsRoot, mainRoot);\n+          GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n \n         recentChange.reset();\n@@ -1633,17 +1633,17 @@\n         if (verifyGetterAndSetterUpdates) {\n           assertWithMessage(\"Pass did not update extern getters / setters\")\n               .that(compiler.getExternGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update source getters / setters\")\n               .that(compiler.getSourceGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n         }\n \n         if (verifyNoNewGettersOrSetters) {\n           MapDifference<String, PropertyAccessKind> externsDifference =\n               Maps.difference(\n                   compiler.getExternGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update new extern getters / setters\")\n               .that(externsDifference.entriesOnlyOnRight())\n               .isEmpty();\n@@ -1654,7 +1654,7 @@\n           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1613,
    "bugNodeStartChar": 55794,
    "bugNodeLength": 72,
    "fixLineNum": 1613,
    "fixNodeStartChar": 55794,
    "fixNodeLength": 71,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externsRoot,mainRoot)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externsRoot,mainRoot)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "test/com/google/javascript/jscomp/CompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java\nindex 2eb8ae6..e2e80b8 100644\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n@@ -1610,7 +1610,7 @@\n         }\n \n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n-          GatherGettersAndSetterProperties.update(compiler, externsRoot, mainRoot);\n+          GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n \n         recentChange.reset();\n@@ -1633,17 +1633,17 @@\n         if (verifyGetterAndSetterUpdates) {\n           assertWithMessage(\"Pass did not update extern getters / setters\")\n               .that(compiler.getExternGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update source getters / setters\")\n               .that(compiler.getSourceGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n         }\n \n         if (verifyNoNewGettersOrSetters) {\n           MapDifference<String, PropertyAccessKind> externsDifference =\n               Maps.difference(\n                   compiler.getExternGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update new extern getters / setters\")\n               .that(externsDifference.entriesOnlyOnRight())\n               .isEmpty();\n@@ -1654,7 +1654,7 @@\n           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1613,
    "bugNodeStartChar": 55794,
    "bugNodeLength": 72,
    "fixLineNum": 1613,
    "fixNodeStartChar": 55794,
    "fixNodeLength": 71,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externsRoot,mainRoot)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externsRoot,mainRoot)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "test/com/google/javascript/jscomp/CompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java\nindex 2eb8ae6..e2e80b8 100644\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n@@ -1610,7 +1610,7 @@\n         }\n \n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n-          GatherGettersAndSetterProperties.update(compiler, externsRoot, mainRoot);\n+          GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n \n         recentChange.reset();\n@@ -1633,17 +1633,17 @@\n         if (verifyGetterAndSetterUpdates) {\n           assertWithMessage(\"Pass did not update extern getters / setters\")\n               .that(compiler.getExternGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update source getters / setters\")\n               .that(compiler.getSourceGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n         }\n \n         if (verifyNoNewGettersOrSetters) {\n           MapDifference<String, PropertyAccessKind> externsDifference =\n               Maps.difference(\n                   compiler.getExternGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update new extern getters / setters\")\n               .that(externsDifference.entriesOnlyOnRight())\n               .isEmpty();\n@@ -1654,7 +1654,7 @@\n           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1636,
    "bugNodeStartChar": 56712,
    "bugNodeLength": 62,
    "fixLineNum": 1636,
    "fixNodeStartChar": 56712,
    "fixNodeLength": 61,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "test/com/google/javascript/jscomp/CompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java\nindex 2eb8ae6..e2e80b8 100644\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n@@ -1610,7 +1610,7 @@\n         }\n \n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n-          GatherGettersAndSetterProperties.update(compiler, externsRoot, mainRoot);\n+          GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n \n         recentChange.reset();\n@@ -1633,17 +1633,17 @@\n         if (verifyGetterAndSetterUpdates) {\n           assertWithMessage(\"Pass did not update extern getters / setters\")\n               .that(compiler.getExternGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update source getters / setters\")\n               .that(compiler.getSourceGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n         }\n \n         if (verifyNoNewGettersOrSetters) {\n           MapDifference<String, PropertyAccessKind> externsDifference =\n               Maps.difference(\n                   compiler.getExternGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update new extern getters / setters\")\n               .that(externsDifference.entriesOnlyOnRight())\n               .isEmpty();\n@@ -1654,7 +1654,7 @@\n           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1636,
    "bugNodeStartChar": 56712,
    "bugNodeLength": 62,
    "fixLineNum": 1636,
    "fixNodeStartChar": 56712,
    "fixNodeLength": 61,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "test/com/google/javascript/jscomp/CompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java\nindex 2eb8ae6..e2e80b8 100644\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n@@ -1610,7 +1610,7 @@\n         }\n \n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n-          GatherGettersAndSetterProperties.update(compiler, externsRoot, mainRoot);\n+          GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n \n         recentChange.reset();\n@@ -1633,17 +1633,17 @@\n         if (verifyGetterAndSetterUpdates) {\n           assertWithMessage(\"Pass did not update extern getters / setters\")\n               .that(compiler.getExternGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update source getters / setters\")\n               .that(compiler.getSourceGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n         }\n \n         if (verifyNoNewGettersOrSetters) {\n           MapDifference<String, PropertyAccessKind> externsDifference =\n               Maps.difference(\n                   compiler.getExternGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update new extern getters / setters\")\n               .that(externsDifference.entriesOnlyOnRight())\n               .isEmpty();\n@@ -1654,7 +1654,7 @@\n           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1639,
    "bugNodeStartChar": 56945,
    "bugNodeLength": 59,
    "fixLineNum": 1639,
    "fixNodeStartChar": 56945,
    "fixNodeLength": 58,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,mainRoot)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,mainRoot)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "test/com/google/javascript/jscomp/CompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java\nindex 2eb8ae6..e2e80b8 100644\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n@@ -1610,7 +1610,7 @@\n         }\n \n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n-          GatherGettersAndSetterProperties.update(compiler, externsRoot, mainRoot);\n+          GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n \n         recentChange.reset();\n@@ -1633,17 +1633,17 @@\n         if (verifyGetterAndSetterUpdates) {\n           assertWithMessage(\"Pass did not update extern getters / setters\")\n               .that(compiler.getExternGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update source getters / setters\")\n               .that(compiler.getSourceGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n         }\n \n         if (verifyNoNewGettersOrSetters) {\n           MapDifference<String, PropertyAccessKind> externsDifference =\n               Maps.difference(\n                   compiler.getExternGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update new extern getters / setters\")\n               .that(externsDifference.entriesOnlyOnRight())\n               .isEmpty();\n@@ -1654,7 +1654,7 @@\n           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1639,
    "bugNodeStartChar": 56945,
    "bugNodeLength": 59,
    "fixLineNum": 1639,
    "fixNodeStartChar": 56945,
    "fixNodeLength": 58,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,mainRoot)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,mainRoot)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "test/com/google/javascript/jscomp/CompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java\nindex 2eb8ae6..e2e80b8 100644\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n@@ -1610,7 +1610,7 @@\n         }\n \n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n-          GatherGettersAndSetterProperties.update(compiler, externsRoot, mainRoot);\n+          GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n \n         recentChange.reset();\n@@ -1633,17 +1633,17 @@\n         if (verifyGetterAndSetterUpdates) {\n           assertWithMessage(\"Pass did not update extern getters / setters\")\n               .that(compiler.getExternGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update source getters / setters\")\n               .that(compiler.getSourceGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n         }\n \n         if (verifyNoNewGettersOrSetters) {\n           MapDifference<String, PropertyAccessKind> externsDifference =\n               Maps.difference(\n                   compiler.getExternGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update new extern getters / setters\")\n               .that(externsDifference.entriesOnlyOnRight())\n               .isEmpty();\n@@ -1654,7 +1654,7 @@\n           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1646,
    "bugNodeStartChar": 57247,
    "bugNodeLength": 62,
    "fixLineNum": 1646,
    "fixNodeStartChar": 57247,
    "fixNodeLength": 61,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "test/com/google/javascript/jscomp/CompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java\nindex 2eb8ae6..e2e80b8 100644\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n@@ -1610,7 +1610,7 @@\n         }\n \n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n-          GatherGettersAndSetterProperties.update(compiler, externsRoot, mainRoot);\n+          GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n \n         recentChange.reset();\n@@ -1633,17 +1633,17 @@\n         if (verifyGetterAndSetterUpdates) {\n           assertWithMessage(\"Pass did not update extern getters / setters\")\n               .that(compiler.getExternGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update source getters / setters\")\n               .that(compiler.getSourceGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n         }\n \n         if (verifyNoNewGettersOrSetters) {\n           MapDifference<String, PropertyAccessKind> externsDifference =\n               Maps.difference(\n                   compiler.getExternGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update new extern getters / setters\")\n               .that(externsDifference.entriesOnlyOnRight())\n               .isEmpty();\n@@ -1654,7 +1654,7 @@\n           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1646,
    "bugNodeStartChar": 57247,
    "bugNodeLength": 62,
    "fixLineNum": 1646,
    "fixNodeStartChar": 57247,
    "fixNodeLength": 61,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "test/com/google/javascript/jscomp/CompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java\nindex 2eb8ae6..e2e80b8 100644\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n@@ -1610,7 +1610,7 @@\n         }\n \n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n-          GatherGettersAndSetterProperties.update(compiler, externsRoot, mainRoot);\n+          GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n \n         recentChange.reset();\n@@ -1633,17 +1633,17 @@\n         if (verifyGetterAndSetterUpdates) {\n           assertWithMessage(\"Pass did not update extern getters / setters\")\n               .that(compiler.getExternGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update source getters / setters\")\n               .that(compiler.getSourceGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n         }\n \n         if (verifyNoNewGettersOrSetters) {\n           MapDifference<String, PropertyAccessKind> externsDifference =\n               Maps.difference(\n                   compiler.getExternGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update new extern getters / setters\")\n               .that(externsDifference.entriesOnlyOnRight())\n               .isEmpty();\n@@ -1654,7 +1654,7 @@\n           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1657,
    "bugNodeStartChar": 57828,
    "bugNodeLength": 59,
    "fixLineNum": 1657,
    "fixNodeStartChar": 57828,
    "fixNodeLength": 58,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,mainRoot)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,mainRoot)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "test/com/google/javascript/jscomp/CompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java\nindex 2eb8ae6..e2e80b8 100644\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n@@ -1610,7 +1610,7 @@\n         }\n \n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n-          GatherGettersAndSetterProperties.update(compiler, externsRoot, mainRoot);\n+          GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n \n         recentChange.reset();\n@@ -1633,17 +1633,17 @@\n         if (verifyGetterAndSetterUpdates) {\n           assertWithMessage(\"Pass did not update extern getters / setters\")\n               .that(compiler.getExternGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update source getters / setters\")\n               .that(compiler.getSourceGetterAndSetterProperties())\n-              .isEqualTo(GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+              .isEqualTo(GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n         }\n \n         if (verifyNoNewGettersOrSetters) {\n           MapDifference<String, PropertyAccessKind> externsDifference =\n               Maps.difference(\n                   compiler.getExternGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, externsRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, externsRoot));\n           assertWithMessage(\"Pass did not update new extern getters / setters\")\n               .that(externsDifference.entriesOnlyOnRight())\n               .isEmpty();\n@@ -1654,7 +1654,7 @@\n           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n-                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n+                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1657,
    "bugNodeStartChar": 57828,
    "bugNodeLength": 59,
    "fixLineNum": 1657,
    "fixNodeStartChar": 57828,
    "fixNodeLength": 58,
    "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,mainRoot)",
    "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,mainRoot)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d",
    "fixCommitParentSHA1": "903084399a57721d987f61c9c09ac6d2cdb2b3a8",
    "bugFilePath": "test/com/google/javascript/jscomp/GatherGetterAndSetterPropertiesTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/GatherGetterAndSetterPropertiesTest.java b/test/com/google/javascript/jscomp/GatherGetterAndSetterPropertiesTest.java\nindex 5584b2c..64ac1a7 100644\n--- a/test/com/google/javascript/jscomp/GatherGetterAndSetterPropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/GatherGetterAndSetterPropertiesTest.java\n@@ -22,13 +22,13 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Tests for {@link GatherGettersAndSetterProperties}. */\n+/** Tests for {@link GatherGetterAndSetterProperties}. */\n @RunWith(JUnit4.class)\n public class GatherGetterAndSetterPropertiesTest extends CompilerTestCase {\n \n   @Override\n   protected CompilerPass getProcessor(Compiler compiler) {\n-    return new GatherGettersAndSetterProperties(compiler);\n+    return new GatherGetterAndSetterProperties(compiler);\n   }\n \n   @Test\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 31,
    "bugNodeStartChar": 1113,
    "bugNodeLength": 46,
    "fixLineNum": 31,
    "fixNodeStartChar": 1113,
    "fixNodeLength": 45,
    "sourceBeforeFix": "new GatherGettersAndSetterProperties(compiler)",
    "sourceAfterFix": "new GatherGetterAndSetterProperties(compiler)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "0d35621b5c32f5d64ba2056c143d4bc351615c81",
    "fixCommitParentSHA1": "31f12e81dcf3cbfbed51f93eb87d1eff2eb26765",
    "bugFilePath": "src/com/google/javascript/rhino/jstype/NamedType.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 941f686..2028270 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -101,10 +101,8 @@\n    */\n   private transient Predicate<JSType> validator;\n \n-  /**\n-   * Property-defining continuations.\n-   */\n-  private List<PropertyContinuation> propertyContinuations = null;\n+  /** Property-defining continuations. */\n+  private transient List<PropertyContinuation> propertyContinuations = null;\n \n   /**\n    * Template types defined on a named, not yet resolved type, or {@code null} if none. These are\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 104,
    "bugNodeStartChar": 4144,
    "bugNodeLength": 114,
    "fixLineNum": 104,
    "fixNodeStartChar": 4144,
    "fixNodeLength": 116,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "130"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5782007c46e67cd4264aa05298cf72988dbd3537",
    "fixCommitParentSHA1": "79c9963429c9298e9132200623b34a7c2e714ea9",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex d27c2fa..e2600b2 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -2416,7 +2416,7 @@\n \n         @Override\n         protected FeatureSet featureSet() {\n-          return ES5;\n+          return ES8_MODULES;\n         }\n       };\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 2419,
    "bugNodeStartChar": 84488,
    "bugNodeLength": 11,
    "fixLineNum": 2419,
    "fixNodeStartChar": 84488,
    "fixNodeLength": 19,
    "sourceBeforeFix": "return ES5; ",
    "sourceAfterFix": "return ES8_MODULES; "
  },
  {
    "bugType": "CHANGE_OPERAND",
    "fixCommitSHA1": "bbe22e599c7516a08f1a0c5aff540d4ef5a02eb3",
    "fixCommitParentSHA1": "654e00d8bb3168b7063760c26ca6d17e50fe6147",
    "bugFilePath": "src/com/google/javascript/jscomp/SourceMap.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/SourceMap.java b/src/com/google/javascript/jscomp/SourceMap.java\nindex 6c96be7..7ac8421 100644\n--- a/src/com/google/javascript/jscomp/SourceMap.java\n+++ b/src/com/google/javascript/jscomp/SourceMap.java\n@@ -180,7 +180,9 @@\n         lineNo = sourceMapping.getLineNumber();\n         charNo = sourceMapping.getColumnPosition();\n         String identifier = sourceMapping.getIdentifier();\n-        if (sourceMapping != null && !identifier.isEmpty()) {\n+        // TODO(bradfordcsmith): When we move off of GWT we should be able\n+        //     to use sourceMapping.hasIdentifier() instead of a null check.\n+        if (identifier != null && !identifier.isEmpty()) {\n           originalName = identifier;\n         }\n       }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 183,
    "bugNodeStartChar": 5860,
    "bugNodeLength": 21,
    "fixLineNum": 185,
    "fixNodeStartChar": 6012,
    "fixNodeLength": 18,
    "sourceBeforeFix": "sourceMapping != null",
    "sourceAfterFix": "identifier != null"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "bbe22e599c7516a08f1a0c5aff540d4ef5a02eb3",
    "fixCommitParentSHA1": "654e00d8bb3168b7063760c26ca6d17e50fe6147",
    "bugFilePath": "src/com/google/javascript/jscomp/SourceMap.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/SourceMap.java b/src/com/google/javascript/jscomp/SourceMap.java\nindex 6c96be7..7ac8421 100644\n--- a/src/com/google/javascript/jscomp/SourceMap.java\n+++ b/src/com/google/javascript/jscomp/SourceMap.java\n@@ -180,7 +180,9 @@\n         lineNo = sourceMapping.getLineNumber();\n         charNo = sourceMapping.getColumnPosition();\n         String identifier = sourceMapping.getIdentifier();\n-        if (sourceMapping != null && !identifier.isEmpty()) {\n+        // TODO(bradfordcsmith): When we move off of GWT we should be able\n+        //     to use sourceMapping.hasIdentifier() instead of a null check.\n+        if (identifier != null && !identifier.isEmpty()) {\n           originalName = identifier;\n         }\n       }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 183,
    "bugNodeStartChar": 5860,
    "bugNodeLength": 21,
    "fixLineNum": 185,
    "fixNodeStartChar": 6012,
    "fixNodeLength": 18,
    "sourceBeforeFix": "sourceMapping != null",
    "sourceAfterFix": "identifier != null"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "634910c11ff38d87dfdd72865742528820a37aa9",
    "fixCommitParentSHA1": "6f79075a91cd71b9cb67ba9a8dcd13b4c76f3124",
    "bugFilePath": "src/com/google/javascript/jscomp/DeclaredGlobalExternsOnWindow.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DeclaredGlobalExternsOnWindow.java b/src/com/google/javascript/jscomp/DeclaredGlobalExternsOnWindow.java\nindex df44bd2..7a4c2be 100644\n--- a/src/com/google/javascript/jscomp/DeclaredGlobalExternsOnWindow.java\n+++ b/src/com/google/javascript/jscomp/DeclaredGlobalExternsOnWindow.java\n@@ -109,7 +109,7 @@\n \n     newNode.useSourceInfoFromForTree(node);\n     newNode.setOriginalName(name);\n-    newNode.makeNonIndexable();\n+    newNode.makeNonIndexableRecursive();\n     node.getGrandparent().addChildToBack(IR.exprResult(newNode));\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 112,
    "bugNodeStartChar": 3857,
    "bugNodeLength": 26,
    "fixLineNum": 112,
    "fixNodeStartChar": 3857,
    "fixNodeLength": 35,
    "sourceBeforeFix": "newNode.makeNonIndexable()",
    "sourceAfterFix": "newNode.makeNonIndexableRecursive()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "634910c11ff38d87dfdd72865742528820a37aa9",
    "fixCommitParentSHA1": "6f79075a91cd71b9cb67ba9a8dcd13b4c76f3124",
    "bugFilePath": "src/com/google/javascript/jscomp/DeclaredGlobalExternsOnWindow.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DeclaredGlobalExternsOnWindow.java b/src/com/google/javascript/jscomp/DeclaredGlobalExternsOnWindow.java\nindex df44bd2..7a4c2be 100644\n--- a/src/com/google/javascript/jscomp/DeclaredGlobalExternsOnWindow.java\n+++ b/src/com/google/javascript/jscomp/DeclaredGlobalExternsOnWindow.java\n@@ -109,7 +109,7 @@\n \n     newNode.useSourceInfoFromForTree(node);\n     newNode.setOriginalName(name);\n-    newNode.makeNonIndexable();\n+    newNode.makeNonIndexableRecursive();\n     node.getGrandparent().addChildToBack(IR.exprResult(newNode));\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 112,
    "bugNodeStartChar": 3857,
    "bugNodeLength": 26,
    "fixLineNum": 112,
    "fixNodeStartChar": 3857,
    "fixNodeLength": 35,
    "sourceBeforeFix": "newNode.makeNonIndexable()",
    "sourceAfterFix": "newNode.makeNonIndexableRecursive()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "739189d54feb7523a33917dbb1b0d6cf996e554c",
    "fixCommitParentSHA1": "93817861411dec3dd898b8bdd5c84c6386dd85c5",
    "bugFilePath": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\nindex 9a31143..67c1b8c 100644\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n@@ -385,7 +385,7 @@\n     NoObjectType noObjectType = new NoObjectType(this);\n     registerNativeType(JSTypeNative.NO_OBJECT_TYPE, noObjectType);\n \n-    NoObjectType noResolvedType = new NoResolvedType(this);\n+    NoResolvedType noResolvedType = new NoResolvedType(this);\n     registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, noResolvedType);\n \n     // Array\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 388,
    "bugNodeStartChar": 15959,
    "bugNodeLength": 55,
    "fixLineNum": 388,
    "fixNodeStartChar": 15959,
    "fixNodeLength": 57,
    "sourceBeforeFix": "NoObjectType noResolvedType=new NoResolvedType(this); ",
    "sourceAfterFix": "NoResolvedType noResolvedType=new NoResolvedType(this); "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "3c8d3e908b01f47c69600a235fb7e5173f4f0d7b",
    "fixCommitParentSHA1": "dce856f61b93d8d159f45b1f0ebfc5ea9c8f28b1",
    "bugFilePath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex d931378..64890f1 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -577,7 +577,7 @@\n   }\n \n   /** Returns interfaces implemented directly by a class or its superclass. */\n-  public final Iterable<ObjectType> getImplementedInterfaces() {\n+  public final ImmutableList<ObjectType> getImplementedInterfaces() {\n     FunctionType superCtor = isConstructor() ? getSuperClassConstructor() : null;\n     if (superCtor == null) {\n       return implementedInterfaces;\n@@ -592,7 +592,7 @@\n   }\n \n   /** Returns interfaces directly implemented by the class. */\n-  public final Iterable<ObjectType> getOwnImplementedInterfaces() {\n+  public final ImmutableList<ObjectType> getOwnImplementedInterfaces() {\n     return implementedInterfaces;\n   }\n \n@@ -610,7 +610,7 @@\n   }\n \n   /** Returns interfaces directly extended by an interface */\n-  public final Iterable<ObjectType> getExtendedInterfaces() {\n+  public final ImmutableList<ObjectType> getExtendedInterfaces() {\n     return extendedInterfaces;\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 580,
    "bugNodeStartChar": 18609,
    "bugNodeLength": 20,
    "fixLineNum": 580,
    "fixNodeStartChar": 18609,
    "fixNodeLength": 25,
    "sourceBeforeFix": "Iterable<ObjectType>",
    "sourceAfterFix": "ImmutableList<ObjectType>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "3c8d3e908b01f47c69600a235fb7e5173f4f0d7b",
    "fixCommitParentSHA1": "dce856f61b93d8d159f45b1f0ebfc5ea9c8f28b1",
    "bugFilePath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex d931378..64890f1 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -577,7 +577,7 @@\n   }\n \n   /** Returns interfaces implemented directly by a class or its superclass. */\n-  public final Iterable<ObjectType> getImplementedInterfaces() {\n+  public final ImmutableList<ObjectType> getImplementedInterfaces() {\n     FunctionType superCtor = isConstructor() ? getSuperClassConstructor() : null;\n     if (superCtor == null) {\n       return implementedInterfaces;\n@@ -592,7 +592,7 @@\n   }\n \n   /** Returns interfaces directly implemented by the class. */\n-  public final Iterable<ObjectType> getOwnImplementedInterfaces() {\n+  public final ImmutableList<ObjectType> getOwnImplementedInterfaces() {\n     return implementedInterfaces;\n   }\n \n@@ -610,7 +610,7 @@\n   }\n \n   /** Returns interfaces directly extended by an interface */\n-  public final Iterable<ObjectType> getExtendedInterfaces() {\n+  public final ImmutableList<ObjectType> getExtendedInterfaces() {\n     return extendedInterfaces;\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 595,
    "bugNodeStartChar": 19188,
    "bugNodeLength": 20,
    "fixLineNum": 595,
    "fixNodeStartChar": 19188,
    "fixNodeLength": 25,
    "sourceBeforeFix": "Iterable<ObjectType>",
    "sourceAfterFix": "ImmutableList<ObjectType>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "3c8d3e908b01f47c69600a235fb7e5173f4f0d7b",
    "fixCommitParentSHA1": "dce856f61b93d8d159f45b1f0ebfc5ea9c8f28b1",
    "bugFilePath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex d931378..64890f1 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -577,7 +577,7 @@\n   }\n \n   /** Returns interfaces implemented directly by a class or its superclass. */\n-  public final Iterable<ObjectType> getImplementedInterfaces() {\n+  public final ImmutableList<ObjectType> getImplementedInterfaces() {\n     FunctionType superCtor = isConstructor() ? getSuperClassConstructor() : null;\n     if (superCtor == null) {\n       return implementedInterfaces;\n@@ -592,7 +592,7 @@\n   }\n \n   /** Returns interfaces directly implemented by the class. */\n-  public final Iterable<ObjectType> getOwnImplementedInterfaces() {\n+  public final ImmutableList<ObjectType> getOwnImplementedInterfaces() {\n     return implementedInterfaces;\n   }\n \n@@ -610,7 +610,7 @@\n   }\n \n   /** Returns interfaces directly extended by an interface */\n-  public final Iterable<ObjectType> getExtendedInterfaces() {\n+  public final ImmutableList<ObjectType> getExtendedInterfaces() {\n     return extendedInterfaces;\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 613,
    "bugNodeStartChar": 19926,
    "bugNodeLength": 20,
    "fixLineNum": 613,
    "fixNodeStartChar": 19926,
    "fixNodeLength": 25,
    "sourceBeforeFix": "Iterable<ObjectType>",
    "sourceAfterFix": "ImmutableList<ObjectType>"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "fixCommitSHA1": "465403dcb54522a763acdab0ff7fee7c03b0f341",
    "fixCommitParentSHA1": "06408609385d73395c2b2a50dc37b0997f12b2e6",
    "bugFilePath": "src/com/google/javascript/jscomp/CompilerOptions.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CompilerOptions.java b/src/com/google/javascript/jscomp/CompilerOptions.java\nindex aff29a3..c6eec0d 100644\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n@@ -219,7 +219,7 @@\n    * and the optimizations see the old types. We plan to switch these users to NTI-only builds\n    * and delete this option.\n    */\n-  private boolean runOTIafterNTI = false;\n+  private boolean runOTIafterNTI = true;\n \n   /**\n    * Relevant only when {@link #useNewTypeInference} is true, where we normally disable OTI errors.\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 222,
    "bugNodeStartChar": 6895,
    "bugNodeLength": 22,
    "fixLineNum": 222,
    "fixNodeStartChar": 6895,
    "fixNodeLength": 21,
    "sourceBeforeFix": "runOTIafterNTI=false",
    "sourceAfterFix": "runOTIafterNTI=true"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "c340e6160ebb4a82e993875b68daa4b9aafbb92d",
    "fixCommitParentSHA1": "4fd33c53cba5cec1bff74ab0a33c6a24f9ef2e7d",
    "bugFilePath": "src/com/google/javascript/jscomp/ImplicitNullabilityCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ImplicitNullabilityCheck.java b/src/com/google/javascript/jscomp/ImplicitNullabilityCheck.java\nindex 192b2d4..1a9a5c2 100644\n--- a/src/com/google/javascript/jscomp/ImplicitNullabilityCheck.java\n+++ b/src/com/google/javascript/jscomp/ImplicitNullabilityCheck.java\n@@ -75,7 +75,7 @@\n               }\n             });\n \n-    Scope scope = t.getScope();\n+    final Scope scope = t.getScope();\n     for (Node typeRoot : info.getTypeNodes()) {\n       NodeUtil.visitPreOrder(\n           typeRoot,\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 78,
    "bugNodeStartChar": 2636,
    "bugNodeLength": 27,
    "fixLineNum": 78,
    "fixNodeStartChar": 2636,
    "fixNodeLength": 33,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "ce5f8ecd322a7251c9585a1aba07b1334c4f491d",
    "fixCommitParentSHA1": "3cf8be854b030fbd51bb07ebfce2937228f0db6f",
    "bugFilePath": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex c87a3a5..31ff271 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -215,7 +215,7 @@\n   }\n \n   @Override\n-  public Iterable<TypedVar> getReferences(TypedVar var) {\n+  public ImmutableList<TypedVar> getReferences(TypedVar var) {\n     return ImmutableList.of(var);\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 218,
    "bugNodeStartChar": 9577,
    "bugNodeLength": 18,
    "fixLineNum": 218,
    "fixNodeStartChar": 9577,
    "fixNodeLength": 23,
    "sourceBeforeFix": "Iterable<TypedVar>",
    "sourceAfterFix": "ImmutableList<TypedVar>"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "86b2d8d04c060d0c6fc65703b2c9f3f99e32a53b",
    "fixCommitParentSHA1": "4a3b5616eec91727e5fee5a0e2b8d0280dbff127",
    "bugFilePath": "test/com/google/javascript/jscomp/StrictModeCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/StrictModeCheckTest.java b/test/com/google/javascript/jscomp/StrictModeCheckTest.java\nindex 39627b8..75929cc 100644\n--- a/test/com/google/javascript/jscomp/StrictModeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/StrictModeCheckTest.java\n@@ -44,7 +44,7 @@\n \n   private void testSameEs6Strict(String js) {\n     setAcceptedLanguage(LanguageMode.ECMASCRIPT_2015);\n-    testSame(js, js);\n+    testSame(js);\n   }\n \n   public void testUseOfWith1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 47,
    "bugNodeStartChar": 1419,
    "bugNodeLength": 16,
    "fixLineNum": 47,
    "fixNodeStartChar": 1419,
    "fixNodeLength": 12,
    "sourceBeforeFix": "testSame(js,js)",
    "sourceAfterFix": "testSame(js)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "4a7e4baf334f0a22230e99046b4f63321ae9ccc4",
    "fixCommitParentSHA1": "5564412480efc7ccb5aeeaf56dc64f03ad7c381b",
    "bugFilePath": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/RhinoErrorReporter.java b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\nindex e56db07..772b22b 100644\n--- a/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n@@ -49,7 +49,7 @@\n       DiagnosticType.disabled(\"JSC_JSDOC_MISSING_TYPE_WARNING\", \"{0}\");\n \n   static final DiagnosticType TOO_MANY_TEMPLATE_PARAMS =\n-      DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");\n+      DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");\n \n   // Special-cased errors, so that they can be configured via the\n   // warnings API.\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 52,
    "bugNodeStartChar": 2018,
    "bugNodeLength": 59,
    "fixLineNum": 52,
    "fixNodeStartChar": 2018,
    "fixNodeLength": 62,
    "sourceBeforeFix": "DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")",
    "sourceAfterFix": "DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "4a7e4baf334f0a22230e99046b4f63321ae9ccc4",
    "fixCommitParentSHA1": "5564412480efc7ccb5aeeaf56dc64f03ad7c381b",
    "bugFilePath": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/RhinoErrorReporter.java b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\nindex e56db07..772b22b 100644\n--- a/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n@@ -49,7 +49,7 @@\n       DiagnosticType.disabled(\"JSC_JSDOC_MISSING_TYPE_WARNING\", \"{0}\");\n \n   static final DiagnosticType TOO_MANY_TEMPLATE_PARAMS =\n-      DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");\n+      DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");\n \n   // Special-cased errors, so that they can be configured via the\n   // warnings API.\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 52,
    "bugNodeStartChar": 2018,
    "bugNodeLength": 59,
    "fixLineNum": 52,
    "fixNodeStartChar": 2018,
    "fixNodeLength": 62,
    "sourceBeforeFix": "DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")",
    "sourceAfterFix": "DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6e44c2ab7f925356eebe85a007e5d89d2880fef2",
    "fixCommitParentSHA1": "42b4f45a6216a4bad199d03ecd09a9fbdc4b6f65",
    "bugFilePath": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/RhinoErrorReporter.java b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\nindex 772b22b..e56db07 100644\n--- a/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n@@ -49,7 +49,7 @@\n       DiagnosticType.disabled(\"JSC_JSDOC_MISSING_TYPE_WARNING\", \"{0}\");\n \n   static final DiagnosticType TOO_MANY_TEMPLATE_PARAMS =\n-      DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");\n+      DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");\n \n   // Special-cased errors, so that they can be configured via the\n   // warnings API.\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 52,
    "bugNodeStartChar": 2018,
    "bugNodeLength": 62,
    "fixLineNum": 52,
    "fixNodeStartChar": 2018,
    "fixNodeLength": 59,
    "sourceBeforeFix": "DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")",
    "sourceAfterFix": "DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6e44c2ab7f925356eebe85a007e5d89d2880fef2",
    "fixCommitParentSHA1": "42b4f45a6216a4bad199d03ecd09a9fbdc4b6f65",
    "bugFilePath": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/RhinoErrorReporter.java b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\nindex 772b22b..e56db07 100644\n--- a/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n@@ -49,7 +49,7 @@\n       DiagnosticType.disabled(\"JSC_JSDOC_MISSING_TYPE_WARNING\", \"{0}\");\n \n   static final DiagnosticType TOO_MANY_TEMPLATE_PARAMS =\n-      DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");\n+      DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");\n \n   // Special-cased errors, so that they can be configured via the\n   // warnings API.\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 52,
    "bugNodeStartChar": 2018,
    "bugNodeLength": 62,
    "fixLineNum": 52,
    "fixNodeStartChar": 2018,
    "fixNodeLength": 59,
    "sourceBeforeFix": "DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")",
    "sourceAfterFix": "DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "de0b466751544a742b35d287465e584467796406",
    "fixCommitParentSHA1": "20b4233e5b136cd5c226df594423ca271ce1f7fb",
    "bugFilePath": "src/com/google/javascript/jscomp/CompilerInput.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CompilerInput.java b/src/com/google/javascript/jscomp/CompilerInput.java\nindex 4b71ebb..c6f162f 100644\n--- a/src/com/google/javascript/jscomp/CompilerInput.java\n+++ b/src/com/google/javascript/jscomp/CompilerInput.java\n@@ -306,7 +306,7 @@\n         return new LazyParsedDependencyInfo(info, (JsAst) ast, compiler);\n       } catch (IOException e) {\n         compiler.getErrorManager().report(CheckLevel.ERROR,\n-            JSError.make(AbstractCompiler.READ_ERROR, getName()));\n+            JSError.make(AbstractCompiler.READ_ERROR, getName(), e.getMessage()));\n         return SimpleDependencyInfo.EMPTY;\n       }\n     } else {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 309,
    "bugNodeStartChar": 10279,
    "bugNodeLength": 52,
    "fixLineNum": 309,
    "fixNodeStartChar": 10279,
    "fixNodeLength": 68,
    "sourceBeforeFix": "JSError.make(AbstractCompiler.READ_ERROR,getName())",
    "sourceAfterFix": "JSError.make(AbstractCompiler.READ_ERROR,getName(),e.getMessage())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "de0b466751544a742b35d287465e584467796406",
    "fixCommitParentSHA1": "20b4233e5b136cd5c226df594423ca271ce1f7fb",
    "bugFilePath": "src/com/google/javascript/jscomp/JsAst.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/JsAst.java b/src/com/google/javascript/jscomp/JsAst.java\nindex 1562e3a..b94b909 100644\n--- a/src/com/google/javascript/jscomp/JsAst.java\n+++ b/src/com/google/javascript/jscomp/JsAst.java\n@@ -172,7 +172,7 @@\n       }\n     } catch (IOException e) {\n       compiler.report(\n-          JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n+          JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName(), e.getMessage()));\n     }\n \n     if (root == null) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 175,
    "bugNodeStartChar": 5671,
    "bugNodeLength": 63,
    "fixLineNum": 175,
    "fixNodeStartChar": 5671,
    "fixNodeLength": 79,
    "sourceBeforeFix": "JSError.make(AbstractCompiler.READ_ERROR,sourceFile.getName())",
    "sourceAfterFix": "JSError.make(AbstractCompiler.READ_ERROR,sourceFile.getName(),e.getMessage())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "63d25425293ce36b61665d3264696cd38cc8e6c2",
    "fixCommitParentSHA1": "5f6da5d51b49f075d7f5d71a26af9f73500ae970",
    "bugFilePath": "src/com/google/javascript/jscomp/CompilerOptions.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CompilerOptions.java b/src/com/google/javascript/jscomp/CompilerOptions.java\nindex d383fd0..2fd122d 100644\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n@@ -2786,7 +2786,7 @@\n     }\n   }\n \n-  public final List<ConformanceConfig> getConformanceConfigs() {\n+  public final ImmutableList<ConformanceConfig> getConformanceConfigs() {\n     return conformanceConfigs;\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 2789,
    "bugNodeStartChar": 84433,
    "bugNodeLength": 23,
    "fixLineNum": 2789,
    "fixNodeStartChar": 84433,
    "fixNodeLength": 32,
    "sourceBeforeFix": "List<ConformanceConfig>",
    "sourceAfterFix": "ImmutableList<ConformanceConfig>"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "a95dd903c7b82b0934e8ecf81af9a01629f34a29",
    "fixCommitParentSHA1": "d9c072de4c22d763836e83b93725c8b7aa0e9502",
    "bugFilePath": "test/com/google/javascript/jscomp/RemoveUnusedCodeNameAnalyzerTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/RemoveUnusedCodeNameAnalyzerTest.java b/test/com/google/javascript/jscomp/RemoveUnusedCodeNameAnalyzerTest.java\nindex b5fef34..0f55d30 100644\n--- a/test/com/google/javascript/jscomp/RemoveUnusedCodeNameAnalyzerTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedCodeNameAnalyzerTest.java\n@@ -588,20 +588,20 @@\n         \"var ns = {}; ns.Class1 = class {}; use(ns.Class1);\");\n   }\n \n-  // TODO(b/66971163): enable or remove this\n-  public void disabledTestAssignmentToThisPrototype() {\n+  public void testAssignmentToThisPrototype() {\n     testSame(\n         lines(\n             \"Function.prototype.inherits = function(parentCtor) {\",\n             \"  function tempCtor() {};\",\n             \"  tempCtor.prototype = parentCtor.prototype;\",\n-            // the test currently fails because the assignment to this.superClass_ gets removed.\n-            // Maybe we need to include codingConvention.getIndirectlyDeclaredProperties(), which\n-            // includes \"superClass_\" in the initial list of referenced properties?\n             \"  this.superClass_ = parentCtor.prototype;\",\n             \"  this.prototype = new tempCtor();\",\n             \"  this.prototype.constructor = this;\",\n-            \"};\"));\n+            \"};\",\n+            \"/** @constructor */ function A() {}\",\n+            \"/** @constructor */ function B() {}\",\n+            \"B.inherits(A);\",\n+            \"use(B.superClass_);\"));\n   }\n \n   public void testAssignmentToCallResultPrototype() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 594,
    "bugNodeStartChar": 17681,
    "bugNodeLength": 632,
    "fixLineNum": 594,
    "fixNodeStartChar": 17681,
    "fixNodeLength": 799,
    "sourceBeforeFix": "lines(\"Function.prototype.inherits = function(parentCtor) {\",\"  function tempCtor() {};\",\"  tempCtor.prototype = parentCtor.prototype;\",\"  this.superClass_ = parentCtor.prototype;\",\"  this.prototype = new tempCtor();\",\"  this.prototype.constructor = this;\",\"};\")",
    "sourceAfterFix": "lines(\"Function.prototype.inherits = function(parentCtor) {\",\"  function tempCtor() {};\",\"  tempCtor.prototype = parentCtor.prototype;\",\"  this.superClass_ = parentCtor.prototype;\",\"  this.prototype = new tempCtor();\",\"  this.prototype.constructor = this;\",\"};\",\"/** @constructor */ function A() {}\",\"/** @constructor */ function B() {}\",\"B.inherits(A);\",\"use(B.superClass_);\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5ee951ff70fe47c3ac6c7ace3e8b802c99598d14",
    "fixCommitParentSHA1": "966db876e160950e0f2a22808e1095fcb2029192",
    "bugFilePath": "src/com/google/javascript/jscomp/SymbolTable.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/SymbolTable.java b/src/com/google/javascript/jscomp/SymbolTable.java\nindex b506bb3..4411e60 100644\n--- a/src/com/google/javascript/jscomp/SymbolTable.java\n+++ b/src/com/google/javascript/jscomp/SymbolTable.java\n@@ -152,7 +152,7 @@\n     return ImmutableList.copyOf(symbol.references.values());\n   }\n \n-  public Iterable<Symbol> getAllSymbols() {\n+  public ImmutableList<Symbol> getAllSymbols() {\n     return ImmutableList.copyOf(symbols.values());\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 155,
    "bugNodeStartChar": 6193,
    "bugNodeLength": 16,
    "fixLineNum": 155,
    "fixNodeStartChar": 6193,
    "fixNodeLength": 21,
    "sourceBeforeFix": "Iterable<Symbol>",
    "sourceAfterFix": "ImmutableList<Symbol>"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "8ca49102c21f505c6e733c1e15d0cf93a21764ce",
    "fixCommitParentSHA1": "98bd2afb31f656ff63dd60f6608675ac8630c16e",
    "bugFilePath": "src/com/google/javascript/rhino/Node.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java\nindex 07796fe..9b911db 100644\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -2343,7 +2343,7 @@\n    * #getDeclaredTypeExpression()} which returns the syntactically specified type.\n    */\n   @Nullable\n-  public JSType getJSType() {  // TODO(johnlenz): make this final\n+  public final JSType getJSType() {\n     return typei instanceof JSType ? (JSType) typei : null;\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 2341,
    "bugNodeStartChar": 73344,
    "bugNodeLength": 319,
    "fixLineNum": 2341,
    "fixNodeStartChar": 73344,
    "fixNodeLength": 289,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "17"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1f06fd5e26e7454182368890d0b882817ca5869f",
    "fixCommitParentSHA1": "5d02a6c7bfc0a7a9b3c0de9b50816f8c41a7e5f4",
    "bugFilePath": "src/com/google/javascript/jscomp/IncrementalScopeCreator.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/IncrementalScopeCreator.java b/src/com/google/javascript/jscomp/IncrementalScopeCreator.java\nindex ae170c9..993972a 100644\n--- a/src/com/google/javascript/jscomp/IncrementalScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/IncrementalScopeCreator.java\n@@ -304,7 +304,7 @@\n     }\n   }\n \n-  private static final List<PersistentLocalScope> PRIMORDIAL_LIST = ImmutableList.of();\n+  private static final ImmutableList<PersistentLocalScope> PRIMORDIAL_LIST = ImmutableList.of();\n \n   /**\n    * A subclass of the traditional Scope class that knows about its children,\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 307,
    "bugNodeStartChar": 10369,
    "bugNodeLength": 26,
    "fixLineNum": 307,
    "fixNodeStartChar": 10369,
    "fixNodeLength": 35,
    "sourceBeforeFix": "List<PersistentLocalScope>",
    "sourceAfterFix": "ImmutableList<PersistentLocalScope>"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "fixCommitSHA1": "52194cf080a8363b250b8f6c0fcb88c11e639122",
    "fixCommitParentSHA1": "f5104ee186b71432cd258cff5254fbeff07ce0aa",
    "bugFilePath": "src/com/google/javascript/jscomp/CompilerOptions.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CompilerOptions.java b/src/com/google/javascript/jscomp/CompilerOptions.java\nindex b3d18b6..82d01b4 100644\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n@@ -215,13 +215,13 @@\n   private boolean useNewTypeInference;\n \n   /**\n-   * Several passes after type checking use type information. Some of these passes do not work\n-   * yet with the new type inference. For this reason, we run the old type checker after NTI,\n-   * so that the subsequent passes can use the old types.\n-   * Turning this option off allows us to debug NTI-only builds; with the goal to eventually\n-   * stop running OTI after NTI.\n+   * Several passes after type checking use type information. We have converted all these passes\n+   * to use TypeI, and most users of NTI use NTI types throughout their compilation.\n+   * But there are a few NTI users that still use the old mode, where OTI runs after NTI\n+   * and the optimizations see the old types. We plan to switch these users to NTI-only builds\n+   * and delete this option.\n    */\n-  private boolean runOTIafterNTI = true;\n+  private boolean runOTIafterNTI = false;\n \n   /**\n    * Relevant only when {@link #useNewTypeInference} is true, where we normally disable OTI errors.\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 224,
    "bugNodeStartChar": 7028,
    "bugNodeLength": 21,
    "fixLineNum": 224,
    "fixNodeStartChar": 7028,
    "fixNodeLength": 22,
    "sourceBeforeFix": "runOTIafterNTI=true",
    "sourceAfterFix": "runOTIafterNTI=false"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "daa6b7abd4d8d8c420addb5d1af91b60505d0522",
    "fixCommitParentSHA1": "1be8d7fe7a40efb4c363679538e4c0cb31c6b43e",
    "bugFilePath": "src/com/google/javascript/jscomp/deps/Es6SortedDependencies.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/deps/Es6SortedDependencies.java b/src/com/google/javascript/jscomp/deps/Es6SortedDependencies.java\nindex 913cafb..2a7296c 100644\n--- a/src/com/google/javascript/jscomp/deps/Es6SortedDependencies.java\n+++ b/src/com/google/javascript/jscomp/deps/Es6SortedDependencies.java\n@@ -110,7 +110,7 @@\n   }\n \n   @Override\n-  public List<INPUT> getSortedDependenciesOf(List<INPUT> roots) {\n+  public ImmutableList<INPUT> getSortedDependenciesOf(List<INPUT> roots) {\n     return getDependenciesOf(roots, true);\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 113,
    "bugNodeStartChar": 4041,
    "bugNodeLength": 11,
    "fixLineNum": 113,
    "fixNodeStartChar": 4041,
    "fixNodeLength": 20,
    "sourceBeforeFix": "List<INPUT>",
    "sourceAfterFix": "ImmutableList<INPUT>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "daa6b7abd4d8d8c420addb5d1af91b60505d0522",
    "fixCommitParentSHA1": "1be8d7fe7a40efb4c363679538e4c0cb31c6b43e",
    "bugFilePath": "src/com/google/javascript/refactoring/ErrorToFixMapper.java",
    "fixPatch": "diff --git a/src/com/google/javascript/refactoring/ErrorToFixMapper.java b/src/com/google/javascript/refactoring/ErrorToFixMapper.java\nindex 2ec0974..433f4ab 100644\n--- a/src/com/google/javascript/refactoring/ErrorToFixMapper.java\n+++ b/src/com/google/javascript/refactoring/ErrorToFixMapper.java\n@@ -57,7 +57,8 @@\n   private static final Pattern USE_SHORT_NAME =\n       Pattern.compile(\".*Please use the short name '(.*)' instead.\");\n \n-  public static List<SuggestedFix> getFixesForJsError(JSError error, AbstractCompiler compiler) {\n+  public static ImmutableList<SuggestedFix> getFixesForJsError(\n+      JSError error, AbstractCompiler compiler) {\n     SuggestedFix fix = getFixForJsError(error, compiler);\n     if (fix != null) {\n       return ImmutableList.of(fix);\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 60,
    "bugNodeStartChar": 2593,
    "bugNodeLength": 18,
    "fixLineNum": 60,
    "fixNodeStartChar": 2593,
    "fixNodeLength": 27,
    "sourceBeforeFix": "List<SuggestedFix>",
    "sourceAfterFix": "ImmutableList<SuggestedFix>"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "1be8d7fe7a40efb4c363679538e4c0cb31c6b43e",
    "fixCommitParentSHA1": "ef8bba0fe5429d2a4c8047ee309f844cb8d6b4ce",
    "bugFilePath": "src/com/google/javascript/jscomp/SourceMapInput.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/SourceMapInput.java b/src/com/google/javascript/jscomp/SourceMapInput.java\nindex 645d34a..d35d559 100644\n--- a/src/com/google/javascript/jscomp/SourceMapInput.java\n+++ b/src/com/google/javascript/jscomp/SourceMapInput.java\n@@ -33,10 +33,11 @@\n   private transient volatile boolean cached = false;\n \n   static final DiagnosticType SOURCEMAP_RESOLVE_FAILED =\n-      DiagnosticType.warning(\"SOURCEMAP_RESOLVE_FAILED\", \"Failed to resolve sourcemap: {0}\");\n+      DiagnosticType.warning(\"SOURCEMAP_RESOLVE_FAILED\", \"Failed to resolve sourcemap at {0}: {1}\");\n \n   static final DiagnosticType SOURCEMAP_PARSE_FAILED =\n-      DiagnosticType.warning(\"SOURCEMAP_PARSE_FAILED\", \"Failed to parse malformed sourcemap: {0}\");\n+      DiagnosticType.warning(\n+          \"SOURCEMAP_PARSE_FAILED\", \"Failed to parse malformed sourcemap in {0}: {1}\");\n \n   public SourceMapInput(SourceFile sourceFile) {\n     this.sourceFile = sourceFile;\n@@ -57,10 +58,12 @@\n         consumer.parse(sourceMapContents);\n         parsedSourceMap = consumer;\n       } catch (IOException e) {\n-        JSError error = JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED, sourceMapPath);\n+        JSError error =\n+            JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED, sourceMapPath, e.getMessage());\n         errorManager.report(error.getDefaultLevel(), error);\n       } catch (SourceMapParseException e) {\n-        JSError error = JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED, sourceMapPath);\n+        JSError error =\n+            JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED, sourceMapPath, e.getMessage());\n         errorManager.report(error.getDefaultLevel(), error);\n       }\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 60,
    "bugNodeStartChar": 2329,
    "bugNodeLength": 68,
    "fixLineNum": 61,
    "fixNodeStartChar": 2341,
    "fixNodeLength": 84,
    "sourceBeforeFix": "JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED,sourceMapPath)",
    "sourceAfterFix": "JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED,sourceMapPath,e.getMessage())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "1be8d7fe7a40efb4c363679538e4c0cb31c6b43e",
    "fixCommitParentSHA1": "ef8bba0fe5429d2a4c8047ee309f844cb8d6b4ce",
    "bugFilePath": "src/com/google/javascript/jscomp/SourceMapInput.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/SourceMapInput.java b/src/com/google/javascript/jscomp/SourceMapInput.java\nindex 645d34a..d35d559 100644\n--- a/src/com/google/javascript/jscomp/SourceMapInput.java\n+++ b/src/com/google/javascript/jscomp/SourceMapInput.java\n@@ -33,10 +33,11 @@\n   private transient volatile boolean cached = false;\n \n   static final DiagnosticType SOURCEMAP_RESOLVE_FAILED =\n-      DiagnosticType.warning(\"SOURCEMAP_RESOLVE_FAILED\", \"Failed to resolve sourcemap: {0}\");\n+      DiagnosticType.warning(\"SOURCEMAP_RESOLVE_FAILED\", \"Failed to resolve sourcemap at {0}: {1}\");\n \n   static final DiagnosticType SOURCEMAP_PARSE_FAILED =\n-      DiagnosticType.warning(\"SOURCEMAP_PARSE_FAILED\", \"Failed to parse malformed sourcemap: {0}\");\n+      DiagnosticType.warning(\n+          \"SOURCEMAP_PARSE_FAILED\", \"Failed to parse malformed sourcemap in {0}: {1}\");\n \n   public SourceMapInput(SourceFile sourceFile) {\n     this.sourceFile = sourceFile;\n@@ -57,10 +58,12 @@\n         consumer.parse(sourceMapContents);\n         parsedSourceMap = consumer;\n       } catch (IOException e) {\n-        JSError error = JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED, sourceMapPath);\n+        JSError error =\n+            JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED, sourceMapPath, e.getMessage());\n         errorManager.report(error.getDefaultLevel(), error);\n       } catch (SourceMapParseException e) {\n-        JSError error = JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED, sourceMapPath);\n+        JSError error =\n+            JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED, sourceMapPath, e.getMessage());\n         errorManager.report(error.getDefaultLevel(), error);\n       }\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 63,
    "bugNodeStartChar": 2528,
    "bugNodeLength": 66,
    "fixLineNum": 64,
    "fixNodeStartChar": 2540,
    "fixNodeLength": 82,
    "sourceBeforeFix": "JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED,sourceMapPath)",
    "sourceAfterFix": "JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED,sourceMapPath,e.getMessage())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "25f231b4a41a3d15554e7687e899ce46e6bd17f1",
    "fixCommitParentSHA1": "641e5d0a7c3e8fa7a20e7db7435ccb08f7a2ee49",
    "bugFilePath": "test/com/google/javascript/jscomp/OptimizeParametersTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/OptimizeParametersTest.java b/test/com/google/javascript/jscomp/OptimizeParametersTest.java\nindex 7012b25..1eb1839 100644\n--- a/test/com/google/javascript/jscomp/OptimizeParametersTest.java\n+++ b/test/com/google/javascript/jscomp/OptimizeParametersTest.java\n@@ -163,13 +163,13 @@\n     testSame(\"var foo = function () {}; foo.call();\");\n \n     testSame(\"var foo = function () {}; foo.call(this);\");\n-    testSame(\n+    test(\n         \"var foo = function (a) {}; foo.call(this, 1);\",\n-        \"var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);\");\n+        \"var foo = function () {var a = 1;}; foo.call(this);\");\n     testSame(\"var foo = function () {}; foo.call(null);\");\n-    testSame(\n+    test(\n         \"var foo = function (a) {}; foo.call(null, 1);\",\n-        \"var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);\");\n+        \"var foo = function () {var a = 1;}; foo.call(null);\");\n   }\n \n   public void testDoOptimizeApply() {\n@@ -445,11 +445,9 @@\n   }\n \n   public void testFunctionWithReferenceToArgumentsShouldNotBeOptimize() {\n-    testSame(\"function foo(a,b,c) { return arguments.size; };\" +\n-             \"foo(1);\");\n+    testSame(\"function foo(a,b,c) { return arguments.size; }; foo(1);\");\n     testSame(\"var foo = function(a,b,c) { return arguments.size }; foo(1);\");\n-    testSame(\"var foo = function bar(a,b,c) { return arguments.size }; \" +\n-             \"foo(2); bar(2);\");\n+    testSame(\"var foo = function bar(a,b,c) { return arguments.size }; foo(2); bar(2);\");\n   }\n \n   public void testFunctionWithTwoNames() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 166,
    "bugNodeStartChar": 6483,
    "bugNodeLength": 138,
    "fixLineNum": 166,
    "fixNodeStartChar": 6483,
    "fixNodeLength": 134,
    "sourceBeforeFix": "testSame(\"var foo = function (a) {}; foo.call(this, 1);\",\"var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);\")",
    "sourceAfterFix": "test(\"var foo = function (a) {}; foo.call(this, 1);\",\"var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "25f231b4a41a3d15554e7687e899ce46e6bd17f1",
    "fixCommitParentSHA1": "641e5d0a7c3e8fa7a20e7db7435ccb08f7a2ee49",
    "bugFilePath": "test/com/google/javascript/jscomp/OptimizeParametersTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/OptimizeParametersTest.java b/test/com/google/javascript/jscomp/OptimizeParametersTest.java\nindex 7012b25..1eb1839 100644\n--- a/test/com/google/javascript/jscomp/OptimizeParametersTest.java\n+++ b/test/com/google/javascript/jscomp/OptimizeParametersTest.java\n@@ -163,13 +163,13 @@\n     testSame(\"var foo = function () {}; foo.call();\");\n \n     testSame(\"var foo = function () {}; foo.call(this);\");\n-    testSame(\n+    test(\n         \"var foo = function (a) {}; foo.call(this, 1);\",\n-        \"var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);\");\n+        \"var foo = function () {var a = 1;}; foo.call(this);\");\n     testSame(\"var foo = function () {}; foo.call(null);\");\n-    testSame(\n+    test(\n         \"var foo = function (a) {}; foo.call(null, 1);\",\n-        \"var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);\");\n+        \"var foo = function () {var a = 1;}; foo.call(null);\");\n   }\n \n   public void testDoOptimizeApply() {\n@@ -445,11 +445,9 @@\n   }\n \n   public void testFunctionWithReferenceToArgumentsShouldNotBeOptimize() {\n-    testSame(\"function foo(a,b,c) { return arguments.size; };\" +\n-             \"foo(1);\");\n+    testSame(\"function foo(a,b,c) { return arguments.size; }; foo(1);\");\n     testSame(\"var foo = function(a,b,c) { return arguments.size }; foo(1);\");\n-    testSame(\"var foo = function bar(a,b,c) { return arguments.size }; \" +\n-             \"foo(2); bar(2);\");\n+    testSame(\"var foo = function bar(a,b,c) { return arguments.size }; foo(2); bar(2);\");\n   }\n \n   public void testFunctionWithTwoNames() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 166,
    "bugNodeStartChar": 6483,
    "bugNodeLength": 138,
    "fixLineNum": 166,
    "fixNodeStartChar": 6483,
    "fixNodeLength": 134,
    "sourceBeforeFix": "testSame(\"var foo = function (a) {}; foo.call(this, 1);\",\"var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);\")",
    "sourceAfterFix": "test(\"var foo = function (a) {}; foo.call(this, 1);\",\"var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "25f231b4a41a3d15554e7687e899ce46e6bd17f1",
    "fixCommitParentSHA1": "641e5d0a7c3e8fa7a20e7db7435ccb08f7a2ee49",
    "bugFilePath": "test/com/google/javascript/jscomp/OptimizeParametersTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/OptimizeParametersTest.java b/test/com/google/javascript/jscomp/OptimizeParametersTest.java\nindex 7012b25..1eb1839 100644\n--- a/test/com/google/javascript/jscomp/OptimizeParametersTest.java\n+++ b/test/com/google/javascript/jscomp/OptimizeParametersTest.java\n@@ -163,13 +163,13 @@\n     testSame(\"var foo = function () {}; foo.call();\");\n \n     testSame(\"var foo = function () {}; foo.call(this);\");\n-    testSame(\n+    test(\n         \"var foo = function (a) {}; foo.call(this, 1);\",\n-        \"var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);\");\n+        \"var foo = function () {var a = 1;}; foo.call(this);\");\n     testSame(\"var foo = function () {}; foo.call(null);\");\n-    testSame(\n+    test(\n         \"var foo = function (a) {}; foo.call(null, 1);\",\n-        \"var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);\");\n+        \"var foo = function () {var a = 1;}; foo.call(null);\");\n   }\n \n   public void testDoOptimizeApply() {\n@@ -445,11 +445,9 @@\n   }\n \n   public void testFunctionWithReferenceToArgumentsShouldNotBeOptimize() {\n-    testSame(\"function foo(a,b,c) { return arguments.size; };\" +\n-             \"foo(1);\");\n+    testSame(\"function foo(a,b,c) { return arguments.size; }; foo(1);\");\n     testSame(\"var foo = function(a,b,c) { return arguments.size }; foo(1);\");\n-    testSame(\"var foo = function bar(a,b,c) { return arguments.size }; \" +\n-             \"foo(2); bar(2);\");\n+    testSame(\"var foo = function bar(a,b,c) { return arguments.size }; foo(2); bar(2);\");\n   }\n \n   public void testFunctionWithTwoNames() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 170,
    "bugNodeStartChar": 6686,
    "bugNodeLength": 138,
    "fixLineNum": 170,
    "fixNodeStartChar": 6686,
    "fixNodeLength": 134,
    "sourceBeforeFix": "testSame(\"var foo = function (a) {}; foo.call(null, 1);\",\"var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);\")",
    "sourceAfterFix": "test(\"var foo = function (a) {}; foo.call(null, 1);\",\"var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "25f231b4a41a3d15554e7687e899ce46e6bd17f1",
    "fixCommitParentSHA1": "641e5d0a7c3e8fa7a20e7db7435ccb08f7a2ee49",
    "bugFilePath": "test/com/google/javascript/jscomp/OptimizeParametersTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/OptimizeParametersTest.java b/test/com/google/javascript/jscomp/OptimizeParametersTest.java\nindex 7012b25..1eb1839 100644\n--- a/test/com/google/javascript/jscomp/OptimizeParametersTest.java\n+++ b/test/com/google/javascript/jscomp/OptimizeParametersTest.java\n@@ -163,13 +163,13 @@\n     testSame(\"var foo = function () {}; foo.call();\");\n \n     testSame(\"var foo = function () {}; foo.call(this);\");\n-    testSame(\n+    test(\n         \"var foo = function (a) {}; foo.call(this, 1);\",\n-        \"var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);\");\n+        \"var foo = function () {var a = 1;}; foo.call(this);\");\n     testSame(\"var foo = function () {}; foo.call(null);\");\n-    testSame(\n+    test(\n         \"var foo = function (a) {}; foo.call(null, 1);\",\n-        \"var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);\");\n+        \"var foo = function () {var a = 1;}; foo.call(null);\");\n   }\n \n   public void testDoOptimizeApply() {\n@@ -445,11 +445,9 @@\n   }\n \n   public void testFunctionWithReferenceToArgumentsShouldNotBeOptimize() {\n-    testSame(\"function foo(a,b,c) { return arguments.size; };\" +\n-             \"foo(1);\");\n+    testSame(\"function foo(a,b,c) { return arguments.size; }; foo(1);\");\n     testSame(\"var foo = function(a,b,c) { return arguments.size }; foo(1);\");\n-    testSame(\"var foo = function bar(a,b,c) { return arguments.size }; \" +\n-             \"foo(2); bar(2);\");\n+    testSame(\"var foo = function bar(a,b,c) { return arguments.size }; foo(2); bar(2);\");\n   }\n \n   public void testFunctionWithTwoNames() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 170,
    "bugNodeStartChar": 6686,
    "bugNodeLength": 138,
    "fixLineNum": 170,
    "fixNodeStartChar": 6686,
    "fixNodeLength": 134,
    "sourceBeforeFix": "testSame(\"var foo = function (a) {}; foo.call(null, 1);\",\"var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);\")",
    "sourceAfterFix": "test(\"var foo = function (a) {}; foo.call(null, 1);\",\"var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "2751e2207868cd6f35e86ed40a6076d52e7c0252",
    "fixCommitParentSHA1": "86db7ff743a24faa91ff1d5e015e1dc810e6e8b7",
    "bugFilePath": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DiagnosticGroups.java b/src/com/google/javascript/jscomp/DiagnosticGroups.java\nindex c09ac57..ade6348 100644\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n@@ -279,7 +279,8 @@\n   public static final DiagnosticGroup OLD_CHECK_TYPES =\n       DiagnosticGroups.registerGroup(\"oldCheckTypes\",  // undocumented\n           TypeValidator.ALL_DIAGNOSTICS,\n-          TypeCheck.ALL_DIAGNOSTICS);\n+          TypeCheck.ALL_DIAGNOSTICS,\n+          DiagnosticGroups.GLOBAL_THIS);\n \n   // Run the new type inference, but omit many warnings that are not\n   // found by the old type checker. This makes migration to NTI more manageable.\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 280,
    "bugNodeStartChar": 10952,
    "bugNodeLength": 142,
    "fixLineNum": 280,
    "fixNodeStartChar": 10952,
    "fixNodeLength": 182,
    "sourceBeforeFix": "DiagnosticGroups.registerGroup(\"oldCheckTypes\",TypeValidator.ALL_DIAGNOSTICS,TypeCheck.ALL_DIAGNOSTICS)",
    "sourceAfterFix": "DiagnosticGroups.registerGroup(\"oldCheckTypes\",TypeValidator.ALL_DIAGNOSTICS,TypeCheck.ALL_DIAGNOSTICS,DiagnosticGroups.GLOBAL_THIS)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0940ca6f4588c99837f551bd1bdf64dec5392a45",
    "fixCommitParentSHA1": "df0af78877bc0b6915add353dbeccfb835940771",
    "bugFilePath": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java b/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java\nindex 7154c06..b1c93da 100644\n--- a/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java\n@@ -1039,12 +1039,12 @@\n \n   public void testInvalidGoogBase14() {\n     testError(\"class Foo extends BaseFoo { constructor() { Foo.base(this); } }\",\n-        GOOG_BASE_CLASS_ERROR);\n+        BASE_CLASS_ERROR);\n   }\n \n   public void testInvalidGoogBase14b() {\n     testError(\"class Foo extends BaseFoo { method() { Foo.base(this, 'method'); } }\",\n-        GOOG_BASE_CLASS_ERROR);\n+        BASE_CLASS_ERROR);\n   }\n \n   public void testValidBase1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1041,
    "bugNodeStartChar": 37228,
    "bugNodeLength": 107,
    "fixLineNum": 1041,
    "fixNodeStartChar": 37228,
    "fixNodeLength": 102,
    "sourceBeforeFix": "testError(\"class Foo extends BaseFoo { constructor() { Foo.base(this); } }\",GOOG_BASE_CLASS_ERROR)",
    "sourceAfterFix": "testError(\"class Foo extends BaseFoo { constructor() { Foo.base(this); } }\",BASE_CLASS_ERROR)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0940ca6f4588c99837f551bd1bdf64dec5392a45",
    "fixCommitParentSHA1": "df0af78877bc0b6915add353dbeccfb835940771",
    "bugFilePath": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java b/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java\nindex 7154c06..b1c93da 100644\n--- a/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java\n@@ -1039,12 +1039,12 @@\n \n   public void testInvalidGoogBase14() {\n     testError(\"class Foo extends BaseFoo { constructor() { Foo.base(this); } }\",\n-        GOOG_BASE_CLASS_ERROR);\n+        BASE_CLASS_ERROR);\n   }\n \n   public void testInvalidGoogBase14b() {\n     testError(\"class Foo extends BaseFoo { method() { Foo.base(this, 'method'); } }\",\n-        GOOG_BASE_CLASS_ERROR);\n+        BASE_CLASS_ERROR);\n   }\n \n   public void testValidBase1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1046,
    "bugNodeStartChar": 37387,
    "bugNodeLength": 112,
    "fixLineNum": 1046,
    "fixNodeStartChar": 37387,
    "fixNodeLength": 107,
    "sourceBeforeFix": "testError(\"class Foo extends BaseFoo { method() { Foo.base(this, 'method'); } }\",GOOG_BASE_CLASS_ERROR)",
    "sourceAfterFix": "testError(\"class Foo extends BaseFoo { method() { Foo.base(this, 'method'); } }\",BASE_CLASS_ERROR)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f130eecfda624409190f9cb43747d8c69f37180b",
    "fixCommitParentSHA1": "0e929d8b72577fd3eb7eefe5034f1f6329b1eb10",
    "bugFilePath": "src/com/google/javascript/jscomp/deps/ModuleLoader.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/deps/ModuleLoader.java b/src/com/google/javascript/jscomp/deps/ModuleLoader.java\nindex a57bd56..11d92f6 100644\n--- a/src/com/google/javascript/jscomp/deps/ModuleLoader.java\n+++ b/src/com/google/javascript/jscomp/deps/ModuleLoader.java\n@@ -55,7 +55,7 @@\n       DiagnosticType.warning(\"JSC_JS_MODULE_LOAD_WARNING\", \"Failed to load module \\\"{0}\\\"\");\n \n   public static final DiagnosticType INVALID_MODULE_PATH =\n-      DiagnosticType.warning(\n+      DiagnosticType.error(\n           \"JSC_INVALID_MODULE_PATH\", \"Invalid module path \\\"{0}\\\" for resolution mode \\\"{1}\\\"\");\n \n   private final ErrorHandler errorHandler;\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 58,
    "bugNodeStartChar": 2241,
    "bugNodeLength": 119,
    "fixLineNum": 58,
    "fixNodeStartChar": 2241,
    "fixNodeLength": 117,
    "sourceBeforeFix": "DiagnosticType.warning(\"JSC_INVALID_MODULE_PATH\",\"Invalid module path \\\"{0}\\\" for resolution mode \\\"{1}\\\"\")",
    "sourceAfterFix": "DiagnosticType.error(\"JSC_INVALID_MODULE_PATH\",\"Invalid module path \\\"{0}\\\" for resolution mode \\\"{1}\\\"\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f130eecfda624409190f9cb43747d8c69f37180b",
    "fixCommitParentSHA1": "0e929d8b72577fd3eb7eefe5034f1f6329b1eb10",
    "bugFilePath": "src/com/google/javascript/jscomp/deps/ModuleLoader.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/deps/ModuleLoader.java b/src/com/google/javascript/jscomp/deps/ModuleLoader.java\nindex a57bd56..11d92f6 100644\n--- a/src/com/google/javascript/jscomp/deps/ModuleLoader.java\n+++ b/src/com/google/javascript/jscomp/deps/ModuleLoader.java\n@@ -55,7 +55,7 @@\n       DiagnosticType.warning(\"JSC_JS_MODULE_LOAD_WARNING\", \"Failed to load module \\\"{0}\\\"\");\n \n   public static final DiagnosticType INVALID_MODULE_PATH =\n-      DiagnosticType.warning(\n+      DiagnosticType.error(\n           \"JSC_INVALID_MODULE_PATH\", \"Invalid module path \\\"{0}\\\" for resolution mode \\\"{1}\\\"\");\n \n   private final ErrorHandler errorHandler;\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 58,
    "bugNodeStartChar": 2241,
    "bugNodeLength": 119,
    "fixLineNum": 58,
    "fixNodeStartChar": 2241,
    "fixNodeLength": 117,
    "sourceBeforeFix": "DiagnosticType.warning(\"JSC_INVALID_MODULE_PATH\",\"Invalid module path \\\"{0}\\\" for resolution mode \\\"{1}\\\"\")",
    "sourceAfterFix": "DiagnosticType.error(\"JSC_INVALID_MODULE_PATH\",\"Invalid module path \\\"{0}\\\" for resolution mode \\\"{1}\\\"\")"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "8777c0882b68f70d662d21b862b0db35cf50826d",
    "fixCommitParentSHA1": "f648367f9b73cc125cd9c007c22a3c6881930e28",
    "bugFilePath": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
    "fixPatch": "diff --git a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\nindex d53da5e..ba8dc74 100644\n--- a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n@@ -243,7 +243,7 @@\n       this.content = new StringCharIterator(lineMap);\n     }\n \n-    void build() {\n+    void build() throws SourceMapParseException {\n       int [] temp = new int[MAX_ENTRY_VALUES];\n       ArrayList<Entry> entries = new ArrayList<>();\n       while (content.hasNext()) {\n@@ -309,7 +309,7 @@\n      * @param entryValues The number of entries in the array.\n      * @return The entry object.\n      */\n-    private Entry decodeEntry(int[] vals, int entryValues) {\n+    private Entry decodeEntry(int[] vals, int entryValues) throws SourceMapParseException {\n       Entry entry;\n       switch (entryValues) {\n         // The first values, if present are in the following order:\n@@ -363,7 +363,7 @@\n           return entry;\n \n         default:\n-          throw new IllegalStateException(\n+          throw new SourceMapParseException(\n               \"Unexpected number of values for entry:\" + entryValues);\n       }\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 246,
    "bugNodeStartChar": 7799,
    "bugNodeLength": 1117,
    "fixLineNum": 246,
    "fixNodeStartChar": 7799,
    "fixNodeLength": 1148,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "8777c0882b68f70d662d21b862b0db35cf50826d",
    "fixCommitParentSHA1": "f648367f9b73cc125cd9c007c22a3c6881930e28",
    "bugFilePath": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
    "fixPatch": "diff --git a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\nindex d53da5e..ba8dc74 100644\n--- a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n@@ -243,7 +243,7 @@\n       this.content = new StringCharIterator(lineMap);\n     }\n \n-    void build() {\n+    void build() throws SourceMapParseException {\n       int [] temp = new int[MAX_ENTRY_VALUES];\n       ArrayList<Entry> entries = new ArrayList<>();\n       while (content.hasNext()) {\n@@ -309,7 +309,7 @@\n      * @param entryValues The number of entries in the array.\n      * @return The entry object.\n      */\n-    private Entry decodeEntry(int[] vals, int entryValues) {\n+    private Entry decodeEntry(int[] vals, int entryValues) throws SourceMapParseException {\n       Entry entry;\n       switch (entryValues) {\n         // The first values, if present are in the following order:\n@@ -363,7 +363,7 @@\n           return entry;\n \n         default:\n-          throw new IllegalStateException(\n+          throw new SourceMapParseException(\n               \"Unexpected number of values for entry:\" + entryValues);\n       }\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 304,
    "bugNodeStartChar": 9637,
    "bugNodeLength": 2677,
    "fixLineNum": 304,
    "fixNodeStartChar": 9637,
    "fixNodeLength": 2708,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "2"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "8777c0882b68f70d662d21b862b0db35cf50826d",
    "fixCommitParentSHA1": "f648367f9b73cc125cd9c007c22a3c6881930e28",
    "bugFilePath": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
    "fixPatch": "diff --git a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\nindex d53da5e..ba8dc74 100644\n--- a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n@@ -243,7 +243,7 @@\n       this.content = new StringCharIterator(lineMap);\n     }\n \n-    void build() {\n+    void build() throws SourceMapParseException {\n       int [] temp = new int[MAX_ENTRY_VALUES];\n       ArrayList<Entry> entries = new ArrayList<>();\n       while (content.hasNext()) {\n@@ -309,7 +309,7 @@\n      * @param entryValues The number of entries in the array.\n      * @return The entry object.\n      */\n-    private Entry decodeEntry(int[] vals, int entryValues) {\n+    private Entry decodeEntry(int[] vals, int entryValues) throws SourceMapParseException {\n       Entry entry;\n       switch (entryValues) {\n         // The first values, if present are in the following order:\n@@ -363,7 +363,7 @@\n           return entry;\n \n         default:\n-          throw new IllegalStateException(\n+          throw new SourceMapParseException(\n               \"Unexpected number of values for entry:\" + entryValues);\n       }\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 366,
    "bugNodeStartChar": 12203,
    "bugNodeLength": 96,
    "fixLineNum": 366,
    "fixNodeStartChar": 12203,
    "fixNodeLength": 98,
    "sourceBeforeFix": "new IllegalStateException(\"Unexpected number of values for entry:\" + entryValues)",
    "sourceAfterFix": "new SourceMapParseException(\"Unexpected number of values for entry:\" + entryValues)"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "fixCommitSHA1": "852dd4e4d74e12c27f03f98773cd5e169bfa7952",
    "fixCommitParentSHA1": "0f7cba0aead22b064fd90aec6cb87cf8463df57a",
    "bugFilePath": "src/com/google/javascript/jscomp/testing/TypeSubject.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/testing/TypeSubject.java b/src/com/google/javascript/jscomp/testing/TypeSubject.java\nindex 2053924..359e068 100644\n--- a/src/com/google/javascript/jscomp/testing/TypeSubject.java\n+++ b/src/com/google/javascript/jscomp/testing/TypeSubject.java\n@@ -95,6 +95,6 @@\n   }\n \n   public void toStringIsEqualTo(String typeString) {\n-    assertEquals(actual().toString(), typeString);\n+    assertEquals(typeString, actual().toString());\n   }\n }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 98,
    "bugNodeStartChar": 3637,
    "bugNodeLength": 45,
    "fixLineNum": 98,
    "fixNodeStartChar": 3637,
    "fixNodeLength": 45,
    "sourceBeforeFix": "assertEquals(actual().toString(),typeString)",
    "sourceAfterFix": "assertEquals(typeString,actual().toString())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9d87dbad9f0c649c8244586cfea3ca25731da893",
    "fixCommitParentSHA1": "3fcb04ec86d4dcd02e7753f7cac8681117abb5b2",
    "bugFilePath": "src/com/google/javascript/jscomp/AbstractCompiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/AbstractCompiler.java b/src/com/google/javascript/jscomp/AbstractCompiler.java\nindex fbdc146..994bc39 100644\n--- a/src/com/google/javascript/jscomp/AbstractCompiler.java\n+++ b/src/com/google/javascript/jscomp/AbstractCompiler.java\n@@ -184,7 +184,7 @@\n   /**\n    * Report an internal error.\n    */\n-  abstract void throwInternalError(String msg, Exception cause);\n+  abstract void throwInternalError(String msg, Throwable cause);\n \n   /**\n    * Gets the current coding convention.\n@@ -590,13 +590,13 @@\n \n    /**\n     * Stores a map of default @define values.  These values\n-    * can be overriden by values specifically set in the CompilerOptions.\n+    * can be overridden by values specifically set in the CompilerOptions.\n     */\n    abstract void setDefaultDefineValues(ImmutableMap<String, Node> values);\n \n    /**\n     * Gets a map of default @define values.  These values\n-    * can be overriden by values specifically set in the CompilerOptions.\n+    * can be overridden by values specifically set in the CompilerOptions.\n     */\n    abstract ImmutableMap<String, Node> getDefaultDefineValues();\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 187,
    "bugNodeStartChar": 6136,
    "bugNodeLength": 15,
    "fixLineNum": 187,
    "fixNodeStartChar": 6136,
    "fixNodeLength": 15,
    "sourceBeforeFix": "Exception cause",
    "sourceAfterFix": "Throwable cause"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9d87dbad9f0c649c8244586cfea3ca25731da893",
    "fixCommitParentSHA1": "3fcb04ec86d4dcd02e7753f7cac8681117abb5b2",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b226f86..0db8a9a 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -2799,7 +2799,7 @@\n    * Report an internal error.\n    */\n   @Override\n-  void throwInternalError(String message, Exception cause) {\n+  void throwInternalError(String message, Throwable cause) {\n     String finalMessage = \"INTERNAL COMPILER ERROR.\\nPlease report this problem.\\n\\n\" + message;\n \n     RuntimeException e = new RuntimeException(finalMessage, cause);\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 2802,
    "bugNodeStartChar": 88895,
    "bugNodeLength": 15,
    "fixLineNum": 2802,
    "fixNodeStartChar": 88895,
    "fixNodeLength": 15,
    "sourceBeforeFix": "Exception cause",
    "sourceAfterFix": "Throwable cause"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9d87dbad9f0c649c8244586cfea3ca25731da893",
    "fixCommitParentSHA1": "3fcb04ec86d4dcd02e7753f7cac8681117abb5b2",
    "bugFilePath": "src/com/google/javascript/jscomp/NodeTraversal.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NodeTraversal.java b/src/com/google/javascript/jscomp/NodeTraversal.java\nindex 1a54086..0ac5ae8 100644\n--- a/src/com/google/javascript/jscomp/NodeTraversal.java\n+++ b/src/com/google/javascript/jscomp/NodeTraversal.java\n@@ -271,7 +271,7 @@\n     this.useBlockScope = scopeCreator.hasBlockScope();\n   }\n \n-  private void throwUnexpectedException(Exception unexpectedException) {\n+  private void throwUnexpectedException(Throwable unexpectedException) {\n     // If there's an unexpected exception, try to get the\n     // line number of the code that caused it.\n     String message = unexpectedException.getMessage();\n@@ -307,7 +307,7 @@\n       // null parent ensures that the shallow callbacks will traverse root\n       traverseBranch(root, null);\n       popScope();\n-    } catch (Exception unexpectedException) {\n+    } catch (Error | Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }\n@@ -326,7 +326,7 @@\n       traverseBranch(root, scopeRoot);\n \n       popScope();\n-    } catch (Exception unexpectedException) {\n+    } catch (Error | Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }\n@@ -362,7 +362,7 @@\n       pushScope(s);\n       traverseBranch(root, null);\n       popScope();\n-    } catch (Exception unexpectedException) {\n+    } catch (Error | Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }\n@@ -437,7 +437,7 @@\n       initScopeRoots(scopeRoot.getParent());\n       // null parent ensures that the shallow callbacks will traverse root\n       traverseBranch(scopeRoot, scopeRoot.getParent());\n-    } catch (Exception unexpectedException) {\n+    } catch (Error | Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 274,
    "bugNodeStartChar": 8813,
    "bugNodeLength": 29,
    "fixLineNum": 274,
    "fixNodeStartChar": 8813,
    "fixNodeLength": 29,
    "sourceBeforeFix": "Exception unexpectedException",
    "sourceAfterFix": "Throwable unexpectedException"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "fixCommitSHA1": "6cb2c658345aa049af9208e5b30af39a6961c1e1",
    "fixCommitParentSHA1": "a282ff7736cc2eee9c274f261e833566d5571dc4",
    "bugFilePath": "src/com/google/javascript/jscomp/IncrementalScopeCreator.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/IncrementalScopeCreator.java b/src/com/google/javascript/jscomp/IncrementalScopeCreator.java\nindex 6d0db7e..02139a2 100644\n--- a/src/com/google/javascript/jscomp/IncrementalScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/IncrementalScopeCreator.java\n@@ -240,7 +240,7 @@\n     void expandInvalidatedScript(Node script) {\n       Collection<Node> pairs = scriptDeclarationsPairs.get(script);\n       for (Node n : pairs) {\n-        if (!scriptsToUpdate.add(n)) {\n+        if (scriptsToUpdate.add(n)) {\n           expandInvalidatedScript(script);\n         }\n       }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 243,
    "bugNodeStartChar": 8332,
    "bugNodeLength": 23,
    "fixLineNum": 243,
    "fixNodeStartChar": 8332,
    "fixNodeLength": 22,
    "sourceBeforeFix": "!scriptsToUpdate.add(n)",
    "sourceAfterFix": "scriptsToUpdate.add(n)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "81f1094cc69d3c0a1a7233c5912f347e742b868d",
    "fixCommitParentSHA1": "1efb3ae305108b5eef6736808473de021d41a6eb",
    "bugFilePath": "src/com/google/javascript/jscomp/GlobalTypeInfoCollector.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/GlobalTypeInfoCollector.java b/src/com/google/javascript/jscomp/GlobalTypeInfoCollector.java\nindex 03dff5c..cead2d4 100644\n--- a/src/com/google/javascript/jscomp/GlobalTypeInfoCollector.java\n+++ b/src/com/google/javascript/jscomp/GlobalTypeInfoCollector.java\n@@ -687,7 +687,9 @@\n         }\n       }\n     } else {\n-      PropertyDef propdef = checkNotNull(getPropDefFromClass(superType, pname));\n+      PropertyDef propdef = checkNotNull(\n+          getPropDefFromClass(superType, pname),\n+          \"getPropDefFromClass(%s, %s) returned null\", superType, pname);\n       inheritedPropDefs = ImmutableSet.of(propdef);\n     }\n     if (superType.isInterface()\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 690,
    "bugNodeStartChar": 29305,
    "bugNodeLength": 51,
    "fixLineNum": 690,
    "fixNodeStartChar": 29305,
    "fixNodeLength": 135,
    "sourceBeforeFix": "checkNotNull(getPropDefFromClass(superType,pname))",
    "sourceAfterFix": "checkNotNull(getPropDefFromClass(superType,pname),\"getPropDefFromClass(%s, %s) returned null\",superType,pname)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "daef17d4bb38e7a7961121288f1ef4ae3c56ec71",
    "fixCommitParentSHA1": "084fc2712c39b75c07094f226b7ccdb07a198935",
    "bugFilePath": "src/com/google/javascript/jscomp/AstValidator.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/AstValidator.java b/src/com/google/javascript/jscomp/AstValidator.java\nindex b0272ef..6d42f08 100644\n--- a/src/com/google/javascript/jscomp/AstValidator.java\n+++ b/src/com/google/javascript/jscomp/AstValidator.java\n@@ -1052,7 +1052,7 @@\n     Node caught = n.getFirstChild();\n     if (caught.isName()) {\n       validateName(caught);\n-    } else if (n.isArrayPattern()) {\n+    } else if (caught.isArrayPattern()) {\n       validateArrayPattern(Token.CATCH, caught);\n     } else {\n       validateObjectPattern(Token.CATCH, caught);\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1055,
    "bugNodeStartChar": 28434,
    "bugNodeLength": 18,
    "fixLineNum": 1055,
    "fixNodeStartChar": 28434,
    "fixNodeLength": 23,
    "sourceBeforeFix": "n.isArrayPattern()",
    "sourceAfterFix": "caught.isArrayPattern()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "daef17d4bb38e7a7961121288f1ef4ae3c56ec71",
    "fixCommitParentSHA1": "084fc2712c39b75c07094f226b7ccdb07a198935",
    "bugFilePath": "src/com/google/javascript/jscomp/AstValidator.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/AstValidator.java b/src/com/google/javascript/jscomp/AstValidator.java\nindex b0272ef..6d42f08 100644\n--- a/src/com/google/javascript/jscomp/AstValidator.java\n+++ b/src/com/google/javascript/jscomp/AstValidator.java\n@@ -1052,7 +1052,7 @@\n     Node caught = n.getFirstChild();\n     if (caught.isName()) {\n       validateName(caught);\n-    } else if (n.isArrayPattern()) {\n+    } else if (caught.isArrayPattern()) {\n       validateArrayPattern(Token.CATCH, caught);\n     } else {\n       validateObjectPattern(Token.CATCH, caught);\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1055,
    "bugNodeStartChar": 28434,
    "bugNodeLength": 18,
    "fixLineNum": 1055,
    "fixNodeStartChar": 28434,
    "fixNodeLength": 23,
    "sourceBeforeFix": "n.isArrayPattern()",
    "sourceAfterFix": "caught.isArrayPattern()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f89b9f2a2130ce548ca7ebb20fa1311bf714aa10",
    "fixCommitParentSHA1": "541f13d1c843abe74a5f40efa6368d5d02e9c36b",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex dcbb6cb..940934b 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -383,12 +383,13 @@\n       checks.add(dartSuperAccessorsPass);\n     }\n \n-    if (options.needsTranspilationFrom(ES7)) {\n+    if (options.needsTranspilationFrom(ES8)) {\n       TranspilationPasses.addEs2017Passes(checks);\n       checks.add(setFeatureSet(ES7));\n     }\n \n-    if (options.needsTranspilationFrom(ES6) && !options.skipTranspilationAndCrash) {\n+    if ((options.needsTranspilationFrom(ES6) || options.needsTranspilationFrom(ES7))\n+        && !options.skipTranspilationAndCrash) {\n       checks.add(es6ExternsCheck);\n       TranspilationPasses.addEs6EarlyPasses(checks);\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 386,
    "bugNodeStartChar": 13687,
    "bugNodeLength": 35,
    "fixLineNum": 386,
    "fixNodeStartChar": 13687,
    "fixNodeLength": 35,
    "sourceBeforeFix": "options.needsTranspilationFrom(ES7)",
    "sourceAfterFix": "options.needsTranspilationFrom(ES8)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "99c4661a447ef55201251c67d21acfdcb100b73e",
    "fixCommitParentSHA1": "f80e687824e694c49b847270b7a02805da7df062",
    "bugFilePath": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\nindex 4022df2..5ca1f57 100644\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n@@ -1178,7 +1178,7 @@\n           compiler.stage2Passes();\n       }\n       compiler.completeCompilation();\n-    } catch (Exception e) {\n+    } catch (IOException e) {\n       compiler.report(JSError.make(COULD_NOT_DESERIALIZE_AST, filename));\n     } finally {\n       // Make sure we generate a report of errors and warnings even if the compiler throws an\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1181,
    "bugNodeStartChar": 42043,
    "bugNodeLength": 11,
    "fixLineNum": 1181,
    "fixNodeStartChar": 42043,
    "fixNodeLength": 13,
    "sourceBeforeFix": "Exception e",
    "sourceAfterFix": "IOException e"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "99c4661a447ef55201251c67d21acfdcb100b73e",
    "fixCommitParentSHA1": "f80e687824e694c49b847270b7a02805da7df062",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 84b8193..e70cd2c 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -3349,7 +3349,7 @@\n   }\n \n   @GwtIncompatible(\"ObjectInputStream\")\n-  public void restoreState(InputStream inputStream) throws Exception {\n+  public void restoreState(InputStream inputStream) throws IOException  {\n     try (final ObjectInputStream objectInputStream = new ObjectInputStream(inputStream)) {\n       CompilerState compilerState = runInCompilerThread(new Callable<CompilerState>() {\n         @Override\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 3351,
    "bugNodeStartChar": 105859,
    "bugNodeLength": 1584,
    "fixLineNum": 3351,
    "fixNodeStartChar": 105859,
    "fixNodeLength": 1587,
    "sourceBeforeFix": "@GwtIncompatible(\"ObjectInputStream\") public void restoreState(InputStream inputStream) throws Exception {   try (final ObjectInputStream objectInputStream=new ObjectInputStream(inputStream)){     CompilerState compilerState=runInCompilerThread(new Callable<CompilerState>(){       @Override public CompilerState call() throws Exception {         return (CompilerState)objectInputStream.readObject();       }     } );     externs=compilerState.externs;     inputs=compilerState.inputs;     inputsById.clear();     inputsById.putAll(compilerState.inputsById);     typeRegistry=compilerState.typeRegistry;     externAndJsRoot=compilerState.externAndJsRoot;     externsRoot=compilerState.externsRoot;     jsRoot=compilerState.jsRoot;     mostRecentTypechecker=compilerState.mostRecentTypeChecker;     synthesizedExternsInput=compilerState.synthesizedExternsInput;     synthesizedExternsInputAtEnd=compilerState.synthesizedExternsInputAtEnd;     injectedLibraries.clear();     injectedLibraries.putAll(compilerState.injectedLibraries);     lastInjectedLibrary=compilerState.lastInjectedLibrary;     globalRefMap=compilerState.globalRefMap;     symbolTable=compilerState.symbolTable;     hasRegExpGlobalReferences=compilerState.hasRegExpGlobalReferences;     typeValidator=compilerState.typeValidator;     setLifeCycleStage(compilerState.lifeCycleStage);     externProperties=compilerState.externProperties;   }    initWarningsGuard(options.getWarningsGuard());   maybeSetTracker(); } ",
    "sourceAfterFix": "@GwtIncompatible(\"ObjectInputStream\") public void restoreState(InputStream inputStream) throws IOException {   try (final ObjectInputStream objectInputStream=new ObjectInputStream(inputStream)){     CompilerState compilerState=runInCompilerThread(new Callable<CompilerState>(){       @Override public CompilerState call() throws Exception {         return (CompilerState)objectInputStream.readObject();       }     } );     externs=compilerState.externs;     inputs=compilerState.inputs;     inputsById.clear();     inputsById.putAll(compilerState.inputsById);     typeRegistry=compilerState.typeRegistry;     externAndJsRoot=compilerState.externAndJsRoot;     externsRoot=compilerState.externsRoot;     jsRoot=compilerState.jsRoot;     mostRecentTypechecker=compilerState.mostRecentTypeChecker;     synthesizedExternsInput=compilerState.synthesizedExternsInput;     synthesizedExternsInputAtEnd=compilerState.synthesizedExternsInputAtEnd;     injectedLibraries.clear();     injectedLibraries.putAll(compilerState.injectedLibraries);     lastInjectedLibrary=compilerState.lastInjectedLibrary;     globalRefMap=compilerState.globalRefMap;     symbolTable=compilerState.symbolTable;     hasRegExpGlobalReferences=compilerState.hasRegExpGlobalReferences;     typeValidator=compilerState.typeValidator;     setLifeCycleStage(compilerState.lifeCycleStage);     externProperties=compilerState.externProperties;   }    initWarningsGuard(options.getWarningsGuard());   maybeSetTracker(); } "
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "ca2867e682778681afb334782cde94bef96202c1",
    "fixCommitParentSHA1": "8abe168cfceba16d36fb111c20af1ec2206e6d90",
    "bugFilePath": "test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java b/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java\nindex 3dfb0fc..17d01ee 100644\n--- a/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java\n+++ b/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java\n@@ -62,9 +62,7 @@\n   }\n \n   public void testWarning_require() {\n-    testWarning(\"goog.require('a.c');\\ngoog.require('a.b')\", REQUIRES_NOT_SORTED,\n-        \"goog.require() statements are not sorted. The correct order is:\\n\\n\"\n-        + \"goog.require('a.b');\\ngoog.require('a.c');\\n\\n\");\n+    testWarning(\"goog.require('a.c');\\ngoog.require('a.b')\", REQUIRES_NOT_SORTED);\n \n     testWarning(\"goog.require('a.c');\\ngoog.require('a')\", REQUIRES_NOT_SORTED);\n   }\n@@ -75,17 +73,7 @@\n             \"goog.require('a.c');\",\n             \"/** @suppress {extraRequire} */\",\n             \"goog.require('a.b')\"),\n-        REQUIRES_NOT_SORTED,\n-        LINE_JOINER.join(\n-            \"goog.require() statements are not sorted. The correct order is:\",\n-            \"\",\n-            \"/**\",\n-            \" @suppress {extraRequire}\",\n-            \" */\",\n-            \"goog.require('a.b');\",\n-            \"goog.require('a.c');\",\n-            \"\",\n-            \"\"));\n+        REQUIRES_NOT_SORTED);\n   }\n \n   public void testWarning_provide() {\n@@ -157,9 +145,7 @@\n             \"var c = goog.require('a.c');\",\n             \"\",\n             \"alert(1);\"),\n-        REQUIRES_NOT_SORTED,\n-        \"goog.require() statements are not sorted. The correct order is:\\n\\n\"\n-            + \"var c = goog.require('a.c');\\nvar d = goog.require('a.b.d');\\n\\n\");\n+        REQUIRES_NOT_SORTED);\n   }\n \n   public void testGoogModule_shorthand_destructuring() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 65,
    "bugNodeStartChar": 2458,
    "bugNodeLength": 215,
    "fixLineNum": 65,
    "fixNodeStartChar": 2458,
    "fixNodeLength": 77,
    "sourceBeforeFix": "testWarning(\"goog.require('a.c');\\ngoog.require('a.b')\",REQUIRES_NOT_SORTED,\"goog.require() statements are not sorted. The correct order is:\\n\\n\" + \"goog.require('a.b');\\ngoog.require('a.c');\\n\\n\")",
    "sourceAfterFix": "testWarning(\"goog.require('a.c');\\ngoog.require('a.b')\",REQUIRES_NOT_SORTED)"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "ca2867e682778681afb334782cde94bef96202c1",
    "fixCommitParentSHA1": "8abe168cfceba16d36fb111c20af1ec2206e6d90",
    "bugFilePath": "test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java b/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java\nindex 3dfb0fc..17d01ee 100644\n--- a/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java\n+++ b/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java\n@@ -62,9 +62,7 @@\n   }\n \n   public void testWarning_require() {\n-    testWarning(\"goog.require('a.c');\\ngoog.require('a.b')\", REQUIRES_NOT_SORTED,\n-        \"goog.require() statements are not sorted. The correct order is:\\n\\n\"\n-        + \"goog.require('a.b');\\ngoog.require('a.c');\\n\\n\");\n+    testWarning(\"goog.require('a.c');\\ngoog.require('a.b')\", REQUIRES_NOT_SORTED);\n \n     testWarning(\"goog.require('a.c');\\ngoog.require('a')\", REQUIRES_NOT_SORTED);\n   }\n@@ -75,17 +73,7 @@\n             \"goog.require('a.c');\",\n             \"/** @suppress {extraRequire} */\",\n             \"goog.require('a.b')\"),\n-        REQUIRES_NOT_SORTED,\n-        LINE_JOINER.join(\n-            \"goog.require() statements are not sorted. The correct order is:\",\n-            \"\",\n-            \"/**\",\n-            \" @suppress {extraRequire}\",\n-            \" */\",\n-            \"goog.require('a.b');\",\n-            \"goog.require('a.c');\",\n-            \"\",\n-            \"\"));\n+        REQUIRES_NOT_SORTED);\n   }\n \n   public void testWarning_provide() {\n@@ -157,9 +145,7 @@\n             \"var c = goog.require('a.c');\",\n             \"\",\n             \"alert(1);\"),\n-        REQUIRES_NOT_SORTED,\n-        \"goog.require() statements are not sorted. The correct order is:\\n\\n\"\n-            + \"var c = goog.require('a.c');\\nvar d = goog.require('a.b.d');\\n\\n\");\n+        REQUIRES_NOT_SORTED);\n   }\n \n   public void testGoogModule_shorthand_destructuring() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 73,
    "bugNodeStartChar": 2813,
    "bugNodeLength": 491,
    "fixLineNum": 73,
    "fixNodeStartChar": 2813,
    "fixNodeLength": 186,
    "sourceBeforeFix": "testWarning(LINE_JOINER.join(\"goog.require('a.c');\",\"/** @suppress {extraRequire} */\",\"goog.require('a.b')\"),REQUIRES_NOT_SORTED,LINE_JOINER.join(\"goog.require() statements are not sorted. The correct order is:\",\"\",\"/**\",\" @suppress {extraRequire}\",\" */\",\"goog.require('a.b');\",\"goog.require('a.c');\",\"\",\"\"))",
    "sourceAfterFix": "testWarning(LINE_JOINER.join(\"goog.require('a.c');\",\"/** @suppress {extraRequire} */\",\"goog.require('a.b')\"),REQUIRES_NOT_SORTED)"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "ca2867e682778681afb334782cde94bef96202c1",
    "fixCommitParentSHA1": "8abe168cfceba16d36fb111c20af1ec2206e6d90",
    "bugFilePath": "test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java b/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java\nindex 3dfb0fc..17d01ee 100644\n--- a/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java\n+++ b/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java\n@@ -62,9 +62,7 @@\n   }\n \n   public void testWarning_require() {\n-    testWarning(\"goog.require('a.c');\\ngoog.require('a.b')\", REQUIRES_NOT_SORTED,\n-        \"goog.require() statements are not sorted. The correct order is:\\n\\n\"\n-        + \"goog.require('a.b');\\ngoog.require('a.c');\\n\\n\");\n+    testWarning(\"goog.require('a.c');\\ngoog.require('a.b')\", REQUIRES_NOT_SORTED);\n \n     testWarning(\"goog.require('a.c');\\ngoog.require('a')\", REQUIRES_NOT_SORTED);\n   }\n@@ -75,17 +73,7 @@\n             \"goog.require('a.c');\",\n             \"/** @suppress {extraRequire} */\",\n             \"goog.require('a.b')\"),\n-        REQUIRES_NOT_SORTED,\n-        LINE_JOINER.join(\n-            \"goog.require() statements are not sorted. The correct order is:\",\n-            \"\",\n-            \"/**\",\n-            \" @suppress {extraRequire}\",\n-            \" */\",\n-            \"goog.require('a.b');\",\n-            \"goog.require('a.c');\",\n-            \"\",\n-            \"\"));\n+        REQUIRES_NOT_SORTED);\n   }\n \n   public void testWarning_provide() {\n@@ -157,9 +145,7 @@\n             \"var c = goog.require('a.c');\",\n             \"\",\n             \"alert(1);\"),\n-        REQUIRES_NOT_SORTED,\n-        \"goog.require() statements are not sorted. The correct order is:\\n\\n\"\n-            + \"var c = goog.require('a.c');\\nvar d = goog.require('a.b.d');\\n\\n\");\n+        REQUIRES_NOT_SORTED);\n   }\n \n   public void testGoogModule_shorthand_destructuring() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 152,
    "bugNodeStartChar": 5260,
    "bugNodeLength": 408,
    "fixLineNum": 152,
    "fixNodeStartChar": 5260,
    "fixNodeLength": 248,
    "sourceBeforeFix": "testWarning(LINE_JOINER.join(\"goog.module('m');\",\"\",\"var d = goog.require('a.b.d');\",\"var c = goog.require('a.c');\",\"\",\"alert(1);\"),REQUIRES_NOT_SORTED,\"goog.require() statements are not sorted. The correct order is:\\n\\n\" + \"var c = goog.require('a.c');\\nvar d = goog.require('a.b.d');\\n\\n\")",
    "sourceAfterFix": "testWarning(LINE_JOINER.join(\"goog.module('m');\",\"\",\"var d = goog.require('a.b.d');\",\"var c = goog.require('a.c');\",\"\",\"alert(1);\"),REQUIRES_NOT_SORTED)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "87418e0a4168464983d7a6ce24ad2a4ff0bd6f77",
    "fixCommitParentSHA1": "9b8c4898d126cef24b6b1fa7623a12e4650f9e7a",
    "bugFilePath": "src/com/google/javascript/rhino/Node.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java\nindex f0a7b60..f1ac1c0 100644\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -729,7 +729,10 @@\n   }\n \n   public void addChildToBack(Node child) {\n-    checkArgument(child.parent == null);\n+    checkArgument(\n+        child.parent == null,\n+        \"Cannot add already-owned child node.\\nChild: %s\\nExisting parent: %s\\nNew parent: %s\",\n+        child, parent, this);\n     checkArgument(child.next == null);\n     checkArgument(child.previous == null);\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 732,
    "bugNodeStartChar": 25021,
    "bugNodeLength": 35,
    "fixLineNum": 732,
    "fixNodeStartChar": 25021,
    "fixNodeLength": 169,
    "sourceBeforeFix": "checkArgument(child.parent == null)",
    "sourceAfterFix": "checkArgument(child.parent == null,\"Cannot add already-owned child node.\\nChild: %s\\nExisting parent: %s\\nNew parent: %s\",child,parent,this)"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "3c7e125fc08f7d752e848dcb7e83a574ce4bd8ec",
    "fixCommitParentSHA1": "6ead83e3206d43688226fa7a6ac18ce2a271160f",
    "bugFilePath": "src/com/google/javascript/jscomp/CommandLineRunner.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex d7ecd32..bcfc68b 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -1754,7 +1754,7 @@\n     ConformanceConfig.Builder builder = ConformanceConfig.newBuilder();\n \n     // Looking for BOM.\n-    if (textProto.charAt(0) == UTF8_BOM_CODE) {\n+    if (!textProto.isEmpty() && textProto.charAt(0) == UTF8_BOM_CODE) {\n       // Stripping the BOM.\n       textProto = textProto.substring(1);\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1757,
    "bugNodeStartChar": 65407,
    "bugNodeLength": 36,
    "fixLineNum": 1757,
    "fixNodeStartChar": 65407,
    "fixNodeLength": 60,
    "sourceBeforeFix": "textProto.charAt(0) == UTF8_BOM_CODE",
    "sourceAfterFix": "!textProto.isEmpty() && textProto.charAt(0) == UTF8_BOM_CODE"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5aaaddd4f52a81353ff659cd4c41a39f0fbfd571",
    "fixCommitParentSHA1": "bf5f0e7b516d8cc786ac218c2f5dad175d5aa11b",
    "bugFilePath": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/IntegrationTestCase.java b/test/com/google/javascript/jscomp/IntegrationTestCase.java\nindex 148e08b..a83b784 100644\n--- a/test/com/google/javascript/jscomp/IntegrationTestCase.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTestCase.java\n@@ -35,8 +35,11 @@\n   protected static final Joiner LINE_JOINER = Joiner.on('\\n');\n \n   /** Externs for the test */\n-  protected static final List<SourceFile> DEFAULT_EXTERNS =\n-      ImmutableList.of(SourceFile.fromCode(\"externs\", LINE_JOINER.join(\n+  protected static final ImmutableList<SourceFile> DEFAULT_EXTERNS =\n+      ImmutableList.of(\n+          SourceFile.fromCode(\n+              \"externs\",\n+              LINE_JOINER.join(\n           \"var arguments;\",\n           \"var undefined;\",\n           \"var Math;\",\n@@ -50,7 +53,8 @@\n           \"var IteratorIterable = function() {};\",\n           \"/** @interface */\",\n           \"function IArrayLike() {};\",\n-          // TODO(sdh): See if we can remove IIterableResult and Set once polyfills are split\n+                  // TODO(sdh): See if we can remove IIterableResult and Set once polyfills are\n+                  // split\n           \"/** @interface */\",\n           \"var IIterableResult = function() {};\",\n           \"/** @constructor */\",\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 38,
    "bugNodeStartChar": 1283,
    "bugNodeLength": 16,
    "fixLineNum": 38,
    "fixNodeStartChar": 1283,
    "fixNodeLength": 25,
    "sourceBeforeFix": "List<SourceFile>",
    "sourceAfterFix": "ImmutableList<SourceFile>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5aaaddd4f52a81353ff659cd4c41a39f0fbfd571",
    "fixCommitParentSHA1": "bf5f0e7b516d8cc786ac218c2f5dad175d5aa11b",
    "bugFilePath": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\nindex 07e3ec7..e9f005b 100644\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n@@ -1330,7 +1330,7 @@\n     testSame(\"Object.defineProperties(a, {anything:1})\");\n   }\n \n-  private static final List<String> LITERAL_OPERANDS =\n+  private static final ImmutableList<String> LITERAL_OPERANDS =\n       ImmutableList.of(\n           \"null\",\n           \"undefined\",\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1333,
    "bugNodeStartChar": 40520,
    "bugNodeLength": 12,
    "fixLineNum": 1333,
    "fixNodeStartChar": 40520,
    "fixNodeLength": 21,
    "sourceBeforeFix": "List<String>",
    "sourceAfterFix": "ImmutableList<String>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0f576f5520e6615ccb61bc7310e567ac2db90991",
    "fixCommitParentSHA1": "85c5a12861766a825858998de527a54e19d96044",
    "bugFilePath": "test/com/google/javascript/jscomp/CompilerTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CompilerTest.java b/test/com/google/javascript/jscomp/CompilerTest.java\nindex 1585966..a72dff5 100644\n--- a/test/com/google/javascript/jscomp/CompilerTest.java\n+++ b/test/com/google/javascript/jscomp/CompilerTest.java\n@@ -242,8 +242,8 @@\n     return compiler;\n   }\n \n-  private static final List<SourceFile> EMPTY_EXTERNS = ImmutableList.of(\n-      SourceFile.fromCode(\"externs\", \"\"));\n+  private static final ImmutableList<SourceFile> EMPTY_EXTERNS =\n+      ImmutableList.of(SourceFile.fromCode(\"externs\", \"\"));\n \n   /**\n    * Ensure that the printInputDelimiter option adds a \"// Input #\" comment\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 245,
    "bugNodeStartChar": 9447,
    "bugNodeLength": 16,
    "fixLineNum": 245,
    "fixNodeStartChar": 9447,
    "fixNodeLength": 25,
    "sourceBeforeFix": "List<SourceFile>",
    "sourceAfterFix": "ImmutableList<SourceFile>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "425403eeed99d409a1c49ad5243a3a0bd86ed66c",
    "fixCommitParentSHA1": "08a5696023a5db3eb8652cf99366b9ab68babd3b",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultExterns.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultExterns.java b/src/com/google/javascript/jscomp/DefaultExterns.java\nindex e36ef1b..119e134 100644\n--- a/src/com/google/javascript/jscomp/DefaultExterns.java\n+++ b/src/com/google/javascript/jscomp/DefaultExterns.java\n@@ -30,14 +30,12 @@\n   private DefaultExterns() {}\n \n   // Core language externs. When the environment is CUSTOM, only these externs will be included.\n-  private static final List<String> BUILTIN_LANG_EXTERNS = ImmutableList.of(\n-      \"es3.js\",\n-      \"es5.js\",\n-      \"es6.js\",\n-      \"es6_collections.js\");\n+  private static final ImmutableList<String> BUILTIN_LANG_EXTERNS =\n+      ImmutableList.of(\"es3.js\", \"es5.js\", \"es6.js\", \"es6_collections.js\");\n \n   // Ordered browser externs. Externs not included in this list are added last.\n-  private static final List<String> BROWSER_EXTERN_DEP_ORDER = ImmutableList.of(\n+  private static final ImmutableList<String> BROWSER_EXTERN_DEP_ORDER =\n+      ImmutableList.of(\n       //-- browser externs --\n       \"intl.js\",\n       \"w3c_event.js\",\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 33,
    "bugNodeStartChar": 1146,
    "bugNodeLength": 12,
    "fixLineNum": 33,
    "fixNodeStartChar": 1146,
    "fixNodeLength": 21,
    "sourceBeforeFix": "List<String>",
    "sourceAfterFix": "ImmutableList<String>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "425403eeed99d409a1c49ad5243a3a0bd86ed66c",
    "fixCommitParentSHA1": "08a5696023a5db3eb8652cf99366b9ab68babd3b",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultExterns.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultExterns.java b/src/com/google/javascript/jscomp/DefaultExterns.java\nindex e36ef1b..119e134 100644\n--- a/src/com/google/javascript/jscomp/DefaultExterns.java\n+++ b/src/com/google/javascript/jscomp/DefaultExterns.java\n@@ -30,14 +30,12 @@\n   private DefaultExterns() {}\n \n   // Core language externs. When the environment is CUSTOM, only these externs will be included.\n-  private static final List<String> BUILTIN_LANG_EXTERNS = ImmutableList.of(\n-      \"es3.js\",\n-      \"es5.js\",\n-      \"es6.js\",\n-      \"es6_collections.js\");\n+  private static final ImmutableList<String> BUILTIN_LANG_EXTERNS =\n+      ImmutableList.of(\"es3.js\", \"es5.js\", \"es6.js\", \"es6_collections.js\");\n \n   // Ordered browser externs. Externs not included in this list are added last.\n-  private static final List<String> BROWSER_EXTERN_DEP_ORDER = ImmutableList.of(\n+  private static final ImmutableList<String> BROWSER_EXTERN_DEP_ORDER =\n+      ImmutableList.of(\n       //-- browser externs --\n       \"intl.js\",\n       \"w3c_event.js\",\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 40,
    "bugNodeStartChar": 1381,
    "bugNodeLength": 12,
    "fixLineNum": 40,
    "fixNodeStartChar": 1381,
    "fixNodeLength": 21,
    "sourceBeforeFix": "List<String>",
    "sourceAfterFix": "ImmutableList<String>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "425403eeed99d409a1c49ad5243a3a0bd86ed66c",
    "fixCommitParentSHA1": "08a5696023a5db3eb8652cf99366b9ab68babd3b",
    "bugFilePath": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/PhaseOptimizer.java b/src/com/google/javascript/jscomp/PhaseOptimizer.java\nindex 19324a7..1b6dcc7 100644\n--- a/src/com/google/javascript/jscomp/PhaseOptimizer.java\n+++ b/src/com/google/javascript/jscomp/PhaseOptimizer.java\n@@ -91,7 +91,8 @@\n   // new pass scheduler was written. If we need to revisit this order in the\n   // future, we should write new code to do it.\n   @VisibleForTesting\n-  static final List<String> OPTIMAL_ORDER = ImmutableList.of(\n+  static final ImmutableList<String> OPTIMAL_ORDER =\n+      ImmutableList.of(\n      \"inlineFunctions\",\n      \"inlineVariables\",\n      \"deadAssignmentsElimination\",\n@@ -103,7 +104,8 @@\n      \"minimizeExitPoints\",\n      \"removeUnreachableCode\");\n \n-  static final List<String> CODE_MOTION_PASSES = ImmutableList.of(\n+  static final ImmutableList<String> CODE_MOTION_PASSES =\n+      ImmutableList.of(\n       Compiler.CROSS_MODULE_CODE_MOTION_NAME, Compiler.CROSS_MODULE_METHOD_MOTION_NAME);\n \n   static final int MAX_LOOPS = 100;\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 94,
    "bugNodeStartChar": 3599,
    "bugNodeLength": 12,
    "fixLineNum": 94,
    "fixNodeStartChar": 3599,
    "fixNodeLength": 21,
    "sourceBeforeFix": "List<String>",
    "sourceAfterFix": "ImmutableList<String>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "425403eeed99d409a1c49ad5243a3a0bd86ed66c",
    "fixCommitParentSHA1": "08a5696023a5db3eb8652cf99366b9ab68babd3b",
    "bugFilePath": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/PhaseOptimizer.java b/src/com/google/javascript/jscomp/PhaseOptimizer.java\nindex 19324a7..1b6dcc7 100644\n--- a/src/com/google/javascript/jscomp/PhaseOptimizer.java\n+++ b/src/com/google/javascript/jscomp/PhaseOptimizer.java\n@@ -91,7 +91,8 @@\n   // new pass scheduler was written. If we need to revisit this order in the\n   // future, we should write new code to do it.\n   @VisibleForTesting\n-  static final List<String> OPTIMAL_ORDER = ImmutableList.of(\n+  static final ImmutableList<String> OPTIMAL_ORDER =\n+      ImmutableList.of(\n      \"inlineFunctions\",\n      \"inlineVariables\",\n      \"deadAssignmentsElimination\",\n@@ -103,7 +104,8 @@\n      \"minimizeExitPoints\",\n      \"removeUnreachableCode\");\n \n-  static final List<String> CODE_MOTION_PASSES = ImmutableList.of(\n+  static final ImmutableList<String> CODE_MOTION_PASSES =\n+      ImmutableList.of(\n       Compiler.CROSS_MODULE_CODE_MOTION_NAME, Compiler.CROSS_MODULE_METHOD_MOTION_NAME);\n \n   static final int MAX_LOOPS = 100;\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 106,
    "bugNodeStartChar": 3965,
    "bugNodeLength": 12,
    "fixLineNum": 106,
    "fixNodeStartChar": 3965,
    "fixNodeLength": 21,
    "sourceBeforeFix": "List<String>",
    "sourceAfterFix": "ImmutableList<String>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "425403eeed99d409a1c49ad5243a3a0bd86ed66c",
    "fixCommitParentSHA1": "08a5696023a5db3eb8652cf99366b9ab68babd3b",
    "bugFilePath": "test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java b/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java\nindex e044b6e..5a2419c 100644\n--- a/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java\n+++ b/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java\n@@ -96,7 +96,8 @@\n             \"JSCompiler_StaticMethods_bar(o, 2);\",\n             \"JSCompiler_StaticMethods_baz(o)\");\n \n-    static final List<String> EXPECTED_TYPE_CHECKING_OFF = ImmutableList.of(\n+    static final ImmutableList<String> EXPECTED_TYPE_CHECKING_OFF =\n+        ImmutableList.of(\n         \"FUNCTION a = null\",\n         \"NAME JSCompiler_StaticMethods_foo$self = null\",\n         \"FUNCTION JSCompiler_StaticMethods_foo = null\",\n@@ -108,7 +109,8 @@\n         \"CALL JSCompiler_StaticMethods_bar = null\",\n         \"CALL JSCompiler_StaticMethods_baz = null\");\n \n-    static final List<String> EXPECTED_TYPE_CHECKING_ON = ImmutableList.of(\n+    static final ImmutableList<String> EXPECTED_TYPE_CHECKING_ON =\n+        ImmutableList.of(\n         \"FUNCTION a = function (new:a): undefined\",\n         \"NAME JSCompiler_StaticMethods_foo$self = a\",\n         \"FUNCTION JSCompiler_StaticMethods_foo = function (a): number\",\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 99,
    "bugNodeStartChar": 3236,
    "bugNodeLength": 12,
    "fixLineNum": 99,
    "fixNodeStartChar": 3236,
    "fixNodeLength": 21,
    "sourceBeforeFix": "List<String>",
    "sourceAfterFix": "ImmutableList<String>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "425403eeed99d409a1c49ad5243a3a0bd86ed66c",
    "fixCommitParentSHA1": "08a5696023a5db3eb8652cf99366b9ab68babd3b",
    "bugFilePath": "test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java b/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java\nindex e044b6e..5a2419c 100644\n--- a/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java\n+++ b/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java\n@@ -96,7 +96,8 @@\n             \"JSCompiler_StaticMethods_bar(o, 2);\",\n             \"JSCompiler_StaticMethods_baz(o)\");\n \n-    static final List<String> EXPECTED_TYPE_CHECKING_OFF = ImmutableList.of(\n+    static final ImmutableList<String> EXPECTED_TYPE_CHECKING_OFF =\n+        ImmutableList.of(\n         \"FUNCTION a = null\",\n         \"NAME JSCompiler_StaticMethods_foo$self = null\",\n         \"FUNCTION JSCompiler_StaticMethods_foo = null\",\n@@ -108,7 +109,8 @@\n         \"CALL JSCompiler_StaticMethods_bar = null\",\n         \"CALL JSCompiler_StaticMethods_baz = null\");\n \n-    static final List<String> EXPECTED_TYPE_CHECKING_ON = ImmutableList.of(\n+    static final ImmutableList<String> EXPECTED_TYPE_CHECKING_ON =\n+        ImmutableList.of(\n         \"FUNCTION a = function (new:a): undefined\",\n         \"NAME JSCompiler_StaticMethods_foo$self = a\",\n         \"FUNCTION JSCompiler_StaticMethods_foo = function (a): number\",\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 111,
    "bugNodeStartChar": 3806,
    "bugNodeLength": 12,
    "fixLineNum": 111,
    "fixNodeStartChar": 3806,
    "fixNodeLength": 21,
    "sourceBeforeFix": "List<String>",
    "sourceAfterFix": "ImmutableList<String>"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "7ffa9eb8a9b21d708eba945be8709207503d9247",
    "fixCommitParentSHA1": "f2d66c21c7a3a6607b1b7b8de1bb89a277e9a066",
    "bugFilePath": "src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java b/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\nindex 5b5784d..56bb596 100644\n--- a/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\n+++ b/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\n@@ -94,7 +94,7 @@\n    * should not have to drop definitions itself.\n    */\n   private void dropUntypedExterns() {\n-    for (String externName : nameDefinitionMultimap.keySet()) {\n+    for (String externName : nameDefinitionMultimap.keys()) {\n       for (Definition def : new ArrayList<Definition>(nameDefinitionMultimap.get(externName))) {\n         if (def instanceof ExternalNameOnlyDefinition) {\n           Node node = def.getLValue();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 97,
    "bugNodeStartChar": 4395,
    "bugNodeLength": 31,
    "fixLineNum": 97,
    "fixNodeStartChar": 4395,
    "fixNodeLength": 29,
    "sourceBeforeFix": "nameDefinitionMultimap.keySet()",
    "sourceAfterFix": "nameDefinitionMultimap.keys()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "7ffa9eb8a9b21d708eba945be8709207503d9247",
    "fixCommitParentSHA1": "f2d66c21c7a3a6607b1b7b8de1bb89a277e9a066",
    "bugFilePath": "src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java b/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\nindex 5b5784d..56bb596 100644\n--- a/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\n+++ b/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\n@@ -94,7 +94,7 @@\n    * should not have to drop definitions itself.\n    */\n   private void dropUntypedExterns() {\n-    for (String externName : nameDefinitionMultimap.keySet()) {\n+    for (String externName : nameDefinitionMultimap.keys()) {\n       for (Definition def : new ArrayList<Definition>(nameDefinitionMultimap.get(externName))) {\n         if (def instanceof ExternalNameOnlyDefinition) {\n           Node node = def.getLValue();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 97,
    "bugNodeStartChar": 4395,
    "bugNodeLength": 31,
    "fixLineNum": 97,
    "fixNodeStartChar": 4395,
    "fixNodeLength": 29,
    "sourceBeforeFix": "nameDefinitionMultimap.keySet()",
    "sourceAfterFix": "nameDefinitionMultimap.keys()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "cb7d625f0a9ee93743e8f3afd15d466e5fc8f286",
    "fixCommitParentSHA1": "20f67d035a816f8aa6e8062a95106e33bb2ccd0d",
    "bugFilePath": "src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java b/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\nindex 56bb596..5b5784d 100644\n--- a/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\n+++ b/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\n@@ -94,7 +94,7 @@\n    * should not have to drop definitions itself.\n    */\n   private void dropUntypedExterns() {\n-    for (String externName : nameDefinitionMultimap.keys()) {\n+    for (String externName : nameDefinitionMultimap.keySet()) {\n       for (Definition def : new ArrayList<Definition>(nameDefinitionMultimap.get(externName))) {\n         if (def instanceof ExternalNameOnlyDefinition) {\n           Node node = def.getLValue();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 97,
    "bugNodeStartChar": 4395,
    "bugNodeLength": 29,
    "fixLineNum": 97,
    "fixNodeStartChar": 4395,
    "fixNodeLength": 31,
    "sourceBeforeFix": "nameDefinitionMultimap.keys()",
    "sourceAfterFix": "nameDefinitionMultimap.keySet()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "cb7d625f0a9ee93743e8f3afd15d466e5fc8f286",
    "fixCommitParentSHA1": "20f67d035a816f8aa6e8062a95106e33bb2ccd0d",
    "bugFilePath": "src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java b/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\nindex 56bb596..5b5784d 100644\n--- a/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\n+++ b/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\n@@ -94,7 +94,7 @@\n    * should not have to drop definitions itself.\n    */\n   private void dropUntypedExterns() {\n-    for (String externName : nameDefinitionMultimap.keys()) {\n+    for (String externName : nameDefinitionMultimap.keySet()) {\n       for (Definition def : new ArrayList<Definition>(nameDefinitionMultimap.get(externName))) {\n         if (def instanceof ExternalNameOnlyDefinition) {\n           Node node = def.getLValue();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 97,
    "bugNodeStartChar": 4395,
    "bugNodeLength": 29,
    "fixLineNum": 97,
    "fixNodeStartChar": 4395,
    "fixNodeLength": 31,
    "sourceBeforeFix": "nameDefinitionMultimap.keys()",
    "sourceAfterFix": "nameDefinitionMultimap.keySet()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "b7feb8ea7a9c0fd98e7594061b36d2db3823340a",
    "fixCommitParentSHA1": "9b3d740c8e578c31226955488e2d48478609c2cd",
    "bugFilePath": "src/com/google/javascript/jscomp/ClosureCheckModule.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ClosureCheckModule.java b/src/com/google/javascript/jscomp/ClosureCheckModule.java\nindex f95a0bb..a809416 100644\n--- a/src/com/google/javascript/jscomp/ClosureCheckModule.java\n+++ b/src/com/google/javascript/jscomp/ClosureCheckModule.java\n@@ -45,8 +45,9 @@\n           \"@export is not allowed here in a non-legacy goog.module.\"\n           + \" Consider using goog.exportSymbol instead.\");\n \n+  // TODO(tbreisacher): Make this an error when existing violations are fixed.\n   static final DiagnosticType GOOG_MODULE_IN_NON_MODULE =\n-      DiagnosticType.error(\n+      DiagnosticType.disabled(\n           \"JSC_GOOG_MODULE_IN_NON_MODULE\",\n           \"goog.module() call must be the first statement in a module.\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 49,
    "bugNodeStartChar": 1868,
    "bugNodeLength": 137,
    "fixLineNum": 49,
    "fixNodeStartChar": 1868,
    "fixNodeLength": 140,
    "sourceBeforeFix": "DiagnosticType.error(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")",
    "sourceAfterFix": "DiagnosticType.disabled(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b7feb8ea7a9c0fd98e7594061b36d2db3823340a",
    "fixCommitParentSHA1": "9b3d740c8e578c31226955488e2d48478609c2cd",
    "bugFilePath": "src/com/google/javascript/jscomp/ClosureCheckModule.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ClosureCheckModule.java b/src/com/google/javascript/jscomp/ClosureCheckModule.java\nindex f95a0bb..a809416 100644\n--- a/src/com/google/javascript/jscomp/ClosureCheckModule.java\n+++ b/src/com/google/javascript/jscomp/ClosureCheckModule.java\n@@ -45,8 +45,9 @@\n           \"@export is not allowed here in a non-legacy goog.module.\"\n           + \" Consider using goog.exportSymbol instead.\");\n \n+  // TODO(tbreisacher): Make this an error when existing violations are fixed.\n   static final DiagnosticType GOOG_MODULE_IN_NON_MODULE =\n-      DiagnosticType.error(\n+      DiagnosticType.disabled(\n           \"JSC_GOOG_MODULE_IN_NON_MODULE\",\n           \"goog.module() call must be the first statement in a module.\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 49,
    "bugNodeStartChar": 1868,
    "bugNodeLength": 137,
    "fixLineNum": 49,
    "fixNodeStartChar": 1868,
    "fixNodeLength": 140,
    "sourceBeforeFix": "DiagnosticType.error(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")",
    "sourceAfterFix": "DiagnosticType.disabled(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "8f7d75074fcb38c9ab2d3d9b39343c98bc27eb79",
    "fixCommitParentSHA1": "1faf832adacd24e7b394b3ecf4c6073204e1c279",
    "bugFilePath": "src/com/google/javascript/jscomp/ClosureCheckModule.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ClosureCheckModule.java b/src/com/google/javascript/jscomp/ClosureCheckModule.java\nindex a809416..f95a0bb 100644\n--- a/src/com/google/javascript/jscomp/ClosureCheckModule.java\n+++ b/src/com/google/javascript/jscomp/ClosureCheckModule.java\n@@ -45,9 +45,8 @@\n           \"@export is not allowed here in a non-legacy goog.module.\"\n           + \" Consider using goog.exportSymbol instead.\");\n \n-  // TODO(tbreisacher): Make this an error when existing violations are fixed.\n   static final DiagnosticType GOOG_MODULE_IN_NON_MODULE =\n-      DiagnosticType.disabled(\n+      DiagnosticType.error(\n           \"JSC_GOOG_MODULE_IN_NON_MODULE\",\n           \"goog.module() call must be the first statement in a module.\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 50,
    "bugNodeStartChar": 1947,
    "bugNodeLength": 140,
    "fixLineNum": 50,
    "fixNodeStartChar": 1947,
    "fixNodeLength": 137,
    "sourceBeforeFix": "DiagnosticType.disabled(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")",
    "sourceAfterFix": "DiagnosticType.error(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "8f7d75074fcb38c9ab2d3d9b39343c98bc27eb79",
    "fixCommitParentSHA1": "1faf832adacd24e7b394b3ecf4c6073204e1c279",
    "bugFilePath": "src/com/google/javascript/jscomp/ClosureCheckModule.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ClosureCheckModule.java b/src/com/google/javascript/jscomp/ClosureCheckModule.java\nindex a809416..f95a0bb 100644\n--- a/src/com/google/javascript/jscomp/ClosureCheckModule.java\n+++ b/src/com/google/javascript/jscomp/ClosureCheckModule.java\n@@ -45,9 +45,8 @@\n           \"@export is not allowed here in a non-legacy goog.module.\"\n           + \" Consider using goog.exportSymbol instead.\");\n \n-  // TODO(tbreisacher): Make this an error when existing violations are fixed.\n   static final DiagnosticType GOOG_MODULE_IN_NON_MODULE =\n-      DiagnosticType.disabled(\n+      DiagnosticType.error(\n           \"JSC_GOOG_MODULE_IN_NON_MODULE\",\n           \"goog.module() call must be the first statement in a module.\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 50,
    "bugNodeStartChar": 1947,
    "bugNodeLength": 140,
    "fixLineNum": 50,
    "fixNodeStartChar": 1947,
    "fixNodeLength": 137,
    "sourceBeforeFix": "DiagnosticType.disabled(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")",
    "sourceAfterFix": "DiagnosticType.error(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "0e5b7eee0fb534954add01460e09f1e61db831aa",
    "fixCommitParentSHA1": "844694c391061363886fc3c5a12c499e24600ea7",
    "bugFilePath": "src/com/google/javascript/jscomp/ClosureCheckModule.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ClosureCheckModule.java b/src/com/google/javascript/jscomp/ClosureCheckModule.java\nindex f95a0bb..a809416 100644\n--- a/src/com/google/javascript/jscomp/ClosureCheckModule.java\n+++ b/src/com/google/javascript/jscomp/ClosureCheckModule.java\n@@ -45,8 +45,9 @@\n           \"@export is not allowed here in a non-legacy goog.module.\"\n           + \" Consider using goog.exportSymbol instead.\");\n \n+  // TODO(tbreisacher): Make this an error when existing violations are fixed.\n   static final DiagnosticType GOOG_MODULE_IN_NON_MODULE =\n-      DiagnosticType.error(\n+      DiagnosticType.disabled(\n           \"JSC_GOOG_MODULE_IN_NON_MODULE\",\n           \"goog.module() call must be the first statement in a module.\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 49,
    "bugNodeStartChar": 1868,
    "bugNodeLength": 137,
    "fixLineNum": 49,
    "fixNodeStartChar": 1868,
    "fixNodeLength": 140,
    "sourceBeforeFix": "DiagnosticType.error(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")",
    "sourceAfterFix": "DiagnosticType.disabled(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0e5b7eee0fb534954add01460e09f1e61db831aa",
    "fixCommitParentSHA1": "844694c391061363886fc3c5a12c499e24600ea7",
    "bugFilePath": "src/com/google/javascript/jscomp/ClosureCheckModule.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ClosureCheckModule.java b/src/com/google/javascript/jscomp/ClosureCheckModule.java\nindex f95a0bb..a809416 100644\n--- a/src/com/google/javascript/jscomp/ClosureCheckModule.java\n+++ b/src/com/google/javascript/jscomp/ClosureCheckModule.java\n@@ -45,8 +45,9 @@\n           \"@export is not allowed here in a non-legacy goog.module.\"\n           + \" Consider using goog.exportSymbol instead.\");\n \n+  // TODO(tbreisacher): Make this an error when existing violations are fixed.\n   static final DiagnosticType GOOG_MODULE_IN_NON_MODULE =\n-      DiagnosticType.error(\n+      DiagnosticType.disabled(\n           \"JSC_GOOG_MODULE_IN_NON_MODULE\",\n           \"goog.module() call must be the first statement in a module.\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 49,
    "bugNodeStartChar": 1868,
    "bugNodeLength": 137,
    "fixLineNum": 49,
    "fixNodeStartChar": 1868,
    "fixNodeLength": 140,
    "sourceBeforeFix": "DiagnosticType.error(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")",
    "sourceAfterFix": "DiagnosticType.disabled(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f0ef082c1a25d4d371167c751ac5d1941f2777f8",
    "fixCommitParentSHA1": "28ae94f260d01f723b692bfbec688b542ebb49ad",
    "bugFilePath": "src/com/google/javascript/jscomp/ClosureCheckModule.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ClosureCheckModule.java b/src/com/google/javascript/jscomp/ClosureCheckModule.java\nindex a809416..f95a0bb 100644\n--- a/src/com/google/javascript/jscomp/ClosureCheckModule.java\n+++ b/src/com/google/javascript/jscomp/ClosureCheckModule.java\n@@ -45,9 +45,8 @@\n           \"@export is not allowed here in a non-legacy goog.module.\"\n           + \" Consider using goog.exportSymbol instead.\");\n \n-  // TODO(tbreisacher): Make this an error when existing violations are fixed.\n   static final DiagnosticType GOOG_MODULE_IN_NON_MODULE =\n-      DiagnosticType.disabled(\n+      DiagnosticType.error(\n           \"JSC_GOOG_MODULE_IN_NON_MODULE\",\n           \"goog.module() call must be the first statement in a module.\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 50,
    "bugNodeStartChar": 1947,
    "bugNodeLength": 140,
    "fixLineNum": 50,
    "fixNodeStartChar": 1947,
    "fixNodeLength": 137,
    "sourceBeforeFix": "DiagnosticType.disabled(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")",
    "sourceAfterFix": "DiagnosticType.error(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f0ef082c1a25d4d371167c751ac5d1941f2777f8",
    "fixCommitParentSHA1": "28ae94f260d01f723b692bfbec688b542ebb49ad",
    "bugFilePath": "src/com/google/javascript/jscomp/ClosureCheckModule.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ClosureCheckModule.java b/src/com/google/javascript/jscomp/ClosureCheckModule.java\nindex a809416..f95a0bb 100644\n--- a/src/com/google/javascript/jscomp/ClosureCheckModule.java\n+++ b/src/com/google/javascript/jscomp/ClosureCheckModule.java\n@@ -45,9 +45,8 @@\n           \"@export is not allowed here in a non-legacy goog.module.\"\n           + \" Consider using goog.exportSymbol instead.\");\n \n-  // TODO(tbreisacher): Make this an error when existing violations are fixed.\n   static final DiagnosticType GOOG_MODULE_IN_NON_MODULE =\n-      DiagnosticType.disabled(\n+      DiagnosticType.error(\n           \"JSC_GOOG_MODULE_IN_NON_MODULE\",\n           \"goog.module() call must be the first statement in a module.\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 50,
    "bugNodeStartChar": 1947,
    "bugNodeLength": 140,
    "fixLineNum": 50,
    "fixNodeStartChar": 1947,
    "fixNodeLength": 137,
    "sourceBeforeFix": "DiagnosticType.disabled(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")",
    "sourceAfterFix": "DiagnosticType.error(\"JSC_GOOG_MODULE_IN_NON_MODULE\",\"goog.module() call must be the first statement in a module.\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "5fb5f625511378f9d5547ddcc61c0c8411c333d6",
    "fixCommitParentSHA1": "afe3408469d3291516bce910738340ee6af4268d",
    "bugFilePath": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/SyntacticScopeCreator.java b/src/com/google/javascript/jscomp/SyntacticScopeCreator.java\nindex 8d6b055..59e36b5 100644\n--- a/src/com/google/javascript/jscomp/SyntacticScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/SyntacticScopeCreator.java\n@@ -116,7 +116,8 @@\n       scanVars(body);\n     } else {\n       // It's either a module or the global block\n-      Preconditions.checkState(n.isModuleBody() || scope.getParent() == null);\n+      Preconditions.checkState(n.isModuleBody() || scope.getParent() == null,\n+          \"Expected %s to be a module body, or %s to be the global scope.\", n, scope);\n       scanVars(n);\n     }\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 119,
    "bugNodeStartChar": 3947,
    "bugNodeLength": 71,
    "fixLineNum": 119,
    "fixNodeStartChar": 3947,
    "fixNodeLength": 157,
    "sourceBeforeFix": "Preconditions.checkState(n.isModuleBody() || scope.getParent() == null)",
    "sourceAfterFix": "Preconditions.checkState(n.isModuleBody() || scope.getParent() == null,\"Expected %s to be a module body, or %s to be the global scope.\",n,scope)"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "5ceeb7cd804870a241b6943b37b295f37578abde",
    "fixCommitParentSHA1": "bf146e1f1e462aa2ef5ee4c9a7711702d6b8ce9d",
    "bugFilePath": "src/com/google/javascript/jscomp/TypeTransformation.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/TypeTransformation.java b/src/com/google/javascript/jscomp/TypeTransformation.java\nindex f8a3e43..fb8028b 100644\n--- a/src/com/google/javascript/jscomp/TypeTransformation.java\n+++ b/src/com/google/javascript/jscomp/TypeTransformation.java\n@@ -69,7 +69,7 @@\n           \"Expected templatized type in {0} found {1}\");\n   static final DiagnosticType INDEX_OUTOFBOUNDS =\n       DiagnosticType.warning(\"INDEX_OUTOFBOUNDS\",\n-      \"Index out of bounds in templateTypeOf: {0} > {1}\");\n+      \"Index out of bounds in templateTypeOf: {0} >= {1}\");\n   static final DiagnosticType DUPLICATE_VARIABLE =\n       DiagnosticType.warning(\"DUPLICATE_VARIABLE\",\n           \"The variable {0} is already defined\");\n@@ -625,7 +625,7 @@\n     int index = (int) params.get(1).getDouble();\n     ImmutableList<JSType> templateTypes =\n         ((TemplatizedType) type).getTemplateTypes();\n-    if (index > templateTypes.size()) {\n+    if (index >= templateTypes.size()) {\n       reportWarning(ttlAst, INDEX_OUTOFBOUNDS,\n           Integer.toString(index), Integer.toString(templateTypes.size()));\n       return getUnknownType();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 628,
    "bugNodeStartChar": 23060,
    "bugNodeLength": 28,
    "fixLineNum": 628,
    "fixNodeStartChar": 23060,
    "fixNodeLength": 29,
    "sourceBeforeFix": "index > templateTypes.size()",
    "sourceAfterFix": "index >= templateTypes.size()"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "447d89a336e0b343fa548c6ddabcf18a6345bc53",
    "fixCommitParentSHA1": "d5f6fd873a28fdc8d63920f4170059754a3a7b95",
    "bugFilePath": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DiagnosticGroups.java b/src/com/google/javascript/jscomp/DiagnosticGroups.java\nindex 1980d7a..9941989 100644\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n@@ -543,7 +543,9 @@\n \n   public static final DiagnosticGroup FUNCTION_PARAMS =\n       DiagnosticGroups.registerGroup(\n-          \"functionParams\", FunctionTypeBuilder.OPTIONAL_ARG_AT_END);\n+          \"functionParams\",\n+          FunctionTypeBuilder.INEXISTENT_PARAM,\n+          FunctionTypeBuilder.OPTIONAL_ARG_AT_END);\n \n   public static final DiagnosticGroup DEPRECATED_ANNOTATIONS =\n       DiagnosticGroups.registerGroup(\"deprecatedAnnotations\",\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 545,
    "bugNodeStartChar": 23431,
    "bugNodeLength": 100,
    "fixLineNum": 545,
    "fixNodeStartChar": 23431,
    "fixNodeLength": 158,
    "sourceBeforeFix": "DiagnosticGroups.registerGroup(\"functionParams\",FunctionTypeBuilder.OPTIONAL_ARG_AT_END)",
    "sourceAfterFix": "DiagnosticGroups.registerGroup(\"functionParams\",FunctionTypeBuilder.INEXISTENT_PARAM,FunctionTypeBuilder.OPTIONAL_ARG_AT_END)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "202197ee128df154528c5c27077185f679f48cfb",
    "fixCommitParentSHA1": "5a052b7f81d898bc51529083d273992faa56e270",
    "bugFilePath": "src/com/google/javascript/refactoring/CodeReplacement.java",
    "fixPatch": "diff --git a/src/com/google/javascript/refactoring/CodeReplacement.java b/src/com/google/javascript/refactoring/CodeReplacement.java\nindex 6c36c5c..f5945c8 100644\n--- a/src/com/google/javascript/refactoring/CodeReplacement.java\n+++ b/src/com/google/javascript/refactoring/CodeReplacement.java\n@@ -33,9 +33,7 @@\n   // same startPosition.\n   private final String sortKey;\n \n-  // TODO(tbreisacher): Make this package-private by refactoring tests so they\n-  // don't need to call it directly.\n-  public CodeReplacement(int startPosition, int length, String newContent) {\n+  CodeReplacement(int startPosition, int length, String newContent) {\n     this(startPosition, length, newContent, \"\");\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 38,
    "bugNodeStartChar": 1214,
    "bugNodeLength": 127,
    "fixLineNum": 36,
    "fixNodeStartChar": 1098,
    "fixNodeLength": 120,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "48777e43f8abef117960cbc56a8ff1c5003556ef",
    "fixCommitParentSHA1": "eda1950bb43fdc60730b33661bc2aa8295d64577",
    "bugFilePath": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex 7d1aa63..164c83f 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -116,10 +116,9 @@\n \n   /**\n    * Map of a type to all the related errors that invalidated the type\n-   * for disambiguation. It has to be Object because of the generic nature of\n-   * this pass.\n+   * for disambiguation.\n    */\n-  private final Multimap<Object, JSError> invalidationMap;\n+  private final Multimap<JSType, JSError> invalidationMap;\n \n   /**\n    * In practice any large code base will have thousands and thousands of\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 122,
    "bugNodeStartChar": 4844,
    "bugNodeLength": 25,
    "fixLineNum": 122,
    "fixNodeStartChar": 4844,
    "fixNodeLength": 25,
    "sourceBeforeFix": "Multimap<Object,JSError>",
    "sourceAfterFix": "Multimap<JSType,JSError>"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "24d4f1a7133defb3bf9a8726cfb864004a5876ca",
    "fixCommitParentSHA1": "72cd039f4793c351866f960d5082aa40e5089a4d",
    "bugFilePath": "src/com/google/javascript/jscomp/NameAnalyzer.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex ff37887..a6863dc 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -147,7 +147,7 @@\n \n   static final DiagnosticType REPORT_PATH_IO_ERROR =\n       DiagnosticType.error(\"JSC_REPORT_PATH_IO_ERROR\",\n-          \"Error writing compiler report to {0}\");\n+          \"Error writing compiler report to {0}:\\n{1}\");\n \n   /**\n    * All the aliases in a program form a graph, where each global name is\n@@ -1132,7 +1132,7 @@\n     try {\n       Files.write(\"\", new File(reportPath), UTF_8);\n     } catch (IOException e) {\n-      compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n+      compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath, e.getMessage()));\n     }\n   }\n \n@@ -1158,7 +1158,7 @@\n       try {\n         Files.append(getHtmlReport(), new File(reportPath), UTF_8);\n       } catch (IOException e) {\n-        compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n+        compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath, e.getMessage()));\n       }\n     }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1135,
    "bugNodeStartChar": 38562,
    "bugNodeLength": 46,
    "fixLineNum": 1135,
    "fixNodeStartChar": 38562,
    "fixNodeLength": 62,
    "sourceBeforeFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath)",
    "sourceAfterFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath,e.getMessage())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "24d4f1a7133defb3bf9a8726cfb864004a5876ca",
    "fixCommitParentSHA1": "72cd039f4793c351866f960d5082aa40e5089a4d",
    "bugFilePath": "src/com/google/javascript/jscomp/NameAnalyzer.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex ff37887..a6863dc 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -147,7 +147,7 @@\n \n   static final DiagnosticType REPORT_PATH_IO_ERROR =\n       DiagnosticType.error(\"JSC_REPORT_PATH_IO_ERROR\",\n-          \"Error writing compiler report to {0}\");\n+          \"Error writing compiler report to {0}:\\n{1}\");\n \n   /**\n    * All the aliases in a program form a graph, where each global name is\n@@ -1132,7 +1132,7 @@\n     try {\n       Files.write(\"\", new File(reportPath), UTF_8);\n     } catch (IOException e) {\n-      compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n+      compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath, e.getMessage()));\n     }\n   }\n \n@@ -1158,7 +1158,7 @@\n       try {\n         Files.append(getHtmlReport(), new File(reportPath), UTF_8);\n       } catch (IOException e) {\n-        compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n+        compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath, e.getMessage()));\n       }\n     }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1161,
    "bugNodeStartChar": 39560,
    "bugNodeLength": 46,
    "fixLineNum": 1161,
    "fixNodeStartChar": 39560,
    "fixNodeLength": 62,
    "sourceBeforeFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath)",
    "sourceAfterFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath,e.getMessage())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "125e26bde0269dd286e8088a7b232e5c931664db",
    "fixCommitParentSHA1": "085928c6c642192464c00305bc1a6086b27ee619",
    "bugFilePath": "src/com/google/javascript/jscomp/Es6ConvertSuperConstructorCalls.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Es6ConvertSuperConstructorCalls.java b/src/com/google/javascript/jscomp/Es6ConvertSuperConstructorCalls.java\nindex d8aeacd..f881a25 100644\n--- a/src/com/google/javascript/jscomp/Es6ConvertSuperConstructorCalls.java\n+++ b/src/com/google/javascript/jscomp/Es6ConvertSuperConstructorCalls.java\n@@ -319,10 +319,8 @@\n             IR.assign(\n                 IR.getprop(IR.thisNode(), IR.string(\"stack\")),\n                 IR.getprop(IR.name(TMP_ERROR), IR.string(\"stack\"))));\n-    // TODO(bradfordcsmith): The spec says super() should return `this`, but Angular2 errors.ts\n-    //     currently depends on it returning the newly created Error object.\n     Node superErrorExpr =\n-        IR.comma(IR.comma(IR.comma(getTmpError, copyMessage), setStack), IR.name(TMP_ERROR))\n+        IR.comma(IR.comma(IR.comma(getTmpError, copyMessage), setStack), IR.thisNode())\n             .useSourceInfoIfMissingFromForTree(superCall);\n     superCall.replaceWith(superErrorExpr);\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 325,
    "bugNodeStartChar": 14100,
    "bugNodeLength": 18,
    "fixLineNum": 325,
    "fixNodeStartChar": 14100,
    "fixNodeLength": 13,
    "sourceBeforeFix": "IR.name(TMP_ERROR)",
    "sourceAfterFix": "IR.thisNode()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "23423085f9af64ba33a2031298f46474317cb425",
    "fixCommitParentSHA1": "daa13a46ab8f1895a92975fe1d042ef86a340a76",
    "bugFilePath": "src/com/google/javascript/jscomp/DefinitionUseSiteFinder.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefinitionUseSiteFinder.java b/src/com/google/javascript/jscomp/DefinitionUseSiteFinder.java\nindex fbadff3..6d294d8 100644\n--- a/src/com/google/javascript/jscomp/DefinitionUseSiteFinder.java\n+++ b/src/com/google/javascript/jscomp/DefinitionUseSiteFinder.java\n@@ -169,7 +169,7 @@\n         String name = getSimplifiedName(def.getLValue());\n         if (name != null) {\n           this.definitionNodeByDefinitionSite.remove(node);\n-          this.nameDefinitionMultimap.remove(name, node);\n+          this.nameDefinitionMultimap.remove(name, def);\n         }\n       }\n     } else {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 172,
    "bugNodeStartChar": 5765,
    "bugNodeLength": 46,
    "fixLineNum": 172,
    "fixNodeStartChar": 5765,
    "fixNodeLength": 45,
    "sourceBeforeFix": "this.nameDefinitionMultimap.remove(name,node)",
    "sourceAfterFix": "this.nameDefinitionMultimap.remove(name,def)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "0d55eaa6f802f96efce802c122bcbd878432f9bf",
    "fixCommitParentSHA1": "0538393c42ad4949500faf49fb603e9b6a8530d8",
    "bugFilePath": "src/com/google/javascript/refactoring/SuggestedFix.java",
    "fixPatch": "diff --git a/src/com/google/javascript/refactoring/SuggestedFix.java b/src/com/google/javascript/refactoring/SuggestedFix.java\nindex 42db7e7..5ae7f28 100644\n--- a/src/com/google/javascript/refactoring/SuggestedFix.java\n+++ b/src/com/google/javascript/refactoring/SuggestedFix.java\n@@ -574,8 +574,7 @@\n       String shortName = namespace.substring(namespace.lastIndexOf('.') + 1);\n \n       if (script.isModuleBody()) {\n-        // TODO(tbreisacher): Switch to IR.const() once ES6+ is on by default everywhere.\n-        googRequireNode = IR.var(IR.name(shortName), googRequireNode);\n+        googRequireNode = IR.constNode(IR.name(shortName), googRequireNode);\n       } else {\n         googRequireNode = IR.exprResult(googRequireNode);\n       }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 578,
    "bugNodeStartChar": 22327,
    "bugNodeLength": 43,
    "fixLineNum": 577,
    "fixNodeStartChar": 22237,
    "fixNodeLength": 49,
    "sourceBeforeFix": "IR.var(IR.name(shortName),googRequireNode)",
    "sourceAfterFix": "IR.constNode(IR.name(shortName),googRequireNode)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0d55eaa6f802f96efce802c122bcbd878432f9bf",
    "fixCommitParentSHA1": "0538393c42ad4949500faf49fb603e9b6a8530d8",
    "bugFilePath": "src/com/google/javascript/refactoring/SuggestedFix.java",
    "fixPatch": "diff --git a/src/com/google/javascript/refactoring/SuggestedFix.java b/src/com/google/javascript/refactoring/SuggestedFix.java\nindex 42db7e7..5ae7f28 100644\n--- a/src/com/google/javascript/refactoring/SuggestedFix.java\n+++ b/src/com/google/javascript/refactoring/SuggestedFix.java\n@@ -574,8 +574,7 @@\n       String shortName = namespace.substring(namespace.lastIndexOf('.') + 1);\n \n       if (script.isModuleBody()) {\n-        // TODO(tbreisacher): Switch to IR.const() once ES6+ is on by default everywhere.\n-        googRequireNode = IR.var(IR.name(shortName), googRequireNode);\n+        googRequireNode = IR.constNode(IR.name(shortName), googRequireNode);\n       } else {\n         googRequireNode = IR.exprResult(googRequireNode);\n       }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 578,
    "bugNodeStartChar": 22327,
    "bugNodeLength": 43,
    "fixLineNum": 577,
    "fixNodeStartChar": 22237,
    "fixNodeLength": 49,
    "sourceBeforeFix": "IR.var(IR.name(shortName),googRequireNode)",
    "sourceAfterFix": "IR.constNode(IR.name(shortName),googRequireNode)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "8e1fa1f0a27b51d6a9e30594095b602a7fa699cd",
    "fixCommitParentSHA1": "063f8676d99f8b4a151a2d0040573831844f526c",
    "bugFilePath": "src/com/google/javascript/jscomp/CommandLineRunner.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bb992ef..7ef7bd2 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -1165,7 +1165,7 @@\n     // Args4j has a different format that the old command-line parser.\n     // So we use some voodoo to get the args into the format that args4j\n     // expects.\n-    Pattern argPattern = Pattern.compile(\"(--?[a-zA-Z_]+)=(.*)\");\n+    Pattern argPattern = Pattern.compile(\"(--?[a-zA-Z_]+)=(.*)\", Pattern.DOTALL);\n     Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");\n     List<String> processedArgs = new ArrayList<>();\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1168,
    "bugNodeStartChar": 44803,
    "bugNodeLength": 39,
    "fixLineNum": 1168,
    "fixNodeStartChar": 44803,
    "fixNodeLength": 55,
    "sourceBeforeFix": "Pattern.compile(\"(--?[a-zA-Z_]+)=(.*)\")",
    "sourceAfterFix": "Pattern.compile(\"(--?[a-zA-Z_]+)=(.*)\",Pattern.DOTALL)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "26e87501eafea1777149e7314de4935114cdedf1",
    "fixCommitParentSHA1": "63763920c8d8733692c9166f87c0ccc6be9a843a",
    "bugFilePath": "src/com/google/javascript/jscomp/Linter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Linter.java b/src/com/google/javascript/jscomp/Linter.java\nindex b5d1da5..477bd32 100644\n--- a/src/com/google/javascript/jscomp/Linter.java\n+++ b/src/com/google/javascript/jscomp/Linter.java\n@@ -42,7 +42,7 @@\n   @Option(name = \"--fix\", usage = \"Fix lint warnings automatically\")\n   private boolean fix = false;\n \n-  @Argument private final List<String> files = new ArrayList<>();\n+  @Argument private List<String> files = new ArrayList<>();\n \n   public static void main(String[] args) throws IOException, CmdLineException {\n     new Linter().run(args);\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 45,
    "bugNodeStartChar": 1747,
    "bugNodeLength": 63,
    "fixLineNum": 45,
    "fixNodeStartChar": 1747,
    "fixNodeLength": 57,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "2"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f296eecca996e1a71884330e20388dd28ddc790b",
    "fixCommitParentSHA1": "b4023d04d75169b257362c836b8aac7d74912661",
    "bugFilePath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex 3d07b27..c1f1a1d 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -1145,7 +1145,7 @@\n    */\n   @Override\n   public ObjectType getInstanceType() {\n-    Preconditions.checkState(hasInstanceType());\n+    Preconditions.checkState(hasInstanceType(), \"Expected a constructor; got %s\", this);\n     return typeOfThis.toObjectType();\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1148,
    "bugNodeStartChar": 38087,
    "bugNodeLength": 43,
    "fixLineNum": 1148,
    "fixNodeStartChar": 38087,
    "fixNodeLength": 83,
    "sourceBeforeFix": "Preconditions.checkState(hasInstanceType())",
    "sourceAfterFix": "Preconditions.checkState(hasInstanceType(),\"Expected a constructor; got %s\",this)"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "cd0962880fd3868deffc2818d8655cfc0edacf6a",
    "fixCommitParentSHA1": "b9e28ac0243e0fa6e525a6819b70a71e1fb89b40",
    "bugFilePath": "src/com/google/javascript/jscomp/gwt/super/com/google/javascript/jscomp/Tracer.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/gwt/super/com/google/javascript/jscomp/Tracer.java b/src/com/google/javascript/jscomp/gwt/super/com/google/javascript/jscomp/Tracer.java\nindex d9e7ac4..3f8ded8 100644\n--- a/src/com/google/javascript/jscomp/gwt/super/com/google/javascript/jscomp/Tracer.java\n+++ b/src/com/google/javascript/jscomp/gwt/super/com/google/javascript/jscomp/Tracer.java\n@@ -31,7 +31,7 @@\n   static void clearCurrentThreadTrace() {}\n \n   long stop() {\n-    return System.currentTimeMillis() + start;\n+    return System.currentTimeMillis() - start;\n   }\n }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 34,
    "bugNodeStartChar": 979,
    "bugNodeLength": 34,
    "fixLineNum": 34,
    "fixNodeStartChar": 979,
    "fixNodeLength": 34,
    "sourceBeforeFix": "System.currentTimeMillis() + start",
    "sourceAfterFix": "System.currentTimeMillis() - start"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "2249344bed3ef3856ba2d8514e58f376fce8b432",
    "fixCommitParentSHA1": "36ef45a311426c9c1c2812e06831400712c63289",
    "bugFilePath": "src/com/google/javascript/jscomp/debugger/CompilationParam.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/debugger/CompilationParam.java b/src/com/google/javascript/jscomp/debugger/CompilationParam.java\nindex 851b036..0657503 100644\n--- a/src/com/google/javascript/jscomp/debugger/CompilationParam.java\n+++ b/src/com/google/javascript/jscomp/debugger/CompilationParam.java\n@@ -505,7 +505,7 @@\n   },\n \n   /** Converts quoted property accesses to dot syntax (a['b'] -> a.b) */\n-  COVERT_TO_DOTTED_PROPERTIES {\n+  CONVERT_TO_DOTTED_PROPERTIES {\n     @Override\n     void apply(CompilerOptions options, boolean value) {\n       options.setConvertToDottedProperties(value);\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 507,
    "bugNodeStartChar": 13480,
    "bugNodeLength": 340,
    "fixLineNum": 507,
    "fixNodeStartChar": 13480,
    "fixNodeLength": 341,
    "sourceBeforeFix": "/**   * Converts quoted property accesses to dot syntax (a['b'] -> a.b)   */ COVERT_TO_DOTTED_PROPERTIES{   @Override void apply(  CompilerOptions options,  boolean value){     options.setConvertToDottedProperties(value);   }   @Override String getJavaInfo(){     return \"options.setConvertToDottedProperties(true)\";   } } ",
    "sourceAfterFix": "/**   * Converts quoted property accesses to dot syntax (a['b'] -> a.b)   */ CONVERT_TO_DOTTED_PROPERTIES{   @Override void apply(  CompilerOptions options,  boolean value){     options.setConvertToDottedProperties(value);   }   @Override String getJavaInfo(){     return \"options.setConvertToDottedProperties(true)\";   } } "
  },
  {
    "bugType": "CHANGE_OPERAND",
    "fixCommitSHA1": "f05bb137d8a854b2dedebb31becdf54e61b93646",
    "fixCommitParentSHA1": "2b01aca71800bcab19b76dfe578e364eb4984c43",
    "bugFilePath": "test/com/google/javascript/jscomp/TypeICompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/TypeICompilerTestCase.java b/test/com/google/javascript/jscomp/TypeICompilerTestCase.java\nindex 5c2f51d..b8b4afa 100644\n--- a/test/com/google/javascript/jscomp/TypeICompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/TypeICompilerTestCase.java\n@@ -27,20 +27,20 @@\n public abstract class TypeICompilerTestCase extends CompilerTestCase {\n \n   protected static enum TypeInferenceMode {\n-    OtiOnly,\n-    NtiOnly,\n-    Both;\n+    OTI_ONLY,\n+    NTI_ONLY,\n+    BOTH;\n \n     boolean runsOTI() {\n-      return this == OtiOnly || this == Both;\n+      return this == OTI_ONLY || this == BOTH;\n     }\n \n     boolean runsNTI() {\n-      return this == NtiOnly || this == Both;\n+      return this == NTI_ONLY || this == BOTH;\n     }\n   }\n \n-  protected TypeInferenceMode mode = TypeInferenceMode.Both;\n+  protected TypeInferenceMode mode = TypeInferenceMode.BOTH;\n \n   public TypeICompilerTestCase() {\n     super();\n@@ -53,7 +53,7 @@\n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n-    this.mode = TypeInferenceMode.Both;\n+    this.mode = TypeInferenceMode.BOTH;\n   }\n \n   // NOTE(aravindpg): the idea with these selective overrides is that every `test` call\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 35,
    "bugNodeStartChar": 1075,
    "bugNodeLength": 15,
    "fixLineNum": 35,
    "fixNodeStartChar": 1075,
    "fixNodeLength": 16,
    "sourceBeforeFix": "this == OtiOnly",
    "sourceAfterFix": "this == OTI_ONLY"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f05bb137d8a854b2dedebb31becdf54e61b93646",
    "fixCommitParentSHA1": "2b01aca71800bcab19b76dfe578e364eb4984c43",
    "bugFilePath": "test/com/google/javascript/jscomp/TypeICompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/TypeICompilerTestCase.java b/test/com/google/javascript/jscomp/TypeICompilerTestCase.java\nindex 5c2f51d..b8b4afa 100644\n--- a/test/com/google/javascript/jscomp/TypeICompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/TypeICompilerTestCase.java\n@@ -27,20 +27,20 @@\n public abstract class TypeICompilerTestCase extends CompilerTestCase {\n \n   protected static enum TypeInferenceMode {\n-    OtiOnly,\n-    NtiOnly,\n-    Both;\n+    OTI_ONLY,\n+    NTI_ONLY,\n+    BOTH;\n \n     boolean runsOTI() {\n-      return this == OtiOnly || this == Both;\n+      return this == OTI_ONLY || this == BOTH;\n     }\n \n     boolean runsNTI() {\n-      return this == NtiOnly || this == Both;\n+      return this == NTI_ONLY || this == BOTH;\n     }\n   }\n \n-  protected TypeInferenceMode mode = TypeInferenceMode.Both;\n+  protected TypeInferenceMode mode = TypeInferenceMode.BOTH;\n \n   public TypeICompilerTestCase() {\n     super();\n@@ -53,7 +53,7 @@\n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n-    this.mode = TypeInferenceMode.Both;\n+    this.mode = TypeInferenceMode.BOTH;\n   }\n \n   // NOTE(aravindpg): the idea with these selective overrides is that every `test` call\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 35,
    "bugNodeStartChar": 1075,
    "bugNodeLength": 15,
    "fixLineNum": 35,
    "fixNodeStartChar": 1075,
    "fixNodeLength": 16,
    "sourceBeforeFix": "this == OtiOnly",
    "sourceAfterFix": "this == OTI_ONLY"
  },
  {
    "bugType": "CHANGE_OPERAND",
    "fixCommitSHA1": "f05bb137d8a854b2dedebb31becdf54e61b93646",
    "fixCommitParentSHA1": "2b01aca71800bcab19b76dfe578e364eb4984c43",
    "bugFilePath": "test/com/google/javascript/jscomp/TypeICompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/TypeICompilerTestCase.java b/test/com/google/javascript/jscomp/TypeICompilerTestCase.java\nindex 5c2f51d..b8b4afa 100644\n--- a/test/com/google/javascript/jscomp/TypeICompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/TypeICompilerTestCase.java\n@@ -27,20 +27,20 @@\n public abstract class TypeICompilerTestCase extends CompilerTestCase {\n \n   protected static enum TypeInferenceMode {\n-    OtiOnly,\n-    NtiOnly,\n-    Both;\n+    OTI_ONLY,\n+    NTI_ONLY,\n+    BOTH;\n \n     boolean runsOTI() {\n-      return this == OtiOnly || this == Both;\n+      return this == OTI_ONLY || this == BOTH;\n     }\n \n     boolean runsNTI() {\n-      return this == NtiOnly || this == Both;\n+      return this == NTI_ONLY || this == BOTH;\n     }\n   }\n \n-  protected TypeInferenceMode mode = TypeInferenceMode.Both;\n+  protected TypeInferenceMode mode = TypeInferenceMode.BOTH;\n \n   public TypeICompilerTestCase() {\n     super();\n@@ -53,7 +53,7 @@\n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n-    this.mode = TypeInferenceMode.Both;\n+    this.mode = TypeInferenceMode.BOTH;\n   }\n \n   // NOTE(aravindpg): the idea with these selective overrides is that every `test` call\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 39,
    "bugNodeStartChar": 1152,
    "bugNodeLength": 15,
    "fixLineNum": 39,
    "fixNodeStartChar": 1152,
    "fixNodeLength": 16,
    "sourceBeforeFix": "this == NtiOnly",
    "sourceAfterFix": "this == NTI_ONLY"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f05bb137d8a854b2dedebb31becdf54e61b93646",
    "fixCommitParentSHA1": "2b01aca71800bcab19b76dfe578e364eb4984c43",
    "bugFilePath": "test/com/google/javascript/jscomp/TypeICompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/TypeICompilerTestCase.java b/test/com/google/javascript/jscomp/TypeICompilerTestCase.java\nindex 5c2f51d..b8b4afa 100644\n--- a/test/com/google/javascript/jscomp/TypeICompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/TypeICompilerTestCase.java\n@@ -27,20 +27,20 @@\n public abstract class TypeICompilerTestCase extends CompilerTestCase {\n \n   protected static enum TypeInferenceMode {\n-    OtiOnly,\n-    NtiOnly,\n-    Both;\n+    OTI_ONLY,\n+    NTI_ONLY,\n+    BOTH;\n \n     boolean runsOTI() {\n-      return this == OtiOnly || this == Both;\n+      return this == OTI_ONLY || this == BOTH;\n     }\n \n     boolean runsNTI() {\n-      return this == NtiOnly || this == Both;\n+      return this == NTI_ONLY || this == BOTH;\n     }\n   }\n \n-  protected TypeInferenceMode mode = TypeInferenceMode.Both;\n+  protected TypeInferenceMode mode = TypeInferenceMode.BOTH;\n \n   public TypeICompilerTestCase() {\n     super();\n@@ -53,7 +53,7 @@\n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n-    this.mode = TypeInferenceMode.Both;\n+    this.mode = TypeInferenceMode.BOTH;\n   }\n \n   // NOTE(aravindpg): the idea with these selective overrides is that every `test` call\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 39,
    "bugNodeStartChar": 1152,
    "bugNodeLength": 15,
    "fixLineNum": 39,
    "fixNodeStartChar": 1152,
    "fixNodeLength": 16,
    "sourceBeforeFix": "this == NtiOnly",
    "sourceAfterFix": "this == NTI_ONLY"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "e3745a62b80e4b7ddfe5e10f6f01d6b2dc2b1821",
    "fixCommitParentSHA1": "90ba98422bf7bb46b9660f49baea70ae77c086d7",
    "bugFilePath": "src/com/google/javascript/jscomp/CheckJSDoc.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CheckJSDoc.java b/src/com/google/javascript/jscomp/CheckJSDoc.java\nindex 8f9d727..5b773ee 100644\n--- a/src/com/google/javascript/jscomp/CheckJSDoc.java\n+++ b/src/com/google/javascript/jscomp/CheckJSDoc.java\n@@ -173,31 +173,32 @@\n \n     if (functionNode == null) {\n       // @abstract annotation on a non-function\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"only functions or methods can be abstract\");\n       return;\n     }\n \n     if (NodeUtil.getFunctionBody(functionNode).hasChildren()) {\n       // @abstract annotation on a function with a non-empty body\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\",\n+          \"function with a non-empty body cannot be abstract\");\n       return;\n     }\n \n     if (n.isMemberFunctionDef() && \"constructor\".equals(n.getString())) {\n       // @abstract annotation on an ES6 constructor\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"constructors cannot be abstract\");\n       return;\n     }\n \n     if (!n.isMemberFunctionDef() && !NodeUtil.isPrototypeMethod(functionNode)) {\n       // @abstract annotation on a non-method (or static method) in ES5\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"only functions or methods can be abstract\");\n       return;\n     }\n \n     if (n.isStaticMember()) {\n       // @abstract annotation on a static method in ES6\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"static methods cannot be abstract\");\n       return;\n     }\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 176,
    "bugNodeStartChar": 6002,
    "bugNodeLength": 31,
    "fixLineNum": 176,
    "fixNodeStartChar": 6002,
    "fixNodeLength": 89,
    "sourceBeforeFix": "report(n,MISPLACED_ANNOTATION)",
    "sourceAfterFix": "report(n,MISPLACED_ANNOTATION,\"@abstract\",\"only functions or methods can be abstract\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "e3745a62b80e4b7ddfe5e10f6f01d6b2dc2b1821",
    "fixCommitParentSHA1": "90ba98422bf7bb46b9660f49baea70ae77c086d7",
    "bugFilePath": "src/com/google/javascript/jscomp/CheckJSDoc.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CheckJSDoc.java b/src/com/google/javascript/jscomp/CheckJSDoc.java\nindex 8f9d727..5b773ee 100644\n--- a/src/com/google/javascript/jscomp/CheckJSDoc.java\n+++ b/src/com/google/javascript/jscomp/CheckJSDoc.java\n@@ -173,31 +173,32 @@\n \n     if (functionNode == null) {\n       // @abstract annotation on a non-function\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"only functions or methods can be abstract\");\n       return;\n     }\n \n     if (NodeUtil.getFunctionBody(functionNode).hasChildren()) {\n       // @abstract annotation on a function with a non-empty body\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\",\n+          \"function with a non-empty body cannot be abstract\");\n       return;\n     }\n \n     if (n.isMemberFunctionDef() && \"constructor\".equals(n.getString())) {\n       // @abstract annotation on an ES6 constructor\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"constructors cannot be abstract\");\n       return;\n     }\n \n     if (!n.isMemberFunctionDef() && !NodeUtil.isPrototypeMethod(functionNode)) {\n       // @abstract annotation on a non-method (or static method) in ES5\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"only functions or methods can be abstract\");\n       return;\n     }\n \n     if (n.isStaticMember()) {\n       // @abstract annotation on a static method in ES6\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"static methods cannot be abstract\");\n       return;\n     }\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 182,
    "bugNodeStartChar": 6192,
    "bugNodeLength": 31,
    "fixLineNum": 182,
    "fixNodeStartChar": 6192,
    "fixNodeLength": 107,
    "sourceBeforeFix": "report(n,MISPLACED_ANNOTATION)",
    "sourceAfterFix": "report(n,MISPLACED_ANNOTATION,\"@abstract\",\"function with a non-empty body cannot be abstract\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "e3745a62b80e4b7ddfe5e10f6f01d6b2dc2b1821",
    "fixCommitParentSHA1": "90ba98422bf7bb46b9660f49baea70ae77c086d7",
    "bugFilePath": "src/com/google/javascript/jscomp/CheckJSDoc.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CheckJSDoc.java b/src/com/google/javascript/jscomp/CheckJSDoc.java\nindex 8f9d727..5b773ee 100644\n--- a/src/com/google/javascript/jscomp/CheckJSDoc.java\n+++ b/src/com/google/javascript/jscomp/CheckJSDoc.java\n@@ -173,31 +173,32 @@\n \n     if (functionNode == null) {\n       // @abstract annotation on a non-function\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"only functions or methods can be abstract\");\n       return;\n     }\n \n     if (NodeUtil.getFunctionBody(functionNode).hasChildren()) {\n       // @abstract annotation on a function with a non-empty body\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\",\n+          \"function with a non-empty body cannot be abstract\");\n       return;\n     }\n \n     if (n.isMemberFunctionDef() && \"constructor\".equals(n.getString())) {\n       // @abstract annotation on an ES6 constructor\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"constructors cannot be abstract\");\n       return;\n     }\n \n     if (!n.isMemberFunctionDef() && !NodeUtil.isPrototypeMethod(functionNode)) {\n       // @abstract annotation on a non-method (or static method) in ES5\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"only functions or methods can be abstract\");\n       return;\n     }\n \n     if (n.isStaticMember()) {\n       // @abstract annotation on a static method in ES6\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"static methods cannot be abstract\");\n       return;\n     }\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 188,
    "bugNodeStartChar": 6378,
    "bugNodeLength": 31,
    "fixLineNum": 188,
    "fixNodeStartChar": 6378,
    "fixNodeLength": 79,
    "sourceBeforeFix": "report(n,MISPLACED_ANNOTATION)",
    "sourceAfterFix": "report(n,MISPLACED_ANNOTATION,\"@abstract\",\"constructors cannot be abstract\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "e3745a62b80e4b7ddfe5e10f6f01d6b2dc2b1821",
    "fixCommitParentSHA1": "90ba98422bf7bb46b9660f49baea70ae77c086d7",
    "bugFilePath": "src/com/google/javascript/jscomp/CheckJSDoc.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CheckJSDoc.java b/src/com/google/javascript/jscomp/CheckJSDoc.java\nindex 8f9d727..5b773ee 100644\n--- a/src/com/google/javascript/jscomp/CheckJSDoc.java\n+++ b/src/com/google/javascript/jscomp/CheckJSDoc.java\n@@ -173,31 +173,32 @@\n \n     if (functionNode == null) {\n       // @abstract annotation on a non-function\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"only functions or methods can be abstract\");\n       return;\n     }\n \n     if (NodeUtil.getFunctionBody(functionNode).hasChildren()) {\n       // @abstract annotation on a function with a non-empty body\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\",\n+          \"function with a non-empty body cannot be abstract\");\n       return;\n     }\n \n     if (n.isMemberFunctionDef() && \"constructor\".equals(n.getString())) {\n       // @abstract annotation on an ES6 constructor\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"constructors cannot be abstract\");\n       return;\n     }\n \n     if (!n.isMemberFunctionDef() && !NodeUtil.isPrototypeMethod(functionNode)) {\n       // @abstract annotation on a non-method (or static method) in ES5\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"only functions or methods can be abstract\");\n       return;\n     }\n \n     if (n.isStaticMember()) {\n       // @abstract annotation on a static method in ES6\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"static methods cannot be abstract\");\n       return;\n     }\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 194,
    "bugNodeStartChar": 6591,
    "bugNodeLength": 31,
    "fixLineNum": 194,
    "fixNodeStartChar": 6591,
    "fixNodeLength": 89,
    "sourceBeforeFix": "report(n,MISPLACED_ANNOTATION)",
    "sourceAfterFix": "report(n,MISPLACED_ANNOTATION,\"@abstract\",\"only functions or methods can be abstract\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "e3745a62b80e4b7ddfe5e10f6f01d6b2dc2b1821",
    "fixCommitParentSHA1": "90ba98422bf7bb46b9660f49baea70ae77c086d7",
    "bugFilePath": "src/com/google/javascript/jscomp/CheckJSDoc.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CheckJSDoc.java b/src/com/google/javascript/jscomp/CheckJSDoc.java\nindex 8f9d727..5b773ee 100644\n--- a/src/com/google/javascript/jscomp/CheckJSDoc.java\n+++ b/src/com/google/javascript/jscomp/CheckJSDoc.java\n@@ -173,31 +173,32 @@\n \n     if (functionNode == null) {\n       // @abstract annotation on a non-function\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"only functions or methods can be abstract\");\n       return;\n     }\n \n     if (NodeUtil.getFunctionBody(functionNode).hasChildren()) {\n       // @abstract annotation on a function with a non-empty body\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\",\n+          \"function with a non-empty body cannot be abstract\");\n       return;\n     }\n \n     if (n.isMemberFunctionDef() && \"constructor\".equals(n.getString())) {\n       // @abstract annotation on an ES6 constructor\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"constructors cannot be abstract\");\n       return;\n     }\n \n     if (!n.isMemberFunctionDef() && !NodeUtil.isPrototypeMethod(functionNode)) {\n       // @abstract annotation on a non-method (or static method) in ES5\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"only functions or methods can be abstract\");\n       return;\n     }\n \n     if (n.isStaticMember()) {\n       // @abstract annotation on a static method in ES6\n-      report(n, MISPLACED_ANNOTATION);\n+      report(n, MISPLACED_ANNOTATION, \"@abstract\", \"static methods cannot be abstract\");\n       return;\n     }\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 200,
    "bugNodeStartChar": 6737,
    "bugNodeLength": 31,
    "fixLineNum": 200,
    "fixNodeStartChar": 6737,
    "fixNodeLength": 81,
    "sourceBeforeFix": "report(n,MISPLACED_ANNOTATION)",
    "sourceAfterFix": "report(n,MISPLACED_ANNOTATION,\"@abstract\",\"static methods cannot be abstract\")"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "fixCommitSHA1": "e90c2eeedb70da6a3ca0d27a048b4752a5dc16e1",
    "fixCommitParentSHA1": "34a7653f02d893b496ec1ec34f6b599b5c1e5f6d",
    "bugFilePath": "src/com/google/javascript/refactoring/ErrorToFixMapper.java",
    "fixPatch": "diff --git a/src/com/google/javascript/refactoring/ErrorToFixMapper.java b/src/com/google/javascript/refactoring/ErrorToFixMapper.java\nindex b8e572c..b7c7500 100644\n--- a/src/com/google/javascript/refactoring/ErrorToFixMapper.java\n+++ b/src/com/google/javascript/refactoring/ErrorToFixMapper.java\n@@ -102,7 +102,7 @@\n         .insertBefore(error.node, \"!\")\n         .setDescription(\"Make type non-nullable\")\n         .build();\n-    return ImmutableList.of(qmark, bang);\n+    return ImmutableList.of(bang, qmark);\n   }\n \n   private static SuggestedFix removeNode(JSError error) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 105,
    "bugNodeStartChar": 4138,
    "bugNodeLength": 29,
    "fixLineNum": 105,
    "fixNodeStartChar": 4138,
    "fixNodeLength": 29,
    "sourceBeforeFix": "ImmutableList.of(qmark,bang)",
    "sourceAfterFix": "ImmutableList.of(bang,qmark)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "0b9749aa429c009e6e392e2e526cb382fbee18df",
    "fixCommitParentSHA1": "690601ae1e82eede51760d5b7aaf303e77caffd2",
    "bugFilePath": "src/com/google/javascript/jscomp/ConstCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ConstCheck.java b/src/com/google/javascript/jscomp/ConstCheck.java\nindex 7723b99..100cdf5 100644\n--- a/src/com/google/javascript/jscomp/ConstCheck.java\n+++ b/src/com/google/javascript/jscomp/ConstCheck.java\n@@ -36,7 +36,7 @@\n     implements CompilerPass {\n \n   static final DiagnosticType CONST_REASSIGNED_VALUE_ERROR =\n-      DiagnosticType.error(\n+      DiagnosticType.warning(\n           \"JSC_CONSTANT_REASSIGNED_VALUE_ERROR\",\n           \"constant {0} assigned a value more than once.\\n\" +\n           \"Original definition at {1}\");\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 39,
    "bugNodeStartChar": 1241,
    "bugNodeLength": 172,
    "fixLineNum": 39,
    "fixNodeStartChar": 1241,
    "fixNodeLength": 174,
    "sourceBeforeFix": "DiagnosticType.error(\"JSC_CONSTANT_REASSIGNED_VALUE_ERROR\",\"constant {0} assigned a value more than once.\\n\" + \"Original definition at {1}\")",
    "sourceAfterFix": "DiagnosticType.warning(\"JSC_CONSTANT_REASSIGNED_VALUE_ERROR\",\"constant {0} assigned a value more than once.\\n\" + \"Original definition at {1}\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0b9749aa429c009e6e392e2e526cb382fbee18df",
    "fixCommitParentSHA1": "690601ae1e82eede51760d5b7aaf303e77caffd2",
    "bugFilePath": "src/com/google/javascript/jscomp/ConstCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ConstCheck.java b/src/com/google/javascript/jscomp/ConstCheck.java\nindex 7723b99..100cdf5 100644\n--- a/src/com/google/javascript/jscomp/ConstCheck.java\n+++ b/src/com/google/javascript/jscomp/ConstCheck.java\n@@ -36,7 +36,7 @@\n     implements CompilerPass {\n \n   static final DiagnosticType CONST_REASSIGNED_VALUE_ERROR =\n-      DiagnosticType.error(\n+      DiagnosticType.warning(\n           \"JSC_CONSTANT_REASSIGNED_VALUE_ERROR\",\n           \"constant {0} assigned a value more than once.\\n\" +\n           \"Original definition at {1}\");\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 39,
    "bugNodeStartChar": 1241,
    "bugNodeLength": 172,
    "fixLineNum": 39,
    "fixNodeStartChar": 1241,
    "fixNodeLength": 174,
    "sourceBeforeFix": "DiagnosticType.error(\"JSC_CONSTANT_REASSIGNED_VALUE_ERROR\",\"constant {0} assigned a value more than once.\\n\" + \"Original definition at {1}\")",
    "sourceAfterFix": "DiagnosticType.warning(\"JSC_CONSTANT_REASSIGNED_VALUE_ERROR\",\"constant {0} assigned a value more than once.\\n\" + \"Original definition at {1}\")"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "fixCommitSHA1": "0b9749aa429c009e6e392e2e526cb382fbee18df",
    "fixCommitParentSHA1": "690601ae1e82eede51760d5b7aaf303e77caffd2",
    "bugFilePath": "test/com/google/javascript/jscomp/ConstCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/ConstCheckTest.java b/test/com/google/javascript/jscomp/ConstCheckTest.java\nindex 3b061c5..1b7acf6 100644\n--- a/test/com/google/javascript/jscomp/ConstCheckTest.java\n+++ b/test/com/google/javascript/jscomp/ConstCheckTest.java\n@@ -186,10 +186,10 @@\n   public void testConstNameInExterns() {\n     String externs = \"/** @const */ var FOO;\";\n     String js = \"FOO = 1;\";\n-    test(externs, js, (String) null, ConstCheck.CONST_REASSIGNED_VALUE_ERROR, null);\n+    test(externs, js, (String) null, null, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n \n   private void testError(String js) {\n-    testError(js, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n+    testWarning(js, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 189,
    "bugNodeStartChar": 5331,
    "bugNodeLength": 79,
    "fixLineNum": 189,
    "fixNodeStartChar": 5331,
    "fixNodeLength": 79,
    "sourceBeforeFix": "test(externs,js,(String)null,ConstCheck.CONST_REASSIGNED_VALUE_ERROR,null)",
    "sourceAfterFix": "test(externs,js,(String)null,null,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "0b9749aa429c009e6e392e2e526cb382fbee18df",
    "fixCommitParentSHA1": "690601ae1e82eede51760d5b7aaf303e77caffd2",
    "bugFilePath": "test/com/google/javascript/jscomp/ConstCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/ConstCheckTest.java b/test/com/google/javascript/jscomp/ConstCheckTest.java\nindex 3b061c5..1b7acf6 100644\n--- a/test/com/google/javascript/jscomp/ConstCheckTest.java\n+++ b/test/com/google/javascript/jscomp/ConstCheckTest.java\n@@ -186,10 +186,10 @@\n   public void testConstNameInExterns() {\n     String externs = \"/** @const */ var FOO;\";\n     String js = \"FOO = 1;\";\n-    test(externs, js, (String) null, ConstCheck.CONST_REASSIGNED_VALUE_ERROR, null);\n+    test(externs, js, (String) null, null, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n \n   private void testError(String js) {\n-    testError(js, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n+    testWarning(js, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 193,
    "bugNodeStartChar": 5459,
    "bugNodeLength": 54,
    "fixLineNum": 193,
    "fixNodeStartChar": 5459,
    "fixNodeLength": 56,
    "sourceBeforeFix": "testError(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)",
    "sourceAfterFix": "testWarning(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0b9749aa429c009e6e392e2e526cb382fbee18df",
    "fixCommitParentSHA1": "690601ae1e82eede51760d5b7aaf303e77caffd2",
    "bugFilePath": "test/com/google/javascript/jscomp/ConstCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/ConstCheckTest.java b/test/com/google/javascript/jscomp/ConstCheckTest.java\nindex 3b061c5..1b7acf6 100644\n--- a/test/com/google/javascript/jscomp/ConstCheckTest.java\n+++ b/test/com/google/javascript/jscomp/ConstCheckTest.java\n@@ -186,10 +186,10 @@\n   public void testConstNameInExterns() {\n     String externs = \"/** @const */ var FOO;\";\n     String js = \"FOO = 1;\";\n-    test(externs, js, (String) null, ConstCheck.CONST_REASSIGNED_VALUE_ERROR, null);\n+    test(externs, js, (String) null, null, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n \n   private void testError(String js) {\n-    testError(js, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n+    testWarning(js, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 193,
    "bugNodeStartChar": 5459,
    "bugNodeLength": 54,
    "fixLineNum": 193,
    "fixNodeStartChar": 5459,
    "fixNodeLength": 56,
    "sourceBeforeFix": "testError(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)",
    "sourceAfterFix": "testWarning(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "7e69b806137604da52bdded56b711041943a3893",
    "fixCommitParentSHA1": "15a97147692f5c597892ee2092c54b39318257e0",
    "bugFilePath": "src/com/google/javascript/jscomp/NewTypeInference.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NewTypeInference.java b/src/com/google/javascript/jscomp/NewTypeInference.java\nindex eb30eff..46709e5 100644\n--- a/src/com/google/javascript/jscomp/NewTypeInference.java\n+++ b/src/com/google/javascript/jscomp/NewTypeInference.java\n@@ -123,8 +123,10 @@\n   static final DiagnosticType NOT_UNIQUE_INSTANTIATION =\n       DiagnosticType.warning(\n           \"JSC_NTI_NOT_UNIQUE_INSTANTIATION\",\n-          \"Illegal instantiation in function type {0} for the type variable \"\n-          + \"{1}.\\n You can only specify one type. Found {2}.\");\n+          \"When instantiating a polymorphic function,\"\n+          + \" you can only specify one type for each type variable.\\n\"\n+          + \" Found {0} types for type variable {1}: {2},\\n\"\n+          + \" when instantiating type: {3}\");\n \n   static final DiagnosticType FAILED_TO_UNIFY =\n       DiagnosticType.warning(\n@@ -2268,9 +2270,11 @@\n       if (types.size() > 1) {\n         if (isFwd) {\n           warnings.add(JSError.make(\n-              callNode, NOT_UNIQUE_INSTANTIATION, funType.toString(),\n+              callNode, NOT_UNIQUE_INSTANTIATION,\n+              Integer.toString(types.size()),\n               UniqueNameGenerator.getOriginalName(typeParam),\n-              types.toString()));\n+              types.toString(),\n+              funType.toString()));\n         }\n         builder.put(typeParam, JSType.UNKNOWN);\n       } else if (types.size() == 1) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 2271,
    "bugNodeStartChar": 89046,
    "bugNodeLength": 18,
    "fixLineNum": 2272,
    "fixNodeStartChar": 89060,
    "fixNodeLength": 30,
    "sourceBeforeFix": "funType.toString()",
    "sourceAfterFix": "Integer.toString(types.size())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "7e69b806137604da52bdded56b711041943a3893",
    "fixCommitParentSHA1": "15a97147692f5c597892ee2092c54b39318257e0",
    "bugFilePath": "src/com/google/javascript/jscomp/NewTypeInference.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NewTypeInference.java b/src/com/google/javascript/jscomp/NewTypeInference.java\nindex eb30eff..46709e5 100644\n--- a/src/com/google/javascript/jscomp/NewTypeInference.java\n+++ b/src/com/google/javascript/jscomp/NewTypeInference.java\n@@ -123,8 +123,10 @@\n   static final DiagnosticType NOT_UNIQUE_INSTANTIATION =\n       DiagnosticType.warning(\n           \"JSC_NTI_NOT_UNIQUE_INSTANTIATION\",\n-          \"Illegal instantiation in function type {0} for the type variable \"\n-          + \"{1}.\\n You can only specify one type. Found {2}.\");\n+          \"When instantiating a polymorphic function,\"\n+          + \" you can only specify one type for each type variable.\\n\"\n+          + \" Found {0} types for type variable {1}: {2},\\n\"\n+          + \" when instantiating type: {3}\");\n \n   static final DiagnosticType FAILED_TO_UNIFY =\n       DiagnosticType.warning(\n@@ -2268,9 +2270,11 @@\n       if (types.size() > 1) {\n         if (isFwd) {\n           warnings.add(JSError.make(\n-              callNode, NOT_UNIQUE_INSTANTIATION, funType.toString(),\n+              callNode, NOT_UNIQUE_INSTANTIATION,\n+              Integer.toString(types.size()),\n               UniqueNameGenerator.getOriginalName(typeParam),\n-              types.toString()));\n+              types.toString(),\n+              funType.toString()));\n         }\n         builder.put(typeParam, JSType.UNKNOWN);\n       } else if (types.size() == 1) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 2270,
    "bugNodeStartChar": 88982,
    "bugNodeLength": 177,
    "fixLineNum": 2270,
    "fixNodeStartChar": 88982,
    "fixNodeLength": 211,
    "sourceBeforeFix": "JSError.make(callNode,NOT_UNIQUE_INSTANTIATION,funType.toString(),UniqueNameGenerator.getOriginalName(typeParam),types.toString())",
    "sourceAfterFix": "JSError.make(callNode,NOT_UNIQUE_INSTANTIATION,funType.toString(),UniqueNameGenerator.getOriginalName(typeParam),types.toString(),funType.toString())"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "cd5712ff72e76f0eebf55d35c941c7b92c1558a9",
    "fixCommitParentSHA1": "2112af59b62c58f7f2a81f829d7f56d7744e0f18",
    "bugFilePath": "src/com/google/javascript/jscomp/StatementFusion.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/StatementFusion.java b/src/com/google/javascript/jscomp/StatementFusion.java\nindex 00410d8..4f403f2 100644\n--- a/src/com/google/javascript/jscomp/StatementFusion.java\n+++ b/src/com/google/javascript/jscomp/StatementFusion.java\n@@ -197,14 +197,14 @@\n       case Token.SWITCH:\n       case Token.EXPR_RESULT:\n         before.getParent().removeChild(before);\n-        fuseExpresssonIntoFirstChild(before.removeFirstChild(), control);\n+        fuseExpressionIntoFirstChild(before.removeFirstChild(), control);\n         return;\n       case Token.FOR:\n         before.getParent().removeChild(before);\n         if (NodeUtil.isForIn(control)) {\n-          fuseExpresssonIntoSecondChild(before.removeFirstChild(), control);\n+          fuseExpressionIntoSecondChild(before.removeFirstChild(), control);\n         } else {\n-          fuseExpresssonIntoFirstChild(before.removeFirstChild(), control);\n+          fuseExpressionIntoFirstChild(before.removeFirstChild(), control);\n         }\n         return;\n       case Token.LABEL:\n@@ -219,7 +219,7 @@\n   }\n \n   // exp1, exp1\n-  protected static Node fuseExpressionIntoExpression(Node exp1, Node exp2) {\n+  static Node fuseExpressionIntoExpression(Node exp1, Node exp2) {\n     if (exp2.isEmpty()) {\n       return exp1;\n     }\n@@ -244,13 +244,13 @@\n     }\n   }\n \n-  protected static void fuseExpresssonIntoFirstChild(Node exp, Node stmt) {\n+  protected static void fuseExpressionIntoFirstChild(Node exp, Node stmt) {\n     Node val = stmt.removeFirstChild();\n     Node comma = fuseExpressionIntoExpression(exp, val);\n     stmt.addChildToFront(comma);\n   }\n \n-  protected static void fuseExpresssonIntoSecondChild(Node exp, Node stmt) {\n+  protected static void fuseExpressionIntoSecondChild(Node exp, Node stmt) {\n     Node val = stmt.removeChildAfter(stmt.getFirstChild());\n     Node comma = fuseExpressionIntoExpression(exp, val);\n     stmt.addChildAfter(comma, stmt.getFirstChild());\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 222,
    "bugNodeStartChar": 7252,
    "bugNodeLength": 789,
    "fixLineNum": 222,
    "fixNodeStartChar": 7252,
    "fixNodeLength": 779,
    "sourceBeforeFix": "12",
    "sourceAfterFix": "8"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "63e334f565d9d776180af5e7725c7b87bfcd10a9",
    "fixCommitParentSHA1": "698471523bee8e78a1257941b44c36849c2c9d22",
    "bugFilePath": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DiagnosticGroups.java b/src/com/google/javascript/jscomp/DiagnosticGroups.java\nindex 73d90c5..5b639e7 100644\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n@@ -47,7 +47,7 @@\n       DiagnosticType.warning(\"JSC_UNUSED\", \"{0}\");\n \n   public static final Set<String> wildcardExcludedGroups =\n-      ImmutableSet.of(\"reportUnknownTypes\");\n+      ImmutableSet.of(\"reportUnknownTypes\", \"analyzerChecks\");\n \n   public DiagnosticGroups() {}\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 50,
    "bugNodeStartChar": 2028,
    "bugNodeLength": 37,
    "fixLineNum": 50,
    "fixNodeStartChar": 2028,
    "fixNodeLength": 55,
    "sourceBeforeFix": "ImmutableSet.of(\"reportUnknownTypes\")",
    "sourceAfterFix": "ImmutableSet.of(\"reportUnknownTypes\",\"analyzerChecks\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "713759b4f55e6bdccb6cd43ea0ad3e202c3440b2",
    "fixCommitParentSHA1": "752e609c559737de58c32b34fdd03df83b3f4e7a",
    "bugFilePath": "src/com/google/javascript/jscomp/ClosureCheckModule.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ClosureCheckModule.java b/src/com/google/javascript/jscomp/ClosureCheckModule.java\nindex 4510136..b3238e9 100644\n--- a/src/com/google/javascript/jscomp/ClosureCheckModule.java\n+++ b/src/com/google/javascript/jscomp/ClosureCheckModule.java\n@@ -66,7 +66,7 @@\n   static final DiagnosticType REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME =\n       DiagnosticType.disabled(\n           \"JSC_REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME\",\n-          \"Reference fully qualified import name ''{0}''. Please use the short name instead.\");\n+          \"Reference to fully qualified import name ''{0}''. Please use the short name instead.\");\n \n   static final DiagnosticType REQUIRE_NOT_AT_TOP_LEVEL =\n       DiagnosticType.error(\n@@ -139,7 +139,7 @@\n         if (currentModuleName != null && n.matchesQualifiedName(currentModuleName)) {\n           t.report(n, REFERENCE_TO_MODULE_GLOBAL_NAME);\n         } else if (shortRequiredNamespaces.contains(n.getQualifiedName())) {\n-          t.report(n, REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME);\n+          t.report(n, REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME, n.getQualifiedName());\n         }\n         break;\n       case Token.SCRIPT:\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 142,
    "bugNodeStartChar": 5195,
    "bugNodeLength": 51,
    "fixLineNum": 142,
    "fixNodeStartChar": 5195,
    "fixNodeLength": 73,
    "sourceBeforeFix": "t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME)",
    "sourceAfterFix": "t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME,n.getQualifiedName())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "8b818e85bd284561e9541a12aa6e004847f59811",
    "fixCommitParentSHA1": "8a468ed4abb4ececc5f24928aac2f8c354fea54e",
    "bugFilePath": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex bd6bf7f..2439cc2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -54,7 +54,7 @@\n   static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS =\n       DiagnosticType.warning(\n           \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n-          \"Shift amount out of bounds: {0}\");\n+          \"Shift amount out of bounds (see right operand): {0}\");\n \n   static final DiagnosticType FRACTIONAL_BITWISE_OPERAND =\n       DiagnosticType.warning(\n@@ -879,7 +879,7 @@\n       // only the lower 5 bits are used when shifting, so don't do anything\n       // if the shift amount is outside [0,32)\n       if (!(rval >= 0 && rval < 32)) {\n-        report(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n+        report(SHIFT_AMOUNT_OUT_OF_BOUNDS, n);\n         return n;\n       }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 882,
    "bugNodeStartChar": 25959,
    "bugNodeLength": 41,
    "fixLineNum": 882,
    "fixNodeStartChar": 25959,
    "fixNodeLength": 37,
    "sourceBeforeFix": "report(SHIFT_AMOUNT_OUT_OF_BOUNDS,right)",
    "sourceAfterFix": "report(SHIFT_AMOUNT_OUT_OF_BOUNDS,n)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
    "fixPatch": "diff --git a/src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java b/src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java\nindex cb4d2ad..06041ce 100644\n--- a/src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java\n@@ -478,7 +478,7 @@\n     addNameMap(out, originalNameMap);\n   }\n \n-  private void addNameMap(Appendable out, Map<String, Integer> map)\n+  private static void addNameMap(Appendable out, Map<String, Integer> map)\n       throws IOException {\n     int i = 0;\n     for (Entry<String, Integer> entry : map.entrySet()) {\n@@ -801,7 +801,7 @@\n     out.append(\"\\n}\\n\");\n   }\n \n-  private CharSequence offsetValue(int line, int column) throws IOException {\n+  private static CharSequence offsetValue(int line, int column) throws IOException {\n     StringBuilder out = new StringBuilder();\n     out.append(\"{\\n\");\n     appendFirstField(out, \"line\", String.valueOf(line));\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 481,
    "bugNodeStartChar": 15479,
    "bugNodeLength": 311,
    "fixLineNum": 481,
    "fixNodeStartChar": 15479,
    "fixNodeLength": 318,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
    "fixPatch": "diff --git a/src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java b/src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java\nindex cb4d2ad..06041ce 100644\n--- a/src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java\n@@ -478,7 +478,7 @@\n     addNameMap(out, originalNameMap);\n   }\n \n-  private void addNameMap(Appendable out, Map<String, Integer> map)\n+  private static void addNameMap(Appendable out, Map<String, Integer> map)\n       throws IOException {\n     int i = 0;\n     for (Entry<String, Integer> entry : map.entrySet()) {\n@@ -801,7 +801,7 @@\n     out.append(\"\\n}\\n\");\n   }\n \n-  private CharSequence offsetValue(int line, int column) throws IOException {\n+  private static CharSequence offsetValue(int line, int column) throws IOException {\n     StringBuilder out = new StringBuilder();\n     out.append(\"{\\n\");\n     appendFirstField(out, \"line\", String.valueOf(line));\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 804,
    "bugNodeStartChar": 25084,
    "bugNodeLength": 299,
    "fixLineNum": 804,
    "fixNodeStartChar": 25084,
    "fixNodeLength": 306,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 4373b53..0886fd8 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -553,7 +553,7 @@\n    * base path is interpreted as a filename rather than a directory. E.g.:\n    *   getRelativeTo(\"../foo/bar.js\", \"baz/bam/qux.js\") --> \"baz/foo/bar.js\"\n    */\n-  private String getRelativeTo(String relative, String base) {\n+  private static String getRelativeTo(String relative, String base) {\n     return FileSystems.getDefault().getPath(base)\n         .resolveSibling(relative)\n         .normalize()\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 551,
    "bugNodeStartChar": 19015,
    "bugNodeLength": 470,
    "fixLineNum": 551,
    "fixNodeStartChar": 19015,
    "fixNodeLength": 477,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex cf44343..1f6315b 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -128,7 +128,7 @@\n     return b.toString();\n   }\n \n-  private String formatPosition(String sourceName, int lineNumber) {\n+  private static String formatPosition(String sourceName, int lineNumber) {\n     StringBuilder b = new StringBuilder();\n     if (sourceName != null) {\n       b.append(sourceName);\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 131,
    "bugNodeStartChar": 4206,
    "bugNodeLength": 313,
    "fixLineNum": 131,
    "fixNodeStartChar": 4206,
    "fixNodeLength": 320,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/RhinoErrorReporter.java b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\nindex 978c547..6aa99ac 100644\n--- a/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n@@ -109,7 +109,7 @@\n    * holder {0} with a wild card that matches all possible strings.\n    * Also put the any non-place-holder in quotes for regex matching later.\n    */\n-  private Pattern replacePlaceHolders(String s) {\n+  private static Pattern replacePlaceHolders(String s) {\n     s = Pattern.quote(s);\n     return Pattern.compile(s.replaceAll(\"\\\\{\\\\d+\\\\}\", \"\\\\\\\\E.*\\\\\\\\Q\"));\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 107,
    "bugNodeStartChar": 4266,
    "bugNodeLength": 377,
    "fixLineNum": 107,
    "fixNodeStartChar": 4266,
    "fixNodeLength": 384,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 076d740..4a0dc69 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1498,7 +1498,7 @@\n     }\n   }\n \n-  private SuggestionPair getClosestPropertySuggestion(\n+  private static SuggestionPair getClosestPropertySuggestion(\n       JSType objectType, String propName) {\n     return null;\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1501,
    "bugNodeStartChar": 53676,
    "bugNodeLength": 117,
    "fixLineNum": 1501,
    "fixNodeStartChar": 53676,
    "fixNodeLength": 124,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "src/com/google/javascript/jscomp/ant/CompileTask.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ant/CompileTask.java b/src/com/google/javascript/jscomp/ant/CompileTask.java\nindex e6c737b..dc58ffa 100644\n--- a/src/com/google/javascript/jscomp/ant/CompileTask.java\n+++ b/src/com/google/javascript/jscomp/ant/CompileTask.java\n@@ -750,7 +750,7 @@\n   /**\n    * Returns the last modified timestamp of the given File.\n    */\n-  private long getLastModifiedTime(File file) {\n+  private static long getLastModifiedTime(File file) {\n     long fileLastModified = file.lastModified();\n     // If the file is absent, we don't know if it changed (maybe was deleted),\n     // so assume it has just changed.\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 750,
    "bugNodeStartChar": 23146,
    "bugNodeLength": 402,
    "fixLineNum": 750,
    "fixNodeStartChar": 23146,
    "fixNodeLength": 409,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "src/com/google/javascript/jscomp/parsing/parser/Scanner.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/parsing/parser/Scanner.java b/src/com/google/javascript/jscomp/parsing/parser/Scanner.java\nindex b7501eb..bd68b85 100644\n--- a/src/com/google/javascript/jscomp/parsing/parser/Scanner.java\n+++ b/src/com/google/javascript/jscomp/parsing/parser/Scanner.java\n@@ -210,11 +210,11 @@\n     return true;\n   }\n \n-  private boolean isRegularExpressionFirstChar(char ch) {\n+  private static boolean isRegularExpressionFirstChar(char ch) {\n     return isRegularExpressionChar(ch) && ch != '*';\n   }\n \n-  private boolean isRegularExpressionChar(char ch) {\n+  private static boolean isRegularExpressionChar(char ch) {\n     switch (ch) {\n     case '/':\n       return false;\n@@ -741,7 +741,7 @@\n     return value;\n   }\n \n-  private boolean isIdentifierStart(char ch) {\n+  private static boolean isIdentifierStart(char ch) {\n     switch (ch) {\n     case '$':\n     case '_':\n@@ -752,7 +752,7 @@\n     }\n   }\n \n-  private boolean isIdentifierPart(char ch) {\n+  private static boolean isIdentifierPart(char ch) {\n     // TODO: identifier part character classes\n     // CombiningMark\n     //   Non-Spacing mark (Mn)\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 213,
    "bugNodeStartChar": 5719,
    "bugNodeLength": 112,
    "fixLineNum": 213,
    "fixNodeStartChar": 5719,
    "fixNodeLength": 119,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "src/com/google/javascript/jscomp/parsing/parser/Scanner.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/parsing/parser/Scanner.java b/src/com/google/javascript/jscomp/parsing/parser/Scanner.java\nindex b7501eb..bd68b85 100644\n--- a/src/com/google/javascript/jscomp/parsing/parser/Scanner.java\n+++ b/src/com/google/javascript/jscomp/parsing/parser/Scanner.java\n@@ -210,11 +210,11 @@\n     return true;\n   }\n \n-  private boolean isRegularExpressionFirstChar(char ch) {\n+  private static boolean isRegularExpressionFirstChar(char ch) {\n     return isRegularExpressionChar(ch) && ch != '*';\n   }\n \n-  private boolean isRegularExpressionChar(char ch) {\n+  private static boolean isRegularExpressionChar(char ch) {\n     switch (ch) {\n     case '/':\n       return false;\n@@ -741,7 +741,7 @@\n     return value;\n   }\n \n-  private boolean isIdentifierStart(char ch) {\n+  private static boolean isIdentifierStart(char ch) {\n     switch (ch) {\n     case '$':\n     case '_':\n@@ -752,7 +752,7 @@\n     }\n   }\n \n-  private boolean isIdentifierPart(char ch) {\n+  private static boolean isIdentifierPart(char ch) {\n     // TODO: identifier part character classes\n     // CombiningMark\n     //   Non-Spacing mark (Mn)\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 217,
    "bugNodeStartChar": 5835,
    "bugNodeLength": 209,
    "fixLineNum": 217,
    "fixNodeStartChar": 5835,
    "fixNodeLength": 216,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "src/com/google/javascript/jscomp/parsing/parser/Scanner.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/parsing/parser/Scanner.java b/src/com/google/javascript/jscomp/parsing/parser/Scanner.java\nindex b7501eb..bd68b85 100644\n--- a/src/com/google/javascript/jscomp/parsing/parser/Scanner.java\n+++ b/src/com/google/javascript/jscomp/parsing/parser/Scanner.java\n@@ -210,11 +210,11 @@\n     return true;\n   }\n \n-  private boolean isRegularExpressionFirstChar(char ch) {\n+  private static boolean isRegularExpressionFirstChar(char ch) {\n     return isRegularExpressionChar(ch) && ch != '*';\n   }\n \n-  private boolean isRegularExpressionChar(char ch) {\n+  private static boolean isRegularExpressionChar(char ch) {\n     switch (ch) {\n     case '/':\n       return false;\n@@ -741,7 +741,7 @@\n     return value;\n   }\n \n-  private boolean isIdentifierStart(char ch) {\n+  private static boolean isIdentifierStart(char ch) {\n     switch (ch) {\n     case '$':\n     case '_':\n@@ -752,7 +752,7 @@\n     }\n   }\n \n-  private boolean isIdentifierPart(char ch) {\n+  private static boolean isIdentifierPart(char ch) {\n     // TODO: identifier part character classes\n     // CombiningMark\n     //   Non-Spacing mark (Mn)\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 744,
    "bugNodeStartChar": 22351,
    "bugNodeLength": 231,
    "fixLineNum": 744,
    "fixNodeStartChar": 22351,
    "fixNodeLength": 238,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "src/com/google/javascript/jscomp/parsing/parser/Scanner.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/parsing/parser/Scanner.java b/src/com/google/javascript/jscomp/parsing/parser/Scanner.java\nindex b7501eb..bd68b85 100644\n--- a/src/com/google/javascript/jscomp/parsing/parser/Scanner.java\n+++ b/src/com/google/javascript/jscomp/parsing/parser/Scanner.java\n@@ -210,11 +210,11 @@\n     return true;\n   }\n \n-  private boolean isRegularExpressionFirstChar(char ch) {\n+  private static boolean isRegularExpressionFirstChar(char ch) {\n     return isRegularExpressionChar(ch) && ch != '*';\n   }\n \n-  private boolean isRegularExpressionChar(char ch) {\n+  private static boolean isRegularExpressionChar(char ch) {\n     switch (ch) {\n     case '/':\n       return false;\n@@ -741,7 +741,7 @@\n     return value;\n   }\n \n-  private boolean isIdentifierStart(char ch) {\n+  private static boolean isIdentifierStart(char ch) {\n     switch (ch) {\n     case '$':\n     case '_':\n@@ -752,7 +752,7 @@\n     }\n   }\n \n-  private boolean isIdentifierPart(char ch) {\n+  private static boolean isIdentifierPart(char ch) {\n     // TODO: identifier part character classes\n     // CombiningMark\n     //   Non-Spacing mark (Mn)\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 755,
    "bugNodeStartChar": 22586,
    "bugNodeLength": 329,
    "fixLineNum": 755,
    "fixNodeStartChar": 22586,
    "fixNodeLength": 336,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "src/com/google/javascript/rhino/Node.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java\nindex 5f2d9ea..8db9b13 100644\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -2456,7 +2456,7 @@\n   /**\n    * returns true if all the flags are set in value.\n    */\n-  private boolean areBitFlagsSet(int value, int flags) {\n+  private static boolean areBitFlagsSet(int value, int flags) {\n     return (value & flags) == flags;\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 2456,
    "bugNodeStartChar": 72793,
    "bugNodeLength": 160,
    "fixLineNum": 2456,
    "fixNodeStartChar": 72793,
    "fixNodeLength": 167,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "src/com/google/javascript/rhino/SimpleErrorReporter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/SimpleErrorReporter.java b/src/com/google/javascript/rhino/SimpleErrorReporter.java\nindex a0767b9..d0a9c37 100644\n--- a/src/com/google/javascript/rhino/SimpleErrorReporter.java\n+++ b/src/com/google/javascript/rhino/SimpleErrorReporter.java\n@@ -72,7 +72,7 @@\n         errors.add(formatDetailedMessage(message, sourceName, line));\n     }\n \n-    private String formatDetailedMessage(\n+    private static String formatDetailedMessage(\n         String message, String sourceName, int lineNumber) {\n       String details = message;\n       if (sourceName == null || lineNumber <= 0) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 75,
    "bugNodeStartChar": 2623,
    "bugNodeLength": 514,
    "fixLineNum": 75,
    "fixNodeStartChar": 2623,
    "fixNodeLength": 521,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
    "fixPatch": "diff --git a/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java b/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java\nindex abc88fe..da4946c 100644\n--- a/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java\n+++ b/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java\n@@ -52,7 +52,7 @@\n     return SourceMap.Format.V3;\n   }\n \n-  private String getEncodedFileName() {\n+  private static String getEncodedFileName() {\n     if (File.separatorChar == '\\\\') {\n       return \"c:/myfile.js\";\n     } else {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 55,
    "bugNodeStartChar": 1611,
    "bugNodeLength": 159,
    "fixLineNum": 55,
    "fixNodeStartChar": 1611,
    "fixNodeLength": 166,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "test/com/google/javascript/jscomp/CheckConformanceTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CheckConformanceTest.java b/test/com/google/javascript/jscomp/CheckConformanceTest.java\nindex 8c95572..a806f38 100644\n--- a/test/com/google/javascript/jscomp/CheckConformanceTest.java\n+++ b/test/com/google/javascript/jscomp/CheckConformanceTest.java\n@@ -1054,7 +1054,7 @@\n         \"function f() {goog.asserts.assertInstanceof(this, Error);}\");\n   }\n \n-  private String config(String rule, String message, String... fields) {\n+  private static String config(String rule, String message, String... fields) {\n     String result = \"requirement: {\\n\"\n         + \"  type: CUSTOM\\n\"\n         + \"  java_class: '\" + rule + \"'\\n\";\n@@ -1065,11 +1065,11 @@\n     return result;\n   }\n \n-  private String rule(String rule) {\n+  private static String rule(String rule) {\n     return \"com.google.javascript.jscomp.ConformanceRules$\" + rule;\n   }\n \n-  private String value(String value) {\n+  private static String value(String value) {\n     return \"  value: '\" + value + \"'\\n\";\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1057,
    "bugNodeStartChar": 31568,
    "bugNodeLength": 328,
    "fixLineNum": 1057,
    "fixNodeStartChar": 31568,
    "fixNodeLength": 335,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "test/com/google/javascript/jscomp/CheckConformanceTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CheckConformanceTest.java b/test/com/google/javascript/jscomp/CheckConformanceTest.java\nindex 8c95572..a806f38 100644\n--- a/test/com/google/javascript/jscomp/CheckConformanceTest.java\n+++ b/test/com/google/javascript/jscomp/CheckConformanceTest.java\n@@ -1054,7 +1054,7 @@\n         \"function f() {goog.asserts.assertInstanceof(this, Error);}\");\n   }\n \n-  private String config(String rule, String message, String... fields) {\n+  private static String config(String rule, String message, String... fields) {\n     String result = \"requirement: {\\n\"\n         + \"  type: CUSTOM\\n\"\n         + \"  java_class: '\" + rule + \"'\\n\";\n@@ -1065,11 +1065,11 @@\n     return result;\n   }\n \n-  private String rule(String rule) {\n+  private static String rule(String rule) {\n     return \"com.google.javascript.jscomp.ConformanceRules$\" + rule;\n   }\n \n-  private String value(String value) {\n+  private static String value(String value) {\n     return \"  value: '\" + value + \"'\\n\";\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1068,
    "bugNodeStartChar": 31900,
    "bugNodeLength": 106,
    "fixLineNum": 1068,
    "fixNodeStartChar": 31900,
    "fixNodeLength": 113,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "test/com/google/javascript/jscomp/CheckConformanceTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CheckConformanceTest.java b/test/com/google/javascript/jscomp/CheckConformanceTest.java\nindex 8c95572..a806f38 100644\n--- a/test/com/google/javascript/jscomp/CheckConformanceTest.java\n+++ b/test/com/google/javascript/jscomp/CheckConformanceTest.java\n@@ -1054,7 +1054,7 @@\n         \"function f() {goog.asserts.assertInstanceof(this, Error);}\");\n   }\n \n-  private String config(String rule, String message, String... fields) {\n+  private static String config(String rule, String message, String... fields) {\n     String result = \"requirement: {\\n\"\n         + \"  type: CUSTOM\\n\"\n         + \"  java_class: '\" + rule + \"'\\n\";\n@@ -1065,11 +1065,11 @@\n     return result;\n   }\n \n-  private String rule(String rule) {\n+  private static String rule(String rule) {\n     return \"com.google.javascript.jscomp.ConformanceRules$\" + rule;\n   }\n \n-  private String value(String value) {\n+  private static String value(String value) {\n     return \"  value: '\" + value + \"'\\n\";\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1072,
    "bugNodeStartChar": 32010,
    "bugNodeLength": 81,
    "fixLineNum": 1072,
    "fixNodeStartChar": 32010,
    "fixNodeLength": 88,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\nindex 8abacff..2446431 100644\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n@@ -1759,7 +1759,7 @@\n         new PrintStream(errReader));\n   }\n \n-  private FlagEntry<JsSourceType> createZipFile(Map<String, String> entryContentsByName)\n+  private static FlagEntry<JsSourceType> createZipFile(Map<String, String> entryContentsByName)\n       throws IOException {\n     File tempZipFile = File.createTempFile(\"testdata\", \".js.zip\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1762,
    "bugNodeStartChar": 59743,
    "bugNodeLength": 623,
    "fixLineNum": 1762,
    "fixNodeStartChar": 59743,
    "fixNodeLength": 630,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "test/com/google/javascript/jscomp/CompilerTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CompilerTest.java b/test/com/google/javascript/jscomp/CompilerTest.java\nindex 0e8c212..68c2d59 100644\n--- a/test/com/google/javascript/jscomp/CompilerTest.java\n+++ b/test/com/google/javascript/jscomp/CompilerTest.java\n@@ -155,7 +155,7 @@\n         error.contains(\"Failed to load module \\\"missing\\\" at gin.js\"));\n   }\n \n-  private String normalize(String path) {\n+  private static String normalize(String path) {\n     return path.replace(File.separator, \"/\");\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 158,
    "bugNodeStartChar": 5925,
    "bugNodeLength": 89,
    "fixLineNum": 158,
    "fixNodeStartChar": 5925,
    "fixNodeLength": 96,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "test/com/google/javascript/jscomp/CompilerTestCase.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java\nindex d47481d..46f8fb1 100644\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n@@ -658,7 +658,7 @@\n     test(compiler, maybeCreateArray(expected), error, warning, description);\n   }\n \n-  private String[] maybeCreateArray(String expected) {\n+  private static String[] maybeCreateArray(String expected) {\n     if (expected != null) {\n       return new String[] {expected};\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 661,
    "bugNodeStartChar": 20268,
    "bugNodeLength": 145,
    "fixLineNum": 661,
    "fixNodeStartChar": 20268,
    "fixNodeLength": 152,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java b/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java\nindex a951335..1d47c2b 100644\n--- a/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java\n+++ b/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java\n@@ -100,7 +100,7 @@\n     invert = false;\n   }\n \n-  private String wrapInFunction(String s) {\n+  private static String wrapInFunction(String s) {\n     return \"function f(){\" + s + \"}\";\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 103,
    "bugNodeStartChar": 2983,
    "bugNodeLength": 83,
    "fixLineNum": 103,
    "fixNodeStartChar": 2983,
    "fixNodeLength": 90,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "test/com/google/javascript/jscomp/NormalizeTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/NormalizeTest.java b/test/com/google/javascript/jscomp/NormalizeTest.java\nindex 45329b3..34b9088 100644\n--- a/test/com/google/javascript/jscomp/NormalizeTest.java\n+++ b/test/com/google/javascript/jscomp/NormalizeTest.java\n@@ -187,7 +187,7 @@\n          \"function f() { f(); if (true) {var bar = function () {}}}\");\n   }\n \n-  private String inFunction(String code) {\n+  private static String inFunction(String code) {\n     return \"(function(){\" + code + \"})\";\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 190,
    "bugNodeStartChar": 6425,
    "bugNodeLength": 85,
    "fixLineNum": 190,
    "fixNodeStartChar": 6425,
    "fixNodeLength": 92,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\nindex 5e792b9..f32ba84 100644\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n@@ -1279,7 +1279,7 @@\n     foldSame(\"var x = 3 * (r ? Infinity : -Infinity);\");\n   }\n \n-  private String join(String operandA, String op, String operandB) {\n+  private static String join(String operandA, String op, String operandB) {\n     return operandA + \" \" + op + \" \" + operandB;\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1282,
    "bugNodeStartChar": 39771,
    "bugNodeLength": 119,
    "fixLineNum": 1282,
    "fixNodeStartChar": 39771,
    "fixNodeLength": 126,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69",
    "fixCommitParentSHA1": "d3c669a598134e08d22ab6263b3c9b442e86bc17",
    "bugFilePath": "test/com/google/javascript/jscomp/StrictModeCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/StrictModeCheckTest.java b/test/com/google/javascript/jscomp/StrictModeCheckTest.java\nindex 6f39ba1..bf09cbd 100644\n--- a/test/com/google/javascript/jscomp/StrictModeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/StrictModeCheckTest.java\n@@ -340,7 +340,7 @@\n         \"}\"), StrictModeCheck.ARGUMENTS_CALLER_FORBIDDEN);\n   }\n \n-  private String inFn(String body) {\n+  private static String inFn(String body) {\n     return \"function func() {\" + body + \"}\";\n   }\n }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 343,
    "bugNodeStartChar": 10246,
    "bugNodeLength": 83,
    "fixLineNum": 343,
    "fixNodeStartChar": 10246,
    "fixNodeLength": 90,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "88ab3f29c17cb38e01cfa655876b7627558c6de1",
    "fixCommitParentSHA1": "70b1bec449354d435db79264481f66862b3b543f",
    "bugFilePath": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java\nindex 1105756..899a3cd 100644\n--- a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java\n+++ b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java\n@@ -483,7 +483,7 @@\n \n         Node rhsValue = ref.getNext();\n         Node newName = IR.name(moduleName).srcref(ref);\n-        newName.putProp(Node.ORIGINALNAME_PROP, rhsValue);\n+        newName.putProp(Node.ORIGINALNAME_PROP, qName);\n \n         Node parent = ref.getParent();\n         parent.replaceChild(ref, newName);\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 486,
    "bugNodeStartChar": 16773,
    "bugNodeLength": 49,
    "fixLineNum": 486,
    "fixNodeStartChar": 16773,
    "fixNodeLength": 46,
    "sourceBeforeFix": "newName.putProp(Node.ORIGINALNAME_PROP,rhsValue)",
    "sourceAfterFix": "newName.putProp(Node.ORIGINALNAME_PROP,qName)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "11b2dc6cb756eab64037bb27188e0c1eac3b01e0",
    "fixCommitParentSHA1": "74d86087e82b35bccb39cdb46601ed4b0e1f14cd",
    "bugFilePath": "src/com/google/javascript/jscomp/Linter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Linter.java b/src/com/google/javascript/jscomp/Linter.java\nindex 98f24d5..00dd14f 100644\n--- a/src/com/google/javascript/jscomp/Linter.java\n+++ b/src/com/google/javascript/jscomp/Linter.java\n@@ -43,7 +43,7 @@\n     Compiler compiler = new Compiler();\n     CompilerOptions options = new CompilerOptions();\n     options.setLanguageIn(LanguageMode.ECMASCRIPT6_STRICT);\n-    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n+    options.setLanguageOut(LanguageMode.ECMASCRIPT5);\n     options.setCodingConvention(new GoogleCodingConvention());\n     options.setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.WARNING);\n     options.setWarningLevel(DiagnosticGroups.EXTRA_REQUIRE, CheckLevel.WARNING);\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 46,
    "bugNodeStartChar": 1599,
    "bugNodeLength": 47,
    "fixLineNum": 46,
    "fixNodeStartChar": 1599,
    "fixNodeLength": 48,
    "sourceBeforeFix": "options.setLanguageIn(LanguageMode.ECMASCRIPT5)",
    "sourceAfterFix": "options.setLanguageOut(LanguageMode.ECMASCRIPT5)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "11b2dc6cb756eab64037bb27188e0c1eac3b01e0",
    "fixCommitParentSHA1": "74d86087e82b35bccb39cdb46601ed4b0e1f14cd",
    "bugFilePath": "src/com/google/javascript/jscomp/Linter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Linter.java b/src/com/google/javascript/jscomp/Linter.java\nindex 98f24d5..00dd14f 100644\n--- a/src/com/google/javascript/jscomp/Linter.java\n+++ b/src/com/google/javascript/jscomp/Linter.java\n@@ -43,7 +43,7 @@\n     Compiler compiler = new Compiler();\n     CompilerOptions options = new CompilerOptions();\n     options.setLanguageIn(LanguageMode.ECMASCRIPT6_STRICT);\n-    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n+    options.setLanguageOut(LanguageMode.ECMASCRIPT5);\n     options.setCodingConvention(new GoogleCodingConvention());\n     options.setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.WARNING);\n     options.setWarningLevel(DiagnosticGroups.EXTRA_REQUIRE, CheckLevel.WARNING);\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 46,
    "bugNodeStartChar": 1599,
    "bugNodeLength": 47,
    "fixLineNum": 46,
    "fixNodeStartChar": 1599,
    "fixNodeLength": 48,
    "sourceBeforeFix": "options.setLanguageIn(LanguageMode.ECMASCRIPT5)",
    "sourceAfterFix": "options.setLanguageOut(LanguageMode.ECMASCRIPT5)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "28839656db6bc11561d17a66761d8592e8a67de1",
    "fixCommitParentSHA1": "1004c380c40a18134932d7cad5bf1fb2dd2508e3",
    "bugFilePath": "src/com/google/javascript/jscomp/CheckUnusedPrivateProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CheckUnusedPrivateProperties.java b/src/com/google/javascript/jscomp/CheckUnusedPrivateProperties.java\nindex 3af22cc..8d58eec 100644\n--- a/src/com/google/javascript/jscomp/CheckUnusedPrivateProperties.java\n+++ b/src/com/google/javascript/jscomp/CheckUnusedPrivateProperties.java\n@@ -66,7 +66,7 @@\n     for (Node n : candidates) {\n       String propName = getPropName(n);\n       if (!used.contains(propName)) {\n-        t.report(n, UNUSED_PRIVATE_PROPERTY);\n+        t.report(n, UNUSED_PRIVATE_PROPERTY, propName);\n       }\n     }\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 69,
    "bugNodeStartChar": 2297,
    "bugNodeLength": 36,
    "fixLineNum": 69,
    "fixNodeStartChar": 2297,
    "fixNodeLength": 46,
    "sourceBeforeFix": "t.report(n,UNUSED_PRIVATE_PROPERTY)",
    "sourceAfterFix": "t.report(n,UNUSED_PRIVATE_PROPERTY,propName)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "2c434d09d831b7fcb8e0f4d22047637520d11be3",
    "fixCommitParentSHA1": "b8ebc30b966c4c493079349331ea8e2d22ced1df",
    "bugFilePath": "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/VariableReferenceCheck.java b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\nindex b1601b6..84acd32 100644\n--- a/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n+++ b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n@@ -44,7 +44,7 @@\n       \"JSC_REFERENCE_BEFORE_DECLARE\",\n       \"Variable referenced before declaration: {0}\");\n \n-  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.error(\n+  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(\n       \"JSC_REDECLARED_VARIABLE\",\n       \"Redeclared variable: {0}\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 47,
    "bugNodeStartChar": 1898,
    "bugNodeLength": 88,
    "fixLineNum": 47,
    "fixNodeStartChar": 1898,
    "fixNodeLength": 90,
    "sourceBeforeFix": "DiagnosticType.error(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")",
    "sourceAfterFix": "DiagnosticType.warning(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "2c434d09d831b7fcb8e0f4d22047637520d11be3",
    "fixCommitParentSHA1": "b8ebc30b966c4c493079349331ea8e2d22ced1df",
    "bugFilePath": "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/VariableReferenceCheck.java b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\nindex b1601b6..84acd32 100644\n--- a/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n+++ b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n@@ -44,7 +44,7 @@\n       \"JSC_REFERENCE_BEFORE_DECLARE\",\n       \"Variable referenced before declaration: {0}\");\n \n-  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.error(\n+  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(\n       \"JSC_REDECLARED_VARIABLE\",\n       \"Redeclared variable: {0}\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 47,
    "bugNodeStartChar": 1898,
    "bugNodeLength": 88,
    "fixLineNum": 47,
    "fixNodeStartChar": 1898,
    "fixNodeLength": 90,
    "sourceBeforeFix": "DiagnosticType.error(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")",
    "sourceAfterFix": "DiagnosticType.warning(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "2c434d09d831b7fcb8e0f4d22047637520d11be3",
    "fixCommitParentSHA1": "b8ebc30b966c4c493079349331ea8e2d22ced1df",
    "bugFilePath": "test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java b/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java\nindex b64b2de..b708fd0 100644\n--- a/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java\n+++ b/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java\n@@ -367,7 +367,7 @@\n    * Expects the JS to generate one bad-read warning.\n    */\n   private void assertRedeclare(String js) {\n-    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n+    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n \n   /**\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 370,
    "bugNodeStartChar": 11389,
    "bugNodeLength": 57,
    "fixLineNum": 370,
    "fixNodeStartChar": 11389,
    "fixNodeLength": 59,
    "sourceBeforeFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)",
    "sourceAfterFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "2c434d09d831b7fcb8e0f4d22047637520d11be3",
    "fixCommitParentSHA1": "b8ebc30b966c4c493079349331ea8e2d22ced1df",
    "bugFilePath": "test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java b/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java\nindex b64b2de..b708fd0 100644\n--- a/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java\n+++ b/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java\n@@ -367,7 +367,7 @@\n    * Expects the JS to generate one bad-read warning.\n    */\n   private void assertRedeclare(String js) {\n-    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n+    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n \n   /**\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 370,
    "bugNodeStartChar": 11389,
    "bugNodeLength": 57,
    "fixLineNum": 370,
    "fixNodeStartChar": 11389,
    "fixNodeLength": 59,
    "sourceBeforeFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)",
    "sourceAfterFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "2c434d09d831b7fcb8e0f4d22047637520d11be3",
    "fixCommitParentSHA1": "b8ebc30b966c4c493079349331ea8e2d22ced1df",
    "bugFilePath": "test/com/google/javascript/jscomp/VariableReferenceCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java b/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\nindex 1529276..2156b95 100644\n--- a/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\n+++ b/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\n@@ -259,7 +259,7 @@\n    * Expects the JS to generate one bad-read error.\n    */\n   private void assertRedeclare(String js) {\n-    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n+    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n \n   /**\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 262,
    "bugNodeStartChar": 8216,
    "bugNodeLength": 57,
    "fixLineNum": 262,
    "fixNodeStartChar": 8216,
    "fixNodeLength": 59,
    "sourceBeforeFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)",
    "sourceAfterFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "2c434d09d831b7fcb8e0f4d22047637520d11be3",
    "fixCommitParentSHA1": "b8ebc30b966c4c493079349331ea8e2d22ced1df",
    "bugFilePath": "test/com/google/javascript/jscomp/VariableReferenceCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java b/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\nindex 1529276..2156b95 100644\n--- a/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\n+++ b/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\n@@ -259,7 +259,7 @@\n    * Expects the JS to generate one bad-read error.\n    */\n   private void assertRedeclare(String js) {\n-    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n+    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n \n   /**\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 262,
    "bugNodeStartChar": 8216,
    "bugNodeLength": 57,
    "fixLineNum": 262,
    "fixNodeStartChar": 8216,
    "fixNodeLength": 59,
    "sourceBeforeFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)",
    "sourceAfterFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "26f1133593498a87216f0dd4954ff7c07313b740",
    "fixCommitParentSHA1": "477f59d3e52ea9dbbb27e6ccd12447dbb78672ae",
    "bugFilePath": "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/VariableReferenceCheck.java b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\nindex 84acd32..b1601b6 100644\n--- a/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n+++ b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n@@ -44,7 +44,7 @@\n       \"JSC_REFERENCE_BEFORE_DECLARE\",\n       \"Variable referenced before declaration: {0}\");\n \n-  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(\n+  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.error(\n       \"JSC_REDECLARED_VARIABLE\",\n       \"Redeclared variable: {0}\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 47,
    "bugNodeStartChar": 1898,
    "bugNodeLength": 90,
    "fixLineNum": 47,
    "fixNodeStartChar": 1898,
    "fixNodeLength": 88,
    "sourceBeforeFix": "DiagnosticType.warning(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")",
    "sourceAfterFix": "DiagnosticType.error(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "26f1133593498a87216f0dd4954ff7c07313b740",
    "fixCommitParentSHA1": "477f59d3e52ea9dbbb27e6ccd12447dbb78672ae",
    "bugFilePath": "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/VariableReferenceCheck.java b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\nindex 84acd32..b1601b6 100644\n--- a/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n+++ b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n@@ -44,7 +44,7 @@\n       \"JSC_REFERENCE_BEFORE_DECLARE\",\n       \"Variable referenced before declaration: {0}\");\n \n-  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(\n+  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.error(\n       \"JSC_REDECLARED_VARIABLE\",\n       \"Redeclared variable: {0}\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 47,
    "bugNodeStartChar": 1898,
    "bugNodeLength": 90,
    "fixLineNum": 47,
    "fixNodeStartChar": 1898,
    "fixNodeLength": 88,
    "sourceBeforeFix": "DiagnosticType.warning(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")",
    "sourceAfterFix": "DiagnosticType.error(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "26f1133593498a87216f0dd4954ff7c07313b740",
    "fixCommitParentSHA1": "477f59d3e52ea9dbbb27e6ccd12447dbb78672ae",
    "bugFilePath": "test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java b/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java\nindex b708fd0..b64b2de 100644\n--- a/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java\n+++ b/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java\n@@ -367,7 +367,7 @@\n    * Expects the JS to generate one bad-read warning.\n    */\n   private void assertRedeclare(String js) {\n-    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n+    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n \n   /**\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 370,
    "bugNodeStartChar": 11389,
    "bugNodeLength": 59,
    "fixLineNum": 370,
    "fixNodeStartChar": 11389,
    "fixNodeLength": 57,
    "sourceBeforeFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)",
    "sourceAfterFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "26f1133593498a87216f0dd4954ff7c07313b740",
    "fixCommitParentSHA1": "477f59d3e52ea9dbbb27e6ccd12447dbb78672ae",
    "bugFilePath": "test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java b/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java\nindex b708fd0..b64b2de 100644\n--- a/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java\n+++ b/test/com/google/javascript/jscomp/Es6VariableReferenceCheckTest.java\n@@ -367,7 +367,7 @@\n    * Expects the JS to generate one bad-read warning.\n    */\n   private void assertRedeclare(String js) {\n-    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n+    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n \n   /**\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 370,
    "bugNodeStartChar": 11389,
    "bugNodeLength": 59,
    "fixLineNum": 370,
    "fixNodeStartChar": 11389,
    "fixNodeLength": 57,
    "sourceBeforeFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)",
    "sourceAfterFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "26f1133593498a87216f0dd4954ff7c07313b740",
    "fixCommitParentSHA1": "477f59d3e52ea9dbbb27e6ccd12447dbb78672ae",
    "bugFilePath": "test/com/google/javascript/jscomp/VariableReferenceCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java b/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\nindex 2156b95..1529276 100644\n--- a/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\n+++ b/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\n@@ -259,7 +259,7 @@\n    * Expects the JS to generate one bad-read error.\n    */\n   private void assertRedeclare(String js) {\n-    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n+    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n \n   /**\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 262,
    "bugNodeStartChar": 8216,
    "bugNodeLength": 59,
    "fixLineNum": 262,
    "fixNodeStartChar": 8216,
    "fixNodeLength": 57,
    "sourceBeforeFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)",
    "sourceAfterFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "26f1133593498a87216f0dd4954ff7c07313b740",
    "fixCommitParentSHA1": "477f59d3e52ea9dbbb27e6ccd12447dbb78672ae",
    "bugFilePath": "test/com/google/javascript/jscomp/VariableReferenceCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java b/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\nindex 2156b95..1529276 100644\n--- a/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\n+++ b/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\n@@ -259,7 +259,7 @@\n    * Expects the JS to generate one bad-read error.\n    */\n   private void assertRedeclare(String js) {\n-    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n+    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n \n   /**\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 262,
    "bugNodeStartChar": 8216,
    "bugNodeLength": 59,
    "fixLineNum": 262,
    "fixNodeStartChar": 8216,
    "fixNodeLength": 57,
    "sourceBeforeFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)",
    "sourceAfterFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1483181d1cddaba1aaa283fae5f1d5b7c347802f",
    "fixCommitParentSHA1": "a0fbd5b93f93eec0189ead0109f4e08a3db82c71",
    "bugFilePath": "src/com/google/javascript/jscomp/lint/CheckForInOverArray.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/lint/CheckForInOverArray.java b/src/com/google/javascript/jscomp/lint/CheckForInOverArray.java\nindex 52efeb7..9169141 100644\n--- a/src/com/google/javascript/jscomp/lint/CheckForInOverArray.java\n+++ b/src/com/google/javascript/jscomp/lint/CheckForInOverArray.java\n@@ -89,6 +89,6 @@\n \n   @Override\n   public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n-    NodeTraversal.traverseEs6(compiler, originalRoot, this);\n+    NodeTraversal.traverseEs6(compiler, scriptRoot, this);\n   }\n }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 92,
    "bugNodeStartChar": 2919,
    "bugNodeLength": 55,
    "fixLineNum": 92,
    "fixNodeStartChar": 2919,
    "fixNodeLength": 53,
    "sourceBeforeFix": "NodeTraversal.traverseEs6(compiler,originalRoot,this)",
    "sourceAfterFix": "NodeTraversal.traverseEs6(compiler,scriptRoot,this)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "25c6de151fdcf2980ad073af5e9d4ff25c662b80",
    "fixCommitParentSHA1": "59766476adfd5f14050e43f901bb5992a5c2edc0",
    "bugFilePath": "test/com/google/javascript/jscomp/deps/ClosureSortedDependenciesTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/deps/ClosureSortedDependenciesTest.java b/test/com/google/javascript/jscomp/deps/ClosureSortedDependenciesTest.java\nindex a6e5fdc..1026005 100644\n--- a/test/com/google/javascript/jscomp/deps/ClosureSortedDependenciesTest.java\n+++ b/test/com/google/javascript/jscomp/deps/ClosureSortedDependenciesTest.java\n@@ -23,7 +23,7 @@\n /**\n  * Tests for {@link ClosureSortedDependencies}\n  */\n-public class ClosureSortedDependenciesTest extends SortedDependenciesTest {\n+public class ClosureSortedDependenciesTest extends SortedDependenciesTestHelper {\n \n   @Override\n   public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 23,
    "bugNodeStartChar": 772,
    "bugNodeLength": 429,
    "fixLineNum": 23,
    "fixNodeStartChar": 772,
    "fixNodeLength": 435,
    "sourceBeforeFix": "/**   * Tests for  {@link ClosureSortedDependencies}  */ public class ClosureSortedDependenciesTest extends SortedDependenciesTest {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new ClosureSortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return false;   } } ",
    "sourceAfterFix": "/**   * Tests for  {@link ClosureSortedDependencies}  */ public class ClosureSortedDependenciesTest extends SortedDependenciesTestHelper {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new ClosureSortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return false;   } } "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "25c6de151fdcf2980ad073af5e9d4ff25c662b80",
    "fixCommitParentSHA1": "59766476adfd5f14050e43f901bb5992a5c2edc0",
    "bugFilePath": "test/com/google/javascript/jscomp/deps/Es6SortedDependenciesTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/deps/Es6SortedDependenciesTest.java b/test/com/google/javascript/jscomp/deps/Es6SortedDependenciesTest.java\nindex 3f2d47f..dea7369 100644\n--- a/test/com/google/javascript/jscomp/deps/Es6SortedDependenciesTest.java\n+++ b/test/com/google/javascript/jscomp/deps/Es6SortedDependenciesTest.java\n@@ -23,7 +23,7 @@\n /**\n  * Tests for {@link Es6SortedDependencies}\n  */\n-public class Es6SortedDependenciesTest extends SortedDependenciesTest {\n+public class Es6SortedDependenciesTest extends SortedDependenciesTestHelper {\n \n   @Override\n   public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 23,
    "bugNodeStartChar": 772,
    "bugNodeLength": 416,
    "fixLineNum": 23,
    "fixNodeStartChar": 772,
    "fixNodeLength": 422,
    "sourceBeforeFix": "/**   * Tests for  {@link Es6SortedDependencies}  */ public class Es6SortedDependenciesTest extends SortedDependenciesTest {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new Es6SortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return true;   } } ",
    "sourceAfterFix": "/**   * Tests for  {@link Es6SortedDependencies}  */ public class Es6SortedDependenciesTest extends SortedDependenciesTestHelper {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new Es6SortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return true;   } } "
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "6778ebb53736d821d376ec09b39933355de4f5e3",
    "fixCommitParentSHA1": "14c0b638bd8adf2016481d93da8db41941541eb6",
    "bugFilePath": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex 93de6e8..98dc756 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -88,7 +88,7 @@\n   // by printing all properties.\n   private boolean prettyPrint = false;\n \n-  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;\n+  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 10;\n \n   /**\n    * Creates an object type.\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 91,
    "bugNodeStartChar": 3635,
    "bugNodeLength": 33,
    "fixLineNum": 91,
    "fixNodeStartChar": 3635,
    "fixNodeLength": 34,
    "sourceBeforeFix": "MAX_PRETTY_PRINTED_PROPERTIES=4",
    "sourceAfterFix": "MAX_PRETTY_PRINTED_PROPERTIES=10"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "4660d2c4aaae508c654b1d05b8638d4fc5e5a527",
    "fixCommitParentSHA1": "24be6f66b6e6ef46dc2714a1169726b6187bff17",
    "bugFilePath": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 306552f..a19061f 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -827,7 +827,7 @@\n    */\n   private static Node getEnclosingDeclNameNode(Node n) {\n     Node fn = NodeUtil.getEnclosingFunction(n);\n-    return fn == null ? null : NodeUtil.getFunctionNameNode(enclosingFunction);\n+    return fn == null ? null : NodeUtil.getFunctionNameNode(fn);\n   }\n \n   /** Verify if goog.base call is used in a class */\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 830,
    "bugNodeStartChar": 29184,
    "bugNodeLength": 47,
    "fixLineNum": 830,
    "fixNodeStartChar": 29184,
    "fixNodeLength": 32,
    "sourceBeforeFix": "NodeUtil.getFunctionNameNode(enclosingFunction)",
    "sourceAfterFix": "NodeUtil.getFunctionNameNode(fn)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "70857b76b6debcce4cd2b1e9befcc9ee574e0b10",
    "fixCommitParentSHA1": "b12a354d55153891154df0c7af7e03a3c9cc0a75",
    "bugFilePath": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java b/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\nindex 191bcfe..e2475e1 100644\n--- a/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\n@@ -177,19 +177,19 @@\n \n   public void testModuleExportsScope() {\n     setFilename(\"test\");\n-    test(\n+    testModules(\n         \"var foo = function (module) {module.exports = {};};\" +\n         \"module.exports = foo;\",\n         \"goog.provide('module$test');\" +\n         \"var foo$$module$test=function(module){module.exports={}};\" +\n         \"var module$test=foo$$module$test\");\n-    test(\n+    testModules(\n         \"var foo = function () {var module = {};module.exports = {};};\" +\n         \"module.exports = foo;\",\n         \"goog.provide('module$test');\" +\n         \"var foo$$module$test=function(){var module={};module.exports={}};\" +\n         \"var module$test=foo$$module$test\");\n-    test(\n+    testModules(\n         \"var foo = function () {if (true) var module = {};\" +\n         \"module.exports = {};};\" +\n         \"module.exports = foo;\",\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 180,
    "bugNodeStartChar": 6166,
    "bugNodeLength": 257,
    "fixLineNum": 180,
    "fixNodeStartChar": 6166,
    "fixNodeLength": 264,
    "sourceBeforeFix": "test(\"var foo = function (module) {module.exports = {};};\" + \"module.exports = foo;\",\"goog.provide('module$test');\" + \"var foo$$module$test=function(module){module.exports={}};\" + \"var module$test=foo$$module$test\")",
    "sourceAfterFix": "testModules(\"var foo = function (module) {module.exports = {};};\" + \"module.exports = foo;\",\"goog.provide('module$test');\" + \"var foo$$module$test=function(module){module.exports={}};\" + \"var module$test=foo$$module$test\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "70857b76b6debcce4cd2b1e9befcc9ee574e0b10",
    "fixCommitParentSHA1": "b12a354d55153891154df0c7af7e03a3c9cc0a75",
    "bugFilePath": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java b/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\nindex 191bcfe..e2475e1 100644\n--- a/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\n@@ -177,19 +177,19 @@\n \n   public void testModuleExportsScope() {\n     setFilename(\"test\");\n-    test(\n+    testModules(\n         \"var foo = function (module) {module.exports = {};};\" +\n         \"module.exports = foo;\",\n         \"goog.provide('module$test');\" +\n         \"var foo$$module$test=function(module){module.exports={}};\" +\n         \"var module$test=foo$$module$test\");\n-    test(\n+    testModules(\n         \"var foo = function () {var module = {};module.exports = {};};\" +\n         \"module.exports = foo;\",\n         \"goog.provide('module$test');\" +\n         \"var foo$$module$test=function(){var module={};module.exports={}};\" +\n         \"var module$test=foo$$module$test\");\n-    test(\n+    testModules(\n         \"var foo = function () {if (true) var module = {};\" +\n         \"module.exports = {};};\" +\n         \"module.exports = foo;\",\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 180,
    "bugNodeStartChar": 6166,
    "bugNodeLength": 257,
    "fixLineNum": 180,
    "fixNodeStartChar": 6166,
    "fixNodeLength": 264,
    "sourceBeforeFix": "test(\"var foo = function (module) {module.exports = {};};\" + \"module.exports = foo;\",\"goog.provide('module$test');\" + \"var foo$$module$test=function(module){module.exports={}};\" + \"var module$test=foo$$module$test\")",
    "sourceAfterFix": "testModules(\"var foo = function (module) {module.exports = {};};\" + \"module.exports = foo;\",\"goog.provide('module$test');\" + \"var foo$$module$test=function(module){module.exports={}};\" + \"var module$test=foo$$module$test\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "70857b76b6debcce4cd2b1e9befcc9ee574e0b10",
    "fixCommitParentSHA1": "b12a354d55153891154df0c7af7e03a3c9cc0a75",
    "bugFilePath": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java b/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\nindex 191bcfe..e2475e1 100644\n--- a/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\n@@ -177,19 +177,19 @@\n \n   public void testModuleExportsScope() {\n     setFilename(\"test\");\n-    test(\n+    testModules(\n         \"var foo = function (module) {module.exports = {};};\" +\n         \"module.exports = foo;\",\n         \"goog.provide('module$test');\" +\n         \"var foo$$module$test=function(module){module.exports={}};\" +\n         \"var module$test=foo$$module$test\");\n-    test(\n+    testModules(\n         \"var foo = function () {var module = {};module.exports = {};};\" +\n         \"module.exports = foo;\",\n         \"goog.provide('module$test');\" +\n         \"var foo$$module$test=function(){var module={};module.exports={}};\" +\n         \"var module$test=foo$$module$test\");\n-    test(\n+    testModules(\n         \"var foo = function () {if (true) var module = {};\" +\n         \"module.exports = {};};\" +\n         \"module.exports = foo;\",\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 186,
    "bugNodeStartChar": 6429,
    "bugNodeLength": 275,
    "fixLineNum": 186,
    "fixNodeStartChar": 6429,
    "fixNodeLength": 282,
    "sourceBeforeFix": "test(\"var foo = function () {var module = {};module.exports = {};};\" + \"module.exports = foo;\",\"goog.provide('module$test');\" + \"var foo$$module$test=function(){var module={};module.exports={}};\" + \"var module$test=foo$$module$test\")",
    "sourceAfterFix": "testModules(\"var foo = function () {var module = {};module.exports = {};};\" + \"module.exports = foo;\",\"goog.provide('module$test');\" + \"var foo$$module$test=function(){var module={};module.exports={}};\" + \"var module$test=foo$$module$test\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "70857b76b6debcce4cd2b1e9befcc9ee574e0b10",
    "fixCommitParentSHA1": "b12a354d55153891154df0c7af7e03a3c9cc0a75",
    "bugFilePath": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java b/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\nindex 191bcfe..e2475e1 100644\n--- a/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\n@@ -177,19 +177,19 @@\n \n   public void testModuleExportsScope() {\n     setFilename(\"test\");\n-    test(\n+    testModules(\n         \"var foo = function (module) {module.exports = {};};\" +\n         \"module.exports = foo;\",\n         \"goog.provide('module$test');\" +\n         \"var foo$$module$test=function(module){module.exports={}};\" +\n         \"var module$test=foo$$module$test\");\n-    test(\n+    testModules(\n         \"var foo = function () {var module = {};module.exports = {};};\" +\n         \"module.exports = foo;\",\n         \"goog.provide('module$test');\" +\n         \"var foo$$module$test=function(){var module={};module.exports={}};\" +\n         \"var module$test=foo$$module$test\");\n-    test(\n+    testModules(\n         \"var foo = function () {if (true) var module = {};\" +\n         \"module.exports = {};};\" +\n         \"module.exports = foo;\",\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 186,
    "bugNodeStartChar": 6429,
    "bugNodeLength": 275,
    "fixLineNum": 186,
    "fixNodeStartChar": 6429,
    "fixNodeLength": 282,
    "sourceBeforeFix": "test(\"var foo = function () {var module = {};module.exports = {};};\" + \"module.exports = foo;\",\"goog.provide('module$test');\" + \"var foo$$module$test=function(){var module={};module.exports={}};\" + \"var module$test=foo$$module$test\")",
    "sourceAfterFix": "testModules(\"var foo = function () {var module = {};module.exports = {};};\" + \"module.exports = foo;\",\"goog.provide('module$test');\" + \"var foo$$module$test=function(){var module={};module.exports={}};\" + \"var module$test=foo$$module$test\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "70857b76b6debcce4cd2b1e9befcc9ee574e0b10",
    "fixCommitParentSHA1": "b12a354d55153891154df0c7af7e03a3c9cc0a75",
    "bugFilePath": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java b/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\nindex 191bcfe..e2475e1 100644\n--- a/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\n@@ -177,19 +177,19 @@\n \n   public void testModuleExportsScope() {\n     setFilename(\"test\");\n-    test(\n+    testModules(\n         \"var foo = function (module) {module.exports = {};};\" +\n         \"module.exports = foo;\",\n         \"goog.provide('module$test');\" +\n         \"var foo$$module$test=function(module){module.exports={}};\" +\n         \"var module$test=foo$$module$test\");\n-    test(\n+    testModules(\n         \"var foo = function () {var module = {};module.exports = {};};\" +\n         \"module.exports = foo;\",\n         \"goog.provide('module$test');\" +\n         \"var foo$$module$test=function(){var module={};module.exports={}};\" +\n         \"var module$test=foo$$module$test\");\n-    test(\n+    testModules(\n         \"var foo = function () {if (true) var module = {};\" +\n         \"module.exports = {};};\" +\n         \"module.exports = foo;\",\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 192,
    "bugNodeStartChar": 6710,
    "bugNodeLength": 319,
    "fixLineNum": 192,
    "fixNodeStartChar": 6710,
    "fixNodeLength": 326,
    "sourceBeforeFix": "test(\"var foo = function () {if (true) var module = {};\" + \"module.exports = {};};\" + \"module.exports = foo;\",\"goog.provide('module$test');\" + \"var foo$$module$test=function(){if(true)var module={};\" + \"module.exports={}};\"+ \"var module$test=foo$$module$test\")",
    "sourceAfterFix": "testModules(\"var foo = function () {if (true) var module = {};\" + \"module.exports = {};};\" + \"module.exports = foo;\",\"goog.provide('module$test');\" + \"var foo$$module$test=function(){if(true)var module={};\" + \"module.exports={}};\"+ \"var module$test=foo$$module$test\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "70857b76b6debcce4cd2b1e9befcc9ee574e0b10",
    "fixCommitParentSHA1": "b12a354d55153891154df0c7af7e03a3c9cc0a75",
    "bugFilePath": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java b/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\nindex 191bcfe..e2475e1 100644\n--- a/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\n@@ -177,19 +177,19 @@\n \n   public void testModuleExportsScope() {\n     setFilename(\"test\");\n-    test(\n+    testModules(\n         \"var foo = function (module) {module.exports = {};};\" +\n         \"module.exports = foo;\",\n         \"goog.provide('module$test');\" +\n         \"var foo$$module$test=function(module){module.exports={}};\" +\n         \"var module$test=foo$$module$test\");\n-    test(\n+    testModules(\n         \"var foo = function () {var module = {};module.exports = {};};\" +\n         \"module.exports = foo;\",\n         \"goog.provide('module$test');\" +\n         \"var foo$$module$test=function(){var module={};module.exports={}};\" +\n         \"var module$test=foo$$module$test\");\n-    test(\n+    testModules(\n         \"var foo = function () {if (true) var module = {};\" +\n         \"module.exports = {};};\" +\n         \"module.exports = foo;\",\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 192,
    "bugNodeStartChar": 6710,
    "bugNodeLength": 319,
    "fixLineNum": 192,
    "fixNodeStartChar": 6710,
    "fixNodeLength": 326,
    "sourceBeforeFix": "test(\"var foo = function () {if (true) var module = {};\" + \"module.exports = {};};\" + \"module.exports = foo;\",\"goog.provide('module$test');\" + \"var foo$$module$test=function(){if(true)var module={};\" + \"module.exports={}};\"+ \"var module$test=foo$$module$test\")",
    "sourceAfterFix": "testModules(\"var foo = function () {if (true) var module = {};\" + \"module.exports = {};};\" + \"module.exports = foo;\",\"goog.provide('module$test');\" + \"var foo$$module$test=function(){if(true)var module={};\" + \"module.exports={}};\"+ \"var module$test=foo$$module$test\")"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "7a38e366168d514aa41d9996ee89caf259ee2f27",
    "fixCommitParentSHA1": "62eb740d0dc3fb26c2bd09907faca52ed86da717",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex a44241e..2371989 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -280,7 +280,7 @@\n       checks.add(angularPass);\n     }\n \n-    if (options.checkProvides.isOn()) {\n+    if (options.checkProvides.isOn() || options.enables(DiagnosticGroups.MISSING_PROVIDE)) {\n       checks.add(checkProvides);\n     }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 283,
    "bugNodeStartChar": 10022,
    "bugNodeLength": 28,
    "fixLineNum": 283,
    "fixNodeStartChar": 10022,
    "fixNodeLength": 81,
    "sourceBeforeFix": "options.checkProvides.isOn()",
    "sourceAfterFix": "options.checkProvides.isOn() || options.enables(DiagnosticGroups.MISSING_PROVIDE)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "5c69489d8b91abf358206501a09097125acf1a8a",
    "fixCommitParentSHA1": "914a7ba2c9ee900a4c30017df967972bb37ad751",
    "bugFilePath": "src/com/google/javascript/jscomp/NewTypeInference.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NewTypeInference.java b/src/com/google/javascript/jscomp/NewTypeInference.java\nindex 0e4e487..d037f4a 100644\n--- a/src/com/google/javascript/jscomp/NewTypeInference.java\n+++ b/src/com/google/javascript/jscomp/NewTypeInference.java\n@@ -185,7 +185,8 @@\n   static final DiagnosticType GOOG_BIND_EXPECTS_FUNCTION =\n       DiagnosticType.warning(\n           \"JSC_GOOG_BIND_EXPECTS_FUNCTION\",\n-          \"The first argument to goog.bind/goog.partial must be a function.\");\n+          \"The first argument to goog.bind/goog.partial must be a function,\"\n+          + \" found: {0}\");\n \n   static final DiagnosticType BOTTOM_PROP =\n       DiagnosticType.warning(\n@@ -1759,7 +1760,7 @@\n     TypeEnv env = pair.env;\n     FunctionType boundFunType = pair.type.getFunTypeIfSingletonObj();\n     if (!pair.type.isSubtypeOf(commonTypes.topFunction())) {\n-      warnings.add(JSError.make(boundFunNode, GOOG_BIND_EXPECTS_FUNCTION));\n+      warnings.add(JSError.make(boundFunNode, GOOG_BIND_EXPECTS_FUNCTION, pair.type.toString()));\n     }\n     // For some function types, we don't know enough to handle .bind specially.\n     if (boundFunType == null\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1762,
    "bugNodeStartChar": 68640,
    "bugNodeLength": 54,
    "fixLineNum": 1762,
    "fixNodeStartChar": 68640,
    "fixNodeLength": 76,
    "sourceBeforeFix": "JSError.make(boundFunNode,GOOG_BIND_EXPECTS_FUNCTION)",
    "sourceAfterFix": "JSError.make(boundFunNode,GOOG_BIND_EXPECTS_FUNCTION,pair.type.toString())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "b9d796bfae6fa9f1cc3d021210621b5d11a6d685",
    "fixCommitParentSHA1": "735a286970558c328092689b7a1e7896bf053544",
    "bugFilePath": "src/com/google/javascript/jscomp/PolymerPass.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/PolymerPass.java b/src/com/google/javascript/jscomp/PolymerPass.java\nindex 4637053..11d18a2 100644\n--- a/src/com/google/javascript/jscomp/PolymerPass.java\n+++ b/src/com/google/javascript/jscomp/PolymerPass.java\n@@ -606,7 +606,7 @@\n     addInterfaceExterns(cls, readOnlyProps);\n     removePropertyDocs(objLit);\n \n-    block.useSourceInfoFromForTree(exprRoot);\n+    block.useSourceInfoIfMissingFromForTree(exprRoot);\n     Node stmts = block.removeChildren();\n     Node parent = exprRoot.getParent();\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 609,
    "bugNodeStartChar": 22912,
    "bugNodeLength": 40,
    "fixLineNum": 609,
    "fixNodeStartChar": 22912,
    "fixNodeLength": 49,
    "sourceBeforeFix": "block.useSourceInfoFromForTree(exprRoot)",
    "sourceAfterFix": "block.useSourceInfoIfMissingFromForTree(exprRoot)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b9d796bfae6fa9f1cc3d021210621b5d11a6d685",
    "fixCommitParentSHA1": "735a286970558c328092689b7a1e7896bf053544",
    "bugFilePath": "src/com/google/javascript/jscomp/PolymerPass.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/PolymerPass.java b/src/com/google/javascript/jscomp/PolymerPass.java\nindex 4637053..11d18a2 100644\n--- a/src/com/google/javascript/jscomp/PolymerPass.java\n+++ b/src/com/google/javascript/jscomp/PolymerPass.java\n@@ -606,7 +606,7 @@\n     addInterfaceExterns(cls, readOnlyProps);\n     removePropertyDocs(objLit);\n \n-    block.useSourceInfoFromForTree(exprRoot);\n+    block.useSourceInfoIfMissingFromForTree(exprRoot);\n     Node stmts = block.removeChildren();\n     Node parent = exprRoot.getParent();\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 609,
    "bugNodeStartChar": 22912,
    "bugNodeLength": 40,
    "fixLineNum": 609,
    "fixNodeStartChar": 22912,
    "fixNodeLength": 49,
    "sourceBeforeFix": "block.useSourceInfoFromForTree(exprRoot)",
    "sourceAfterFix": "block.useSourceInfoIfMissingFromForTree(exprRoot)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "fdd6f8b54dccb215c8fe55e39b24fbbb5dd62a14",
    "fixCommitParentSHA1": "377cb2aea98f28237a4dff158f9d0e71ba884d89",
    "bugFilePath": "src/com/google/javascript/jscomp/Es6ToEs3Converter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Es6ToEs3Converter.java b/src/com/google/javascript/jscomp/Es6ToEs3Converter.java\nindex 6dfa7d8..f78f2bb 100644\n--- a/src/com/google/javascript/jscomp/Es6ToEs3Converter.java\n+++ b/src/com/google/javascript/jscomp/Es6ToEs3Converter.java\n@@ -744,7 +744,7 @@\n \n         JSTypeExpression existingType = membersToDeclare.get(member.getString());\n         if (existingType != null && !existingType.equals(typeExpr)) {\n-          compiler.report(JSError.make(member, CONFLICTING_GETTER_SETTER_TYPE));\n+          compiler.report(JSError.make(member, CONFLICTING_GETTER_SETTER_TYPE, member.getString()));\n         } else {\n           membersToDeclare.put(member.getString(), typeExpr);\n         }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 747,
    "bugNodeStartChar": 29077,
    "bugNodeLength": 52,
    "fixLineNum": 747,
    "fixNodeStartChar": 29077,
    "fixNodeLength": 72,
    "sourceBeforeFix": "JSError.make(member,CONFLICTING_GETTER_SETTER_TYPE)",
    "sourceAfterFix": "JSError.make(member,CONFLICTING_GETTER_SETTER_TYPE,member.getString())"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "e468368e908ffe056690c2399d9e0b59557af2d8",
    "fixCommitParentSHA1": "049a44c3a2a10cc6e1a7b3e21e434619aea4fa4d",
    "bugFilePath": "src/com/google/javascript/jscomp/NewTypeInference.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NewTypeInference.java b/src/com/google/javascript/jscomp/NewTypeInference.java\nindex 3917232..515b599 100644\n--- a/src/com/google/javascript/jscomp/NewTypeInference.java\n+++ b/src/com/google/javascript/jscomp/NewTypeInference.java\n@@ -3236,7 +3236,8 @@\n     if (NodeUtil.isFunctionBind(expr)) {\n       return true;\n     }\n-    if (!expr.isGetProp() || !expr.getLastChild().getString().equals(\"bind\")) {\n+    if (!expr.isGetProp() || !expr.isQualifiedName()\n+        || !expr.getLastChild().getString().equals(\"bind\")) {\n       return false;\n     }\n     Node recv = expr.getFirstChild();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 3239,
    "bugNodeStartChar": 128190,
    "bugNodeLength": 68,
    "fixLineNum": 3239,
    "fixNodeStartChar": 128190,
    "fixNodeLength": 103,
    "sourceBeforeFix": "!expr.isGetProp() || !expr.getLastChild().getString().equals(\"bind\")",
    "sourceAfterFix": "!expr.isGetProp() || !expr.isQualifiedName() || !expr.getLastChild().getString().equals(\"bind\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "204d9f571caab35a0adb72ffd87fd9c85a12300a",
    "fixCommitParentSHA1": "eb008892d5d730c4c3c14991ae19650d010f0547",
    "bugFilePath": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/JsMessageVisitor.java b/src/com/google/javascript/jscomp/JsMessageVisitor.java\nindex 157f1a0..f6bc02f 100644\n--- a/src/com/google/javascript/jscomp/JsMessageVisitor.java\n+++ b/src/com/google/javascript/jscomp/JsMessageVisitor.java\n@@ -746,7 +746,7 @@\n       if (!phNames.contains(phName)) {\n         throw new MalformedException(\n             \"Unrecognized message placeholder referenced: \" + phName,\n-            objLitNode);\n+            node);\n       }\n     }\n \n@@ -756,7 +756,7 @@\n       if (!usedPlaceholders.contains(phName)) {\n         throw new MalformedException(\n             \"Unused message placeholder: \" + phName,\n-            objLitNode);\n+            node);\n       }\n     }\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 747,
    "bugNodeStartChar": 25611,
    "bugNodeLength": 117,
    "fixLineNum": 747,
    "fixNodeStartChar": 25611,
    "fixNodeLength": 111,
    "sourceBeforeFix": "new MalformedException(\"Unrecognized message placeholder referenced: \" + phName,objLitNode)",
    "sourceAfterFix": "new MalformedException(\"Unrecognized message placeholder referenced: \" + phName,node)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "204d9f571caab35a0adb72ffd87fd9c85a12300a",
    "fixCommitParentSHA1": "eb008892d5d730c4c3c14991ae19650d010f0547",
    "bugFilePath": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/JsMessageVisitor.java b/src/com/google/javascript/jscomp/JsMessageVisitor.java\nindex 157f1a0..f6bc02f 100644\n--- a/src/com/google/javascript/jscomp/JsMessageVisitor.java\n+++ b/src/com/google/javascript/jscomp/JsMessageVisitor.java\n@@ -746,7 +746,7 @@\n       if (!phNames.contains(phName)) {\n         throw new MalformedException(\n             \"Unrecognized message placeholder referenced: \" + phName,\n-            objLitNode);\n+            node);\n       }\n     }\n \n@@ -756,7 +756,7 @@\n       if (!usedPlaceholders.contains(phName)) {\n         throw new MalformedException(\n             \"Unused message placeholder: \" + phName,\n-            objLitNode);\n+            node);\n       }\n     }\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 757,
    "bugNodeStartChar": 25932,
    "bugNodeLength": 100,
    "fixLineNum": 757,
    "fixNodeStartChar": 25932,
    "fixNodeLength": 94,
    "sourceBeforeFix": "new MalformedException(\"Unused message placeholder: \" + phName,objLitNode)",
    "sourceAfterFix": "new MalformedException(\"Unused message placeholder: \" + phName,node)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "eb008892d5d730c4c3c14991ae19650d010f0547",
    "fixCommitParentSHA1": "5bc9aae71e132be449e8b42d9624661d3e44650d",
    "bugFilePath": "src/com/google/javascript/jscomp/Es6RewriteGenerators.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Es6RewriteGenerators.java b/src/com/google/javascript/jscomp/Es6RewriteGenerators.java\nindex a21f677..fcb84c2 100644\n--- a/src/com/google/javascript/jscomp/Es6RewriteGenerators.java\n+++ b/src/com/google/javascript/jscomp/Es6RewriteGenerators.java\n@@ -979,7 +979,7 @@\n           break;\n         case Token.CASE:\n           if (controlCanExit(n.getFirstChild())) {\n-            compiler.report(JSError.make(currentStatement, Es6ToEs3Converter.CANNOT_CONVERT_YET,\n+            compiler.report(JSError.make(n, Es6ToEs3Converter.CANNOT_CONVERT_YET,\n               \"Case statements that contain yields\"));\n             return false;\n           }\n@@ -997,7 +997,7 @@\n         decomposer.exposeExpression(n);\n         compiler.reportCodeChange();\n       } else {\n-        compiler.report(JSError.make(currentStatement, Es6ToEs3Converter.CANNOT_CONVERT,\n+        compiler.report(JSError.make(n, Es6ToEs3Converter.CANNOT_CONVERT,\n           \"Undecomposable expression\"));\n       }\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 982,
    "bugNodeStartChar": 35074,
    "bugNodeLength": 121,
    "fixLineNum": 982,
    "fixNodeStartChar": 35074,
    "fixNodeLength": 106,
    "sourceBeforeFix": "JSError.make(currentStatement,Es6ToEs3Converter.CANNOT_CONVERT_YET,\"Case statements that contain yields\")",
    "sourceAfterFix": "JSError.make(n,Es6ToEs3Converter.CANNOT_CONVERT_YET,\"Case statements that contain yields\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "eb008892d5d730c4c3c14991ae19650d010f0547",
    "fixCommitParentSHA1": "5bc9aae71e132be449e8b42d9624661d3e44650d",
    "bugFilePath": "src/com/google/javascript/jscomp/Es6RewriteGenerators.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Es6RewriteGenerators.java b/src/com/google/javascript/jscomp/Es6RewriteGenerators.java\nindex a21f677..fcb84c2 100644\n--- a/src/com/google/javascript/jscomp/Es6RewriteGenerators.java\n+++ b/src/com/google/javascript/jscomp/Es6RewriteGenerators.java\n@@ -979,7 +979,7 @@\n           break;\n         case Token.CASE:\n           if (controlCanExit(n.getFirstChild())) {\n-            compiler.report(JSError.make(currentStatement, Es6ToEs3Converter.CANNOT_CONVERT_YET,\n+            compiler.report(JSError.make(n, Es6ToEs3Converter.CANNOT_CONVERT_YET,\n               \"Case statements that contain yields\"));\n             return false;\n           }\n@@ -997,7 +997,7 @@\n         decomposer.exposeExpression(n);\n         compiler.reportCodeChange();\n       } else {\n-        compiler.report(JSError.make(currentStatement, Es6ToEs3Converter.CANNOT_CONVERT,\n+        compiler.report(JSError.make(n, Es6ToEs3Converter.CANNOT_CONVERT,\n           \"Undecomposable expression\"));\n       }\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1000,
    "bugNodeStartChar": 35631,
    "bugNodeLength": 103,
    "fixLineNum": 1000,
    "fixNodeStartChar": 35631,
    "fixNodeLength": 88,
    "sourceBeforeFix": "JSError.make(currentStatement,Es6ToEs3Converter.CANNOT_CONVERT,\"Undecomposable expression\")",
    "sourceAfterFix": "JSError.make(n,Es6ToEs3Converter.CANNOT_CONVERT,\"Undecomposable expression\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "27212f298ec3ee50204e5169f61ba48702346450",
    "fixCommitParentSHA1": "9ead34ab2f450526f19a4f522abe53d36732ff4e",
    "bugFilePath": "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/VariableReferenceCheck.java b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\nindex 1f3e51a..dd69e0d 100644\n--- a/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n+++ b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n@@ -49,7 +49,7 @@\n       \"Redeclared variable: {0}\");\n \n   static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n-    DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\n+    DiagnosticType.error(\"AMBIGUOUS_FUNCTION_DECL\",\n         \"Ambiguous use of a named function: {0}.\");\n \n   static final DiagnosticType EARLY_REFERENCE_ERROR = DiagnosticType.error(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 52,
    "bugNodeStartChar": 2051,
    "bugNodeLength": 101,
    "fixLineNum": 52,
    "fixNodeStartChar": 2051,
    "fixNodeLength": 98,
    "sourceBeforeFix": "DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\"Ambiguous use of a named function: {0}.\")",
    "sourceAfterFix": "DiagnosticType.error(\"AMBIGUOUS_FUNCTION_DECL\",\"Ambiguous use of a named function: {0}.\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "27212f298ec3ee50204e5169f61ba48702346450",
    "fixCommitParentSHA1": "9ead34ab2f450526f19a4f522abe53d36732ff4e",
    "bugFilePath": "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/VariableReferenceCheck.java b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\nindex 1f3e51a..dd69e0d 100644\n--- a/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n+++ b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n@@ -49,7 +49,7 @@\n       \"Redeclared variable: {0}\");\n \n   static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n-    DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\n+    DiagnosticType.error(\"AMBIGUOUS_FUNCTION_DECL\",\n         \"Ambiguous use of a named function: {0}.\");\n \n   static final DiagnosticType EARLY_REFERENCE_ERROR = DiagnosticType.error(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 52,
    "bugNodeStartChar": 2051,
    "bugNodeLength": 101,
    "fixLineNum": 52,
    "fixNodeStartChar": 2051,
    "fixNodeLength": 98,
    "sourceBeforeFix": "DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\"Ambiguous use of a named function: {0}.\")",
    "sourceAfterFix": "DiagnosticType.error(\"AMBIGUOUS_FUNCTION_DECL\",\"Ambiguous use of a named function: {0}.\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "1fe531a4525bfc4a4138a0074d632eb79d1ce044",
    "fixCommitParentSHA1": "2d91d45d5053c6b643e57dd9fbc50703b52b6b3c",
    "bugFilePath": "src/com/google/javascript/jscomp/SourceFile.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/SourceFile.java b/src/com/google/javascript/jscomp/SourceFile.java\nindex aa30e29..650d772 100644\n--- a/src/com/google/javascript/jscomp/SourceFile.java\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n@@ -109,7 +109,7 @@\n       return;\n     }\n     try {\n-      String[] sourceLines = getCode().split(\"\\n\");\n+      String[] sourceLines = getCode().split(\"\\n\", -1);\n       lineOffsets = new int[sourceLines.length];\n       for (int ii = 1; ii < sourceLines.length; ++ii) {\n         lineOffsets[ii] =\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 112,
    "bugNodeStartChar": 3599,
    "bugNodeLength": 21,
    "fixLineNum": 112,
    "fixNodeStartChar": 3599,
    "fixNodeLength": 25,
    "sourceBeforeFix": "getCode().split(\"\\n\")",
    "sourceAfterFix": "getCode().split(\"\\n\",-1)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "9cc8d23483fe49c80ef1be463ceac670e00c37c7",
    "fixCommitParentSHA1": "5420fa6dd81e7240e98d361f8a506a9c069f1d7c",
    "bugFilePath": "src/com/google/javascript/jscomp/SourceMapInput.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/SourceMapInput.java b/src/com/google/javascript/jscomp/SourceMapInput.java\nindex 95c3244..11b9174 100644\n--- a/src/com/google/javascript/jscomp/SourceMapInput.java\n+++ b/src/com/google/javascript/jscomp/SourceMapInput.java\n@@ -32,7 +32,7 @@\n       Logger.getLogger(SourceMapInput.class.getName());\n \n   private SourceFile sourceFile;\n-  private SourceMapConsumerV3 parsedSourceMap = null;\n+  private volatile SourceMapConsumerV3 parsedSourceMap = null;\n \n   public SourceMapInput(SourceFile sourceFile) {\n     this.sourceFile = sourceFile;\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 35,
    "bugNodeStartChar": 1087,
    "bugNodeLength": 51,
    "fixLineNum": 35,
    "fixNodeStartChar": 1087,
    "fixNodeLength": 60,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "66"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "9fc02469522f77d08bd814f383c3dbf59977b39b",
    "fixCommitParentSHA1": "c63fc662e422a686a62f9d2e74e5360a69cb10b2",
    "bugFilePath": "src/com/google/javascript/jscomp/SourceMapInput.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/SourceMapInput.java b/src/com/google/javascript/jscomp/SourceMapInput.java\nindex 11b9174..95c3244 100644\n--- a/src/com/google/javascript/jscomp/SourceMapInput.java\n+++ b/src/com/google/javascript/jscomp/SourceMapInput.java\n@@ -32,7 +32,7 @@\n       Logger.getLogger(SourceMapInput.class.getName());\n \n   private SourceFile sourceFile;\n-  private volatile SourceMapConsumerV3 parsedSourceMap = null;\n+  private SourceMapConsumerV3 parsedSourceMap = null;\n \n   public SourceMapInput(SourceFile sourceFile) {\n     this.sourceFile = sourceFile;\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 35,
    "bugNodeStartChar": 1087,
    "bugNodeLength": 60,
    "fixLineNum": 35,
    "fixNodeStartChar": 1087,
    "fixNodeLength": 51,
    "sourceBeforeFix": "66",
    "sourceAfterFix": "2"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1311b037963f606ad2d2acb70f3141cddd7e6067",
    "fixCommitParentSHA1": "b3c4c6536b26208a869df690565b117bbafb75d5",
    "bugFilePath": "src/com/google/javascript/jscomp/SourceMapInput.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/SourceMapInput.java b/src/com/google/javascript/jscomp/SourceMapInput.java\nindex 95c3244..11b9174 100644\n--- a/src/com/google/javascript/jscomp/SourceMapInput.java\n+++ b/src/com/google/javascript/jscomp/SourceMapInput.java\n@@ -32,7 +32,7 @@\n       Logger.getLogger(SourceMapInput.class.getName());\n \n   private SourceFile sourceFile;\n-  private SourceMapConsumerV3 parsedSourceMap = null;\n+  private volatile SourceMapConsumerV3 parsedSourceMap = null;\n \n   public SourceMapInput(SourceFile sourceFile) {\n     this.sourceFile = sourceFile;\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 35,
    "bugNodeStartChar": 1087,
    "bugNodeLength": 51,
    "fixLineNum": 35,
    "fixNodeStartChar": 1087,
    "fixNodeLength": 60,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "66"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "27587f7deb81c340c8ffbbeffe38875a9e66406c",
    "fixCommitParentSHA1": "abf60bb668ff337441015477f3136d08f61cc055",
    "bugFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 49b74b5..02a1099 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1245,7 +1245,8 @@\n             interfaceHasProperty;\n         if (reportMissingOverride.isOn()\n             && !declaredOverride\n-            && interfaceHasProperty) {\n+            && interfaceHasProperty\n+            && !\"__proto__\".equals(propertyName)) {\n           // @override not present, but the property does override an interface\n           // property\n           compiler.report(t.makeError(n, reportMissingOverride,\n@@ -1271,7 +1272,8 @@\n     if (reportMissingOverride.isOn()\n         && !declaredOverride\n         && superClassHasDeclaredProperty\n-        && declaredLocally) {\n+        && declaredLocally\n+        && !\"__proto__\".equals(propertyName)) {\n       // @override not present, but the property does override a superclass\n       // property\n       compiler.report(t.makeError(n, reportMissingOverride,\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1246,
    "bugNodeStartChar": 43127,
    "bugNodeLength": 97,
    "fixLineNum": 1246,
    "fixNodeStartChar": 43127,
    "fixNodeLength": 146,
    "sourceBeforeFix": "reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty",
    "sourceAfterFix": "reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty&& !\"__proto__\".equals(propertyName)"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "27587f7deb81c340c8ffbbeffe38875a9e66406c",
    "fixCommitParentSHA1": "abf60bb668ff337441015477f3136d08f61cc055",
    "bugFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 49b74b5..02a1099 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1245,7 +1245,8 @@\n             interfaceHasProperty;\n         if (reportMissingOverride.isOn()\n             && !declaredOverride\n-            && interfaceHasProperty) {\n+            && interfaceHasProperty\n+            && !\"__proto__\".equals(propertyName)) {\n           // @override not present, but the property does override an interface\n           // property\n           compiler.report(t.makeError(n, reportMissingOverride,\n@@ -1271,7 +1272,8 @@\n     if (reportMissingOverride.isOn()\n         && !declaredOverride\n         && superClassHasDeclaredProperty\n-        && declaredLocally) {\n+        && declaredLocally\n+        && !\"__proto__\".equals(propertyName)) {\n       // @override not present, but the property does override a superclass\n       // property\n       compiler.report(t.makeError(n, reportMissingOverride,\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1271,
    "bugNodeStartChar": 44070,
    "bugNodeLength": 125,
    "fixLineNum": 1271,
    "fixNodeStartChar": 44070,
    "fixNodeLength": 170,
    "sourceBeforeFix": "reportMissingOverride.isOn() && !declaredOverride && superClassHasDeclaredProperty&& declaredLocally",
    "sourceAfterFix": "reportMissingOverride.isOn() && !declaredOverride && superClassHasDeclaredProperty&& declaredLocally&& !\"__proto__\".equals(propertyName)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "634fb738883042dd28f0f16330c3a796766d99d8",
    "fixCommitParentSHA1": "0ca8ade42b493c4d9168aa553af9760054ae0082",
    "bugFilePath": "src/com/google/javascript/jscomp/newtypes/FunctionType.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/newtypes/FunctionType.java b/src/com/google/javascript/jscomp/newtypes/FunctionType.java\nindex 7c091e6..7c7b819 100644\n--- a/src/com/google/javascript/jscomp/newtypes/FunctionType.java\n+++ b/src/com/google/javascript/jscomp/newtypes/FunctionType.java\n@@ -150,10 +150,10 @@\n   // We can't represent the theoretical top function, so we special-case\n   // TOP_FUNCTION below. However, the outcome is the same; if our top function\n   // is ever called, a warning is inevitable.\n-  public static final FunctionType TOP_FUNCTION = new FunctionType(\n+  static final FunctionType TOP_FUNCTION = new FunctionType(\n       // Call the constructor directly to set fields to null\n       null, null, null, null, null, null, null, null, false);\n-  public static final FunctionType LOOSE_TOP_FUNCTION = new FunctionType(\n+  private static final FunctionType LOOSE_TOP_FUNCTION = new FunctionType(\n       // Call the constructor directly to set fields to null\n       null, null, null, null, null, null, null, null, true);\n   // Corresponds to Function, which is a subtype and supertype of all functions.\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 153,
    "bugNodeStartChar": 5244,
    "bugNodeLength": 188,
    "fixLineNum": 153,
    "fixNodeStartChar": 5244,
    "fixNodeLength": 181,
    "sourceBeforeFix": "25",
    "sourceAfterFix": "24"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "0f272c58a561f35317608d843facd29b4b1f9247",
    "fixCommitParentSHA1": "fb974fa1069f1e185a67ccef4c92d6e04b1bb18a",
    "bugFilePath": "src/com/google/javascript/jscomp/CheckAccessControls.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex c05c172..78b30ad 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -77,7 +77,7 @@\n           \"Access to package-private property {0} of {1} not allowed here.\");\n \n   static final DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS =\n-      DiagnosticType.warning(\n+      DiagnosticType.error(\n           \"JSC_BAD_PRIVATE_GLOBAL_ACCESS\",\n           \"Access to private variable {0} not allowed outside file {1}.\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 80,
    "bugNodeStartChar": 3234,
    "bugNodeLength": 140,
    "fixLineNum": 80,
    "fixNodeStartChar": 3234,
    "fixNodeLength": 138,
    "sourceBeforeFix": "DiagnosticType.warning(\"JSC_BAD_PRIVATE_GLOBAL_ACCESS\",\"Access to private variable {0} not allowed outside file {1}.\")",
    "sourceAfterFix": "DiagnosticType.error(\"JSC_BAD_PRIVATE_GLOBAL_ACCESS\",\"Access to private variable {0} not allowed outside file {1}.\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0f272c58a561f35317608d843facd29b4b1f9247",
    "fixCommitParentSHA1": "fb974fa1069f1e185a67ccef4c92d6e04b1bb18a",
    "bugFilePath": "src/com/google/javascript/jscomp/CheckAccessControls.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex c05c172..78b30ad 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -77,7 +77,7 @@\n           \"Access to package-private property {0} of {1} not allowed here.\");\n \n   static final DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS =\n-      DiagnosticType.warning(\n+      DiagnosticType.error(\n           \"JSC_BAD_PRIVATE_GLOBAL_ACCESS\",\n           \"Access to private variable {0} not allowed outside file {1}.\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 80,
    "bugNodeStartChar": 3234,
    "bugNodeLength": 140,
    "fixLineNum": 80,
    "fixNodeStartChar": 3234,
    "fixNodeLength": 138,
    "sourceBeforeFix": "DiagnosticType.warning(\"JSC_BAD_PRIVATE_GLOBAL_ACCESS\",\"Access to private variable {0} not allowed outside file {1}.\")",
    "sourceAfterFix": "DiagnosticType.error(\"JSC_BAD_PRIVATE_GLOBAL_ACCESS\",\"Access to private variable {0} not allowed outside file {1}.\")"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "818764ab9f6ca06949b523f32080719c520c926b",
    "fixCommitParentSHA1": "29193f1bb185feea223fecdd57540687e0e7cd8e",
    "bugFilePath": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java b/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\nindex c42ed55..49062c9 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\n@@ -62,9 +62,9 @@\n class UnionTypeBuilder implements Serializable {\n   private static final long serialVersionUID = 1L;\n \n-  // If the best we can do is say \"this object is one of twenty things\",\n+  // If the best we can do is say \"this object is one of thirty things\",\n   // then we should just give up and admit that we have no clue.\n-  private static final int DEFAULT_MAX_UNION_SIZE = 20;\n+  private static final int DEFAULT_MAX_UNION_SIZE = 30;\n \n   private final JSTypeRegistry registry;\n   private final List<JSType> alternates = Lists.newArrayList();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 67,
    "bugNodeStartChar": 2559,
    "bugNodeLength": 27,
    "fixLineNum": 67,
    "fixNodeStartChar": 2559,
    "fixNodeLength": 27,
    "sourceBeforeFix": "DEFAULT_MAX_UNION_SIZE=20",
    "sourceAfterFix": "DEFAULT_MAX_UNION_SIZE=30"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "d1bb887561bf3818d4a0f6964359786212a01d63",
    "fixCommitParentSHA1": "6e6e24bce6b0075bf1aaa819d64cb528435bd510",
    "bugFilePath": "src/com/google/javascript/jscomp/GlobalTypeInfo.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/GlobalTypeInfo.java b/src/com/google/javascript/jscomp/GlobalTypeInfo.java\nindex d94399c..3bcfbf6 100644\n--- a/src/com/google/javascript/jscomp/GlobalTypeInfo.java\n+++ b/src/com/google/javascript/jscomp/GlobalTypeInfo.java\n@@ -1509,11 +1509,10 @@\n             } else if (ctorType.isStruct() && !parentClass.isStruct()) {\n               warnings.add(JSError.make(\n                   declNode, TypeCheck.CONFLICTING_SHAPE_TYPE,\n-                      className, \"struct\", \"struct\"));\n+                      \"struct\", className));\n             } else if (ctorType.isDict() && !parentClass.isDict()) {\n               warnings.add(JSError.make(\n-                  declNode, TypeCheck.CONFLICTING_SHAPE_TYPE, className,\n-                  \"dict\", \"dict\"));\n+                  declNode, TypeCheck.CONFLICTING_SHAPE_TYPE, \"dict\", className));\n             }\n           }\n           if (ctorType.isDict() && !implementedIntfs.isEmpty()) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1510,
    "bugNodeStartChar": 60044,
    "bugNodeLength": 128,
    "fixLineNum": 1510,
    "fixNodeStartChar": 60044,
    "fixNodeLength": 118,
    "sourceBeforeFix": "JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,className,\"struct\",\"struct\")",
    "sourceAfterFix": "JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,\"struct\",className)"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "d1bb887561bf3818d4a0f6964359786212a01d63",
    "fixCommitParentSHA1": "6e6e24bce6b0075bf1aaa819d64cb528435bd510",
    "bugFilePath": "src/com/google/javascript/jscomp/GlobalTypeInfo.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/GlobalTypeInfo.java b/src/com/google/javascript/jscomp/GlobalTypeInfo.java\nindex d94399c..3bcfbf6 100644\n--- a/src/com/google/javascript/jscomp/GlobalTypeInfo.java\n+++ b/src/com/google/javascript/jscomp/GlobalTypeInfo.java\n@@ -1509,11 +1509,10 @@\n             } else if (ctorType.isStruct() && !parentClass.isStruct()) {\n               warnings.add(JSError.make(\n                   declNode, TypeCheck.CONFLICTING_SHAPE_TYPE,\n-                      className, \"struct\", \"struct\"));\n+                      \"struct\", className));\n             } else if (ctorType.isDict() && !parentClass.isDict()) {\n               warnings.add(JSError.make(\n-                  declNode, TypeCheck.CONFLICTING_SHAPE_TYPE, className,\n-                  \"dict\", \"dict\"));\n+                  declNode, TypeCheck.CONFLICTING_SHAPE_TYPE, \"dict\", className));\n             }\n           }\n           if (ctorType.isDict() && !implementedIntfs.isEmpty()) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1514,
    "bugNodeStartChar": 60271,
    "bugNodeLength": 120,
    "fixLineNum": 1514,
    "fixNodeStartChar": 60271,
    "fixNodeLength": 94,
    "sourceBeforeFix": "JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,className,\"dict\",\"dict\")",
    "sourceAfterFix": "JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,\"dict\",className)"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "6442298e28c835ed3add70f22bc193c31bb200f4",
    "fixCommitParentSHA1": "39199d8acf19a1897f5b311d16bfb2f0814d8c4e",
    "bugFilePath": "src/com/google/javascript/jscomp/NewTypeInference.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NewTypeInference.java b/src/com/google/javascript/jscomp/NewTypeInference.java\nindex 53de964..83962b9 100644\n--- a/src/com/google/javascript/jscomp/NewTypeInference.java\n+++ b/src/com/google/javascript/jscomp/NewTypeInference.java\n@@ -2560,7 +2560,7 @@\n   private EnvTypePair analyzeCallNodeArgumentsBwd(\n       Node callNode, TypeEnv outEnv) {\n     TypeEnv env = outEnv;\n-    for (int i = callNode.getChildCount() - 1; i >= 0; i--) {\n+    for (int i = callNode.getChildCount() - 1; i > 0; i--) {\n       Node arg = callNode.getChildAtIndex(i);\n       env = analyzeExprBwd(arg, env).env;\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 2563,
    "bugNodeStartChar": 102347,
    "bugNodeLength": 6,
    "fixLineNum": 2563,
    "fixNodeStartChar": 102347,
    "fixNodeLength": 5,
    "sourceBeforeFix": "i >= 0",
    "sourceAfterFix": "i > 0"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "da2c1203899f562a031ca28e7ac53903474cc759",
    "fixCommitParentSHA1": "f6929a64bbb7068999dafed4f04ccfb1fa09013b",
    "bugFilePath": "src/com/google/javascript/jscomp/newtypes/JSType.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/newtypes/JSType.java b/src/com/google/javascript/jscomp/newtypes/JSType.java\nindex d78095f..dd65a12 100644\n--- a/src/com/google/javascript/jscomp/newtypes/JSType.java\n+++ b/src/com/google/javascript/jscomp/newtypes/JSType.java\n@@ -389,7 +389,8 @@\n   }\n \n   public JSType substituteGenerics(Map<String, JSType> concreteTypes) {\n-    if (isTop() || isUnknown()) {\n+    if (isTop() || isUnknown()\n+        || objs == null && typeVar == null) {\n       return this;\n     }\n     ImmutableSet<ObjectType> newObjs = null;\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 392,
    "bugNodeStartChar": 12204,
    "bugNodeLength": 22,
    "fixLineNum": 392,
    "fixNodeStartChar": 12204,
    "fixNodeLength": 65,
    "sourceBeforeFix": "isTop() || isUnknown()",
    "sourceAfterFix": "isTop() || isUnknown() || objs == null && typeVar == null"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "66818467b26ea9aecf50fc0a3448b1eb9aac74f0",
    "fixCommitParentSHA1": "a2d924bdc4928f8591ebe1d4f7689a9240d3402b",
    "bugFilePath": "src/com/google/javascript/jscomp/ScopedAliases.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 0b74104..13b7046 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -208,7 +208,7 @@\n     public abstract void applyAlias();\n   }\n \n-  private class AliasedNode extends AliasUsage {\n+  private static class AliasedNode extends AliasUsage {\n     AliasedNode(Var aliasVar, Node aliasReference) {\n       super(aliasVar, aliasReference);\n     }\n@@ -222,7 +222,7 @@\n     }\n   }\n \n-  private class AliasedTypeNode extends AliasUsage {\n+  private static class AliasedTypeNode extends AliasUsage {\n     AliasedTypeNode(Var aliasVar, Node aliasReference) {\n       super(aliasVar, aliasReference);\n     }\n@@ -459,7 +459,7 @@\n         aliasVar.getInitialValue().getQualifiedName();\n       transformation.addAlias(name, qualifiedName);\n \n-      int rootIndex = qualifiedName.indexOf(\".\");\n+      int rootIndex = qualifiedName.indexOf('.');\n       if (rootIndex != -1) {\n         String qNameRoot = qualifiedName.substring(0, rootIndex);\n         if (!aliases.containsKey(qNameRoot)) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 211,
    "bugNodeStartChar": 7420,
    "bugNodeLength": 447,
    "fixLineNum": 211,
    "fixNodeStartChar": 7420,
    "fixNodeLength": 454,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "66818467b26ea9aecf50fc0a3448b1eb9aac74f0",
    "fixCommitParentSHA1": "a2d924bdc4928f8591ebe1d4f7689a9240d3402b",
    "bugFilePath": "src/com/google/javascript/jscomp/ScopedAliases.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 0b74104..13b7046 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -208,7 +208,7 @@\n     public abstract void applyAlias();\n   }\n \n-  private class AliasedNode extends AliasUsage {\n+  private static class AliasedNode extends AliasUsage {\n     AliasedNode(Var aliasVar, Node aliasReference) {\n       super(aliasVar, aliasReference);\n     }\n@@ -222,7 +222,7 @@\n     }\n   }\n \n-  private class AliasedTypeNode extends AliasUsage {\n+  private static class AliasedTypeNode extends AliasUsage {\n     AliasedTypeNode(Var aliasVar, Node aliasReference) {\n       super(aliasVar, aliasReference);\n     }\n@@ -459,7 +459,7 @@\n         aliasVar.getInitialValue().getQualifiedName();\n       transformation.addAlias(name, qualifiedName);\n \n-      int rootIndex = qualifiedName.indexOf(\".\");\n+      int rootIndex = qualifiedName.indexOf('.');\n       if (rootIndex != -1) {\n         String qNameRoot = qualifiedName.substring(0, rootIndex);\n         if (!aliases.containsKey(qNameRoot)) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 225,
    "bugNodeStartChar": 7871,
    "bugNodeLength": 668,
    "fixLineNum": 225,
    "fixNodeStartChar": 7871,
    "fixNodeLength": 675,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "592fdd6723ee509f09ec2f37d2f2c7e187d305c5",
    "fixCommitParentSHA1": "fdf43f66dbfad794b0365b3c634f47ee8fefef3c",
    "bugFilePath": "src/com/google/javascript/jscomp/newtypes/ObjectType.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/newtypes/ObjectType.java b/src/com/google/javascript/jscomp/newtypes/ObjectType.java\nindex 628e379..09a6da0 100644\n--- a/src/com/google/javascript/jscomp/newtypes/ObjectType.java\n+++ b/src/com/google/javascript/jscomp/newtypes/ObjectType.java\n@@ -434,7 +434,7 @@\n         resultNominalType,\n         meetPropsHelper(false, resultNominalType, obj1.props, obj2.props),\n         FunctionType.meet(obj1.fn, obj2.fn),\n-        obj1.isLoose || obj2.isLoose,\n+        obj1.isLoose && obj2.isLoose,\n         ObjectKind.meet(obj1.objectKind, obj2.objectKind));\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 437,
    "bugNodeStartChar": 15074,
    "bugNodeLength": 28,
    "fixLineNum": 437,
    "fixNodeStartChar": 15074,
    "fixNodeLength": 28,
    "sourceBeforeFix": "obj1.isLoose || obj2.isLoose",
    "sourceAfterFix": "obj1.isLoose && obj2.isLoose"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "a9aeaa326a54b7bb8acbd719ea64bf062e101127",
    "fixCommitParentSHA1": "5e4cd715a6102ae787897282c908af1c88f0ec72",
    "bugFilePath": "src/com/google/javascript/jscomp/InstrumentMemoryAllocPass.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/InstrumentMemoryAllocPass.java b/src/com/google/javascript/jscomp/InstrumentMemoryAllocPass.java\nindex 4a9a52c..97833d6 100644\n--- a/src/com/google/javascript/jscomp/InstrumentMemoryAllocPass.java\n+++ b/src/com/google/javascript/jscomp/InstrumentMemoryAllocPass.java\n@@ -38,7 +38,7 @@\n \n   final AbstractCompiler compiler;\n \n-  private static int newSiteId = 1; // 0 is reserved for 'total'\n+  private int newSiteId = 1; // 0 is reserved for 'total'\n \n   static final String JS_INSTRUMENT_ALLOCATION_CODE =\n       \"var __allocStats; \\n\" +\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 41,
    "bugNodeStartChar": 1550,
    "bugNodeLength": 33,
    "fixLineNum": 41,
    "fixNodeStartChar": 1550,
    "fixNodeLength": 26,
    "sourceBeforeFix": "10",
    "sourceAfterFix": "2"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bb893266036cbc7f0b434794d4fd9306513357be",
    "fixCommitParentSHA1": "471f3944363b0de94f0edbcffbb06205a67565b4",
    "bugFilePath": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DiagnosticGroup.java b/src/com/google/javascript/jscomp/DiagnosticGroup.java\nindex c03fac3..08c12b6 100644\n--- a/src/com/google/javascript/jscomp/DiagnosticGroup.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroup.java\n@@ -67,7 +67,7 @@\n       Maps.newHashMap();\n \n   /** Create a diagnostic group that matches only the given type. */\n-  public static DiagnosticGroup forType(DiagnosticType type) {\n+  public static synchronized DiagnosticGroup forType(DiagnosticType type) {\n     if (!singletons.containsKey(type)) {\n       singletons.put(type, new DiagnosticGroup(type));\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 69,
    "bugNodeStartChar": 2068,
    "bugNodeLength": 268,
    "fixLineNum": 69,
    "fixNodeStartChar": 2068,
    "fixNodeLength": 281,
    "sourceBeforeFix": "9",
    "sourceAfterFix": "41"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6f981f77e5bd9e2eecbd851a2a02933cdb9af0d8",
    "fixCommitParentSHA1": "450f0f6ef5d9b1bea2bc556e6029fa4f2f8554a2",
    "bugFilePath": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java b/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java\nindex e6e6f8c..8c0b429 100644\n--- a/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java\n+++ b/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java\n@@ -205,7 +205,7 @@\n   public void testGoogIsArray2() throws Exception {\n     testClosureFunction(\"goog.isArray\",\n         ALL_TYPE,\n-        ALL_TYPE, // TODO(johnlenz): should be ARRAY_TYPE?\n+        ARRAY_TYPE,\n         ALL_TYPE);\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 206,
    "bugNodeStartChar": 6110,
    "bugNodeLength": 130,
    "fixLineNum": 206,
    "fixNodeStartChar": 6110,
    "fixNodeLength": 91,
    "sourceBeforeFix": "testClosureFunction(\"goog.isArray\",ALL_TYPE,ALL_TYPE,ALL_TYPE)",
    "sourceAfterFix": "testClosureFunction(\"goog.isArray\",ALL_TYPE,ARRAY_TYPE,ALL_TYPE)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "541a33ea309a08c82988d48604492f56746c0089",
    "fixCommitParentSHA1": "fbfbb2b27cbe72e9c8ab4d34d22c21d52ca1d150",
    "bugFilePath": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/RhinoErrorReporter.java b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\nindex cd3f305..88ea3fa 100644\n--- a/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n@@ -53,7 +53,7 @@\n       DiagnosticType.warning(\"JSC_BAD_JSDOC_ANNOTATION\", \"Parse error. {0}\");\n \n   static final DiagnosticType MISPLACED_TYPE_ANNOTATION =\n-      DiagnosticType.disabled(\"JSC_MISPLACED_TYPE_ANNOTATION\",\n+      DiagnosticType.warning(\"JSC_MISPLACED_TYPE_ANNOTATION\",\n           \"Type annotations are not allowed here. \" +\n           \"Are you missing parentheses?\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 56,
    "bugNodeStartChar": 2049,
    "bugNodeLength": 152,
    "fixLineNum": 56,
    "fixNodeStartChar": 2049,
    "fixNodeLength": 151,
    "sourceBeforeFix": "DiagnosticType.disabled(\"JSC_MISPLACED_TYPE_ANNOTATION\",\"Type annotations are not allowed here. \" + \"Are you missing parentheses?\")",
    "sourceAfterFix": "DiagnosticType.warning(\"JSC_MISPLACED_TYPE_ANNOTATION\",\"Type annotations are not allowed here. \" + \"Are you missing parentheses?\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "541a33ea309a08c82988d48604492f56746c0089",
    "fixCommitParentSHA1": "fbfbb2b27cbe72e9c8ab4d34d22c21d52ca1d150",
    "bugFilePath": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/RhinoErrorReporter.java b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\nindex cd3f305..88ea3fa 100644\n--- a/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n@@ -53,7 +53,7 @@\n       DiagnosticType.warning(\"JSC_BAD_JSDOC_ANNOTATION\", \"Parse error. {0}\");\n \n   static final DiagnosticType MISPLACED_TYPE_ANNOTATION =\n-      DiagnosticType.disabled(\"JSC_MISPLACED_TYPE_ANNOTATION\",\n+      DiagnosticType.warning(\"JSC_MISPLACED_TYPE_ANNOTATION\",\n           \"Type annotations are not allowed here. \" +\n           \"Are you missing parentheses?\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 56,
    "bugNodeStartChar": 2049,
    "bugNodeLength": 152,
    "fixLineNum": 56,
    "fixNodeStartChar": 2049,
    "fixNodeLength": 151,
    "sourceBeforeFix": "DiagnosticType.disabled(\"JSC_MISPLACED_TYPE_ANNOTATION\",\"Type annotations are not allowed here. \" + \"Are you missing parentheses?\")",
    "sourceAfterFix": "DiagnosticType.warning(\"JSC_MISPLACED_TYPE_ANNOTATION\",\"Type annotations are not allowed here. \" + \"Are you missing parentheses?\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0cf74c1eed6009d29c02dbd6c0a831af448e8915",
    "fixCommitParentSHA1": "f58f7523c285197df175ad780dbe6288c67bc08c",
    "bugFilePath": "src/com/google/javascript/jscomp/Tracer.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Tracer.java b/src/com/google/javascript/jscomp/Tracer.java\nindex 6e19504..a3b0d7e 100644\n--- a/src/com/google/javascript/jscomp/Tracer.java\n+++ b/src/com/google/javascript/jscomp/Tracer.java\n@@ -967,7 +967,7 @@\n \n   /** Remove any ThreadTrace associated with the current thread */\n   static void clearThreadTrace() {\n-    traces.set(null);\n+    traces.remove();\n   }\n \n   /**\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 970,
    "bugNodeStartChar": 30890,
    "bugNodeLength": 16,
    "fixLineNum": 970,
    "fixNodeStartChar": 30890,
    "fixNodeLength": 15,
    "sourceBeforeFix": "traces.set(null)",
    "sourceAfterFix": "traces.remove()"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550",
    "fixCommitParentSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691",
    "bugFilePath": "src/com/google/javascript/jscomp/CleanupPasses.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CleanupPasses.java b/src/com/google/javascript/jscomp/CleanupPasses.java\nindex f283e6c..0c4ab7f 100644\n--- a/src/com/google/javascript/jscomp/CleanupPasses.java\n+++ b/src/com/google/javascript/jscomp/CleanupPasses.java\n@@ -51,7 +51,7 @@\n   }\n \n   @Override\n-  State getIntermediateState() {\n+  protected State getIntermediateState() {\n     return state;\n   }\n \n@@ -61,7 +61,7 @@\n   }\n \n   @Override\n-  void setIntermediateState(State state) {\n+  protected void setIntermediateState(State state) {\n     this.state = state;\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 53,
    "bugNodeStartChar": 1654,
    "bugNodeLength": 64,
    "fixLineNum": 53,
    "fixNodeStartChar": 1654,
    "fixNodeLength": 74,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "4"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550",
    "fixCommitParentSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691",
    "bugFilePath": "src/com/google/javascript/jscomp/CleanupPasses.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CleanupPasses.java b/src/com/google/javascript/jscomp/CleanupPasses.java\nindex f283e6c..0c4ab7f 100644\n--- a/src/com/google/javascript/jscomp/CleanupPasses.java\n+++ b/src/com/google/javascript/jscomp/CleanupPasses.java\n@@ -51,7 +51,7 @@\n   }\n \n   @Override\n-  State getIntermediateState() {\n+  protected State getIntermediateState() {\n     return state;\n   }\n \n@@ -61,7 +61,7 @@\n   }\n \n   @Override\n-  void setIntermediateState(State state) {\n+  protected void setIntermediateState(State state) {\n     this.state = state;\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 63,
    "bugNodeStartChar": 1821,
    "bugNodeLength": 80,
    "fixLineNum": 63,
    "fixNodeStartChar": 1821,
    "fixNodeLength": 90,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "4"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550",
    "fixCommitParentSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 671e66b..1bb44bf 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -144,7 +144,7 @@\n   }\n \n   @Override\n-  State getIntermediateState() {\n+  protected State getIntermediateState() {\n     return new State(\n         cssNames == null ? null : Maps.newHashMap(cssNames),\n         exportedNames == null ? null :\n@@ -154,7 +154,7 @@\n   }\n \n   @Override\n-  void setIntermediateState(State state) {\n+  protected void setIntermediateState(State state) {\n     this.cssNames = state.cssNames == null ? null :\n         Maps.newHashMap(state.cssNames);\n     this.exportedNames = state.exportedNames == null ? null :\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 146,
    "bugNodeStartChar": 5234,
    "bugNodeLength": 359,
    "fixLineNum": 146,
    "fixNodeStartChar": 5234,
    "fixNodeLength": 369,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "4"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550",
    "fixCommitParentSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 671e66b..1bb44bf 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -144,7 +144,7 @@\n   }\n \n   @Override\n-  State getIntermediateState() {\n+  protected State getIntermediateState() {\n     return new State(\n         cssNames == null ? null : Maps.newHashMap(cssNames),\n         exportedNames == null ? null :\n@@ -154,7 +154,7 @@\n   }\n \n   @Override\n-  void setIntermediateState(State state) {\n+  protected void setIntermediateState(State state) {\n     this.cssNames = state.cssNames == null ? null :\n         Maps.newHashMap(state.cssNames);\n     this.exportedNames = state.exportedNames == null ? null :\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 156,
    "bugNodeStartChar": 5597,
    "bugNodeLength": 605,
    "fixLineNum": 156,
    "fixNodeStartChar": 5597,
    "fixNodeLength": 615,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "4"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550",
    "fixCommitParentSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691",
    "bugFilePath": "src/com/google/javascript/jscomp/PassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/PassConfig.java b/src/com/google/javascript/jscomp/PassConfig.java\nindex 19ffdd7..95f04e0 100644\n--- a/src/com/google/javascript/jscomp/PassConfig.java\n+++ b/src/com/google/javascript/jscomp/PassConfig.java\n@@ -224,13 +224,13 @@\n    * Get intermediate state for a running pass config, so it can\n    * be paused and started again later.\n    */\n-  abstract State getIntermediateState();\n+  protected abstract State getIntermediateState();\n \n   /**\n    * Set the intermediate state for a pass config, to restart\n    * a compilation process that had been previously paused.\n    */\n-  abstract void setIntermediateState(State state);\n+  protected abstract void setIntermediateState(State state);\n \n   /**\n    * An implementation of PassConfig that just proxies all its method calls\n@@ -261,11 +261,11 @@\n       return delegate.getTopScope();\n     }\n \n-    @Override State getIntermediateState() {\n+    @Override protected State getIntermediateState() {\n       return delegate.getIntermediateState();\n     }\n \n-    @Override void setIntermediateState(State state) {\n+    @Override protected void setIntermediateState(State state) {\n       delegate.setIntermediateState(state);\n     }\n   }\n@@ -273,7 +273,7 @@\n   /**\n    * Intermediate state for a running pass configuration.\n    */\n-  static class State implements Serializable {\n+  public static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n \n     final Map<String, Integer> cssNames;\n@@ -286,7 +286,7 @@\n     final FunctionNames functionNames;\n     final String idGeneratorMap;\n \n-    State(Map<String, Integer> cssNames, Set<String> exportedNames,\n+    public State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 223,
    "bugNodeStartChar": 6687,
    "bugNodeLength": 155,
    "fixLineNum": 223,
    "fixNodeStartChar": 6687,
    "fixNodeLength": 165,
    "sourceBeforeFix": "1024",
    "sourceAfterFix": "1028"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550",
    "fixCommitParentSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691",
    "bugFilePath": "src/com/google/javascript/jscomp/PassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/PassConfig.java b/src/com/google/javascript/jscomp/PassConfig.java\nindex 19ffdd7..95f04e0 100644\n--- a/src/com/google/javascript/jscomp/PassConfig.java\n+++ b/src/com/google/javascript/jscomp/PassConfig.java\n@@ -224,13 +224,13 @@\n    * Get intermediate state for a running pass config, so it can\n    * be paused and started again later.\n    */\n-  abstract State getIntermediateState();\n+  protected abstract State getIntermediateState();\n \n   /**\n    * Set the intermediate state for a pass config, to restart\n    * a compilation process that had been previously paused.\n    */\n-  abstract void setIntermediateState(State state);\n+  protected abstract void setIntermediateState(State state);\n \n   /**\n    * An implementation of PassConfig that just proxies all its method calls\n@@ -261,11 +261,11 @@\n       return delegate.getTopScope();\n     }\n \n-    @Override State getIntermediateState() {\n+    @Override protected State getIntermediateState() {\n       return delegate.getIntermediateState();\n     }\n \n-    @Override void setIntermediateState(State state) {\n+    @Override protected void setIntermediateState(State state) {\n       delegate.setIntermediateState(state);\n     }\n   }\n@@ -273,7 +273,7 @@\n   /**\n    * Intermediate state for a running pass configuration.\n    */\n-  static class State implements Serializable {\n+  public static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n \n     final Map<String, Integer> cssNames;\n@@ -286,7 +286,7 @@\n     final FunctionNames functionNames;\n     final String idGeneratorMap;\n \n-    State(Map<String, Integer> cssNames, Set<String> exportedNames,\n+    public State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 229,
    "bugNodeStartChar": 6846,
    "bugNodeLength": 182,
    "fixLineNum": 229,
    "fixNodeStartChar": 6846,
    "fixNodeLength": 192,
    "sourceBeforeFix": "1024",
    "sourceAfterFix": "1028"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550",
    "fixCommitParentSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691",
    "bugFilePath": "src/com/google/javascript/jscomp/PassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/PassConfig.java b/src/com/google/javascript/jscomp/PassConfig.java\nindex 19ffdd7..95f04e0 100644\n--- a/src/com/google/javascript/jscomp/PassConfig.java\n+++ b/src/com/google/javascript/jscomp/PassConfig.java\n@@ -224,13 +224,13 @@\n    * Get intermediate state for a running pass config, so it can\n    * be paused and started again later.\n    */\n-  abstract State getIntermediateState();\n+  protected abstract State getIntermediateState();\n \n   /**\n    * Set the intermediate state for a pass config, to restart\n    * a compilation process that had been previously paused.\n    */\n-  abstract void setIntermediateState(State state);\n+  protected abstract void setIntermediateState(State state);\n \n   /**\n    * An implementation of PassConfig that just proxies all its method calls\n@@ -261,11 +261,11 @@\n       return delegate.getTopScope();\n     }\n \n-    @Override State getIntermediateState() {\n+    @Override protected State getIntermediateState() {\n       return delegate.getIntermediateState();\n     }\n \n-    @Override void setIntermediateState(State state) {\n+    @Override protected void setIntermediateState(State state) {\n       delegate.setIntermediateState(state);\n     }\n   }\n@@ -273,7 +273,7 @@\n   /**\n    * Intermediate state for a running pass configuration.\n    */\n-  static class State implements Serializable {\n+  public static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n \n     final Map<String, Integer> cssNames;\n@@ -286,7 +286,7 @@\n     final FunctionNames functionNames;\n     final String idGeneratorMap;\n \n-    State(Map<String, Integer> cssNames, Set<String> exportedNames,\n+    public State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 264,
    "bugNodeStartChar": 7763,
    "bugNodeLength": 92,
    "fixLineNum": 264,
    "fixNodeStartChar": 7763,
    "fixNodeLength": 102,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "4"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550",
    "fixCommitParentSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691",
    "bugFilePath": "src/com/google/javascript/jscomp/PassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/PassConfig.java b/src/com/google/javascript/jscomp/PassConfig.java\nindex 19ffdd7..95f04e0 100644\n--- a/src/com/google/javascript/jscomp/PassConfig.java\n+++ b/src/com/google/javascript/jscomp/PassConfig.java\n@@ -224,13 +224,13 @@\n    * Get intermediate state for a running pass config, so it can\n    * be paused and started again later.\n    */\n-  abstract State getIntermediateState();\n+  protected abstract State getIntermediateState();\n \n   /**\n    * Set the intermediate state for a pass config, to restart\n    * a compilation process that had been previously paused.\n    */\n-  abstract void setIntermediateState(State state);\n+  protected abstract void setIntermediateState(State state);\n \n   /**\n    * An implementation of PassConfig that just proxies all its method calls\n@@ -261,11 +261,11 @@\n       return delegate.getTopScope();\n     }\n \n-    @Override State getIntermediateState() {\n+    @Override protected State getIntermediateState() {\n       return delegate.getIntermediateState();\n     }\n \n-    @Override void setIntermediateState(State state) {\n+    @Override protected void setIntermediateState(State state) {\n       delegate.setIntermediateState(state);\n     }\n   }\n@@ -273,7 +273,7 @@\n   /**\n    * Intermediate state for a running pass configuration.\n    */\n-  static class State implements Serializable {\n+  public static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n \n     final Map<String, Integer> cssNames;\n@@ -286,7 +286,7 @@\n     final FunctionNames functionNames;\n     final String idGeneratorMap;\n \n-    State(Map<String, Integer> cssNames, Set<String> exportedNames,\n+    public State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 268,
    "bugNodeStartChar": 7861,
    "bugNodeLength": 100,
    "fixLineNum": 268,
    "fixNodeStartChar": 7861,
    "fixNodeLength": 110,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "4"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550",
    "fixCommitParentSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691",
    "bugFilePath": "src/com/google/javascript/jscomp/PassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/PassConfig.java b/src/com/google/javascript/jscomp/PassConfig.java\nindex 19ffdd7..95f04e0 100644\n--- a/src/com/google/javascript/jscomp/PassConfig.java\n+++ b/src/com/google/javascript/jscomp/PassConfig.java\n@@ -224,13 +224,13 @@\n    * Get intermediate state for a running pass config, so it can\n    * be paused and started again later.\n    */\n-  abstract State getIntermediateState();\n+  protected abstract State getIntermediateState();\n \n   /**\n    * Set the intermediate state for a pass config, to restart\n    * a compilation process that had been previously paused.\n    */\n-  abstract void setIntermediateState(State state);\n+  protected abstract void setIntermediateState(State state);\n \n   /**\n    * An implementation of PassConfig that just proxies all its method calls\n@@ -261,11 +261,11 @@\n       return delegate.getTopScope();\n     }\n \n-    @Override State getIntermediateState() {\n+    @Override protected State getIntermediateState() {\n       return delegate.getIntermediateState();\n     }\n \n-    @Override void setIntermediateState(State state) {\n+    @Override protected void setIntermediateState(State state) {\n       delegate.setIntermediateState(state);\n     }\n   }\n@@ -273,7 +273,7 @@\n   /**\n    * Intermediate state for a running pass configuration.\n    */\n-  static class State implements Serializable {\n+  public static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n \n     final Map<String, Integer> cssNames;\n@@ -286,7 +286,7 @@\n     final FunctionNames functionNames;\n     final String idGeneratorMap;\n \n-    State(Map<String, Integer> cssNames, Set<String> exportedNames,\n+    public State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 273,
    "bugNodeStartChar": 7969,
    "bugNodeLength": 1287,
    "fixLineNum": 273,
    "fixNodeStartChar": 7969,
    "fixNodeLength": 1294,
    "sourceBeforeFix": "8",
    "sourceAfterFix": "9"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550",
    "fixCommitParentSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691",
    "bugFilePath": "src/com/google/javascript/jscomp/PassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/PassConfig.java b/src/com/google/javascript/jscomp/PassConfig.java\nindex 19ffdd7..95f04e0 100644\n--- a/src/com/google/javascript/jscomp/PassConfig.java\n+++ b/src/com/google/javascript/jscomp/PassConfig.java\n@@ -224,13 +224,13 @@\n    * Get intermediate state for a running pass config, so it can\n    * be paused and started again later.\n    */\n-  abstract State getIntermediateState();\n+  protected abstract State getIntermediateState();\n \n   /**\n    * Set the intermediate state for a pass config, to restart\n    * a compilation process that had been previously paused.\n    */\n-  abstract void setIntermediateState(State state);\n+  protected abstract void setIntermediateState(State state);\n \n   /**\n    * An implementation of PassConfig that just proxies all its method calls\n@@ -261,11 +261,11 @@\n       return delegate.getTopScope();\n     }\n \n-    @Override State getIntermediateState() {\n+    @Override protected State getIntermediateState() {\n       return delegate.getIntermediateState();\n     }\n \n-    @Override void setIntermediateState(State state) {\n+    @Override protected void setIntermediateState(State state) {\n       delegate.setIntermediateState(state);\n     }\n   }\n@@ -273,7 +273,7 @@\n   /**\n    * Intermediate state for a running pass configuration.\n    */\n-  static class State implements Serializable {\n+  public static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n \n     final Map<String, Integer> cssNames;\n@@ -286,7 +286,7 @@\n     final FunctionNames functionNames;\n     final String idGeneratorMap;\n \n-    State(Map<String, Integer> cssNames, Set<String> exportedNames,\n+    public State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 289,
    "bugNodeStartChar": 8514,
    "bugNodeLength": 738,
    "fixLineNum": 289,
    "fixNodeStartChar": 8514,
    "fixNodeLength": 745,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691",
    "fixCommitParentSHA1": "66c8c695fd8130e3ede6f77c6e5cc1ec96a0e9b3",
    "bugFilePath": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0aea44c..8894e90 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -113,7 +113,7 @@\n    * name whose type is capable of being refined.\n    * @return The current type of the node if it can be refined, null otherwise.\n    */\n-  JSType getTypeIfRefinable(Node node, FlowScope scope) {\n+  protected JSType getTypeIfRefinable(Node node, FlowScope scope) {\n     switch (node.getType()) {\n       case Token.NAME:\n         StaticSlot<JSType> nameVar = scope.getSlot(node.getString());\n@@ -590,14 +590,14 @@\n   /**\n    * Returns a version of type where undefined is not present.\n    */\n-  final JSType getRestrictedWithoutUndefined(JSType type) {\n+  protected final JSType getRestrictedWithoutUndefined(JSType type) {\n     return type == null ? null : type.visit(restrictUndefinedVisitor);\n   }\n \n   /**\n    * Returns a version of type where null is not present.\n    */\n-  final JSType getRestrictedWithoutNull(JSType type) {\n+  protected final JSType getRestrictedWithoutNull(JSType type) {\n     return type == null ? null : type.visit(restrictNullVisitor);\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 111,
    "bugNodeStartChar": 4388,
    "bugNodeLength": 1214,
    "fixLineNum": 111,
    "fixNodeStartChar": 4388,
    "fixNodeLength": 1224,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "4"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691",
    "fixCommitParentSHA1": "66c8c695fd8130e3ede6f77c6e5cc1ec96a0e9b3",
    "bugFilePath": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0aea44c..8894e90 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -113,7 +113,7 @@\n    * name whose type is capable of being refined.\n    * @return The current type of the node if it can be refined, null otherwise.\n    */\n-  JSType getTypeIfRefinable(Node node, FlowScope scope) {\n+  protected JSType getTypeIfRefinable(Node node, FlowScope scope) {\n     switch (node.getType()) {\n       case Token.NAME:\n         StaticSlot<JSType> nameVar = scope.getSlot(node.getString());\n@@ -590,14 +590,14 @@\n   /**\n    * Returns a version of type where undefined is not present.\n    */\n-  final JSType getRestrictedWithoutUndefined(JSType type) {\n+  protected final JSType getRestrictedWithoutUndefined(JSType type) {\n     return type == null ? null : type.visit(restrictUndefinedVisitor);\n   }\n \n   /**\n    * Returns a version of type where null is not present.\n    */\n-  final JSType getRestrictedWithoutNull(JSType type) {\n+  protected final JSType getRestrictedWithoutNull(JSType type) {\n     return type == null ? null : type.visit(restrictNullVisitor);\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 590,
    "bugNodeStartChar": 17212,
    "bugNodeLength": 207,
    "fixLineNum": 590,
    "fixNodeStartChar": 17212,
    "fixNodeLength": 217,
    "sourceBeforeFix": "16",
    "sourceAfterFix": "20"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691",
    "fixCommitParentSHA1": "66c8c695fd8130e3ede6f77c6e5cc1ec96a0e9b3",
    "bugFilePath": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0aea44c..8894e90 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -113,7 +113,7 @@\n    * name whose type is capable of being refined.\n    * @return The current type of the node if it can be refined, null otherwise.\n    */\n-  JSType getTypeIfRefinable(Node node, FlowScope scope) {\n+  protected JSType getTypeIfRefinable(Node node, FlowScope scope) {\n     switch (node.getType()) {\n       case Token.NAME:\n         StaticSlot<JSType> nameVar = scope.getSlot(node.getString());\n@@ -590,14 +590,14 @@\n   /**\n    * Returns a version of type where undefined is not present.\n    */\n-  final JSType getRestrictedWithoutUndefined(JSType type) {\n+  protected final JSType getRestrictedWithoutUndefined(JSType type) {\n     return type == null ? null : type.visit(restrictUndefinedVisitor);\n   }\n \n   /**\n    * Returns a version of type where null is not present.\n    */\n-  final JSType getRestrictedWithoutNull(JSType type) {\n+  protected final JSType getRestrictedWithoutNull(JSType type) {\n     return type == null ? null : type.visit(restrictNullVisitor);\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 597,
    "bugNodeStartChar": 17423,
    "bugNodeLength": 192,
    "fixLineNum": 597,
    "fixNodeStartChar": 17423,
    "fixNodeLength": 202,
    "sourceBeforeFix": "16",
    "sourceAfterFix": "20"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/AliasStrings.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/AliasStrings.java b/src/com/google/javascript/jscomp/AliasStrings.java\nindex 36ed3e9..9e7625c 100644\n--- a/src/com/google/javascript/jscomp/AliasStrings.java\n+++ b/src/com/google/javascript/jscomp/AliasStrings.java\n@@ -110,7 +110,7 @@\n \n   @Override\n   public void process(Node externs, Node root) {\n-    logger.info(\"Aliasing common strings\");\n+    logger.fine(\"Aliasing common strings\");\n \n     // Traverse the tree and collect strings\n     NodeTraversal.traverse(compiler, root, this);\n@@ -330,7 +330,7 @@\n       }\n     }\n     // TODO(user): Make this save to file OR output to the application\n-    logger.info(sb.toString());\n+    logger.fine(sb.toString());\n   }\n \n   // -------------------------------------------------------------------------\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 113,
    "bugNodeStartChar": 3869,
    "bugNodeLength": 38,
    "fixLineNum": 113,
    "fixNodeStartChar": 3869,
    "fixNodeLength": 38,
    "sourceBeforeFix": "logger.info(\"Aliasing common strings\")",
    "sourceAfterFix": "logger.fine(\"Aliasing common strings\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/AliasStrings.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/AliasStrings.java b/src/com/google/javascript/jscomp/AliasStrings.java\nindex 36ed3e9..9e7625c 100644\n--- a/src/com/google/javascript/jscomp/AliasStrings.java\n+++ b/src/com/google/javascript/jscomp/AliasStrings.java\n@@ -110,7 +110,7 @@\n \n   @Override\n   public void process(Node externs, Node root) {\n-    logger.info(\"Aliasing common strings\");\n+    logger.fine(\"Aliasing common strings\");\n \n     // Traverse the tree and collect strings\n     NodeTraversal.traverse(compiler, root, this);\n@@ -330,7 +330,7 @@\n       }\n     }\n     // TODO(user): Make this save to file OR output to the application\n-    logger.info(sb.toString());\n+    logger.fine(sb.toString());\n   }\n \n   // -------------------------------------------------------------------------\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 113,
    "bugNodeStartChar": 3869,
    "bugNodeLength": 38,
    "fixLineNum": 113,
    "fixNodeStartChar": 3869,
    "fixNodeLength": 38,
    "sourceBeforeFix": "logger.info(\"Aliasing common strings\")",
    "sourceAfterFix": "logger.fine(\"Aliasing common strings\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/AliasStrings.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/AliasStrings.java b/src/com/google/javascript/jscomp/AliasStrings.java\nindex 36ed3e9..9e7625c 100644\n--- a/src/com/google/javascript/jscomp/AliasStrings.java\n+++ b/src/com/google/javascript/jscomp/AliasStrings.java\n@@ -110,7 +110,7 @@\n \n   @Override\n   public void process(Node externs, Node root) {\n-    logger.info(\"Aliasing common strings\");\n+    logger.fine(\"Aliasing common strings\");\n \n     // Traverse the tree and collect strings\n     NodeTraversal.traverse(compiler, root, this);\n@@ -330,7 +330,7 @@\n       }\n     }\n     // TODO(user): Make this save to file OR output to the application\n-    logger.info(sb.toString());\n+    logger.fine(sb.toString());\n   }\n \n   // -------------------------------------------------------------------------\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 333,
    "bugNodeStartChar": 11424,
    "bugNodeLength": 26,
    "fixLineNum": 333,
    "fixNodeStartChar": 11424,
    "fixNodeLength": 26,
    "sourceBeforeFix": "logger.info(sb.toString())",
    "sourceAfterFix": "logger.fine(sb.toString())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/AliasStrings.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/AliasStrings.java b/src/com/google/javascript/jscomp/AliasStrings.java\nindex 36ed3e9..9e7625c 100644\n--- a/src/com/google/javascript/jscomp/AliasStrings.java\n+++ b/src/com/google/javascript/jscomp/AliasStrings.java\n@@ -110,7 +110,7 @@\n \n   @Override\n   public void process(Node externs, Node root) {\n-    logger.info(\"Aliasing common strings\");\n+    logger.fine(\"Aliasing common strings\");\n \n     // Traverse the tree and collect strings\n     NodeTraversal.traverse(compiler, root, this);\n@@ -330,7 +330,7 @@\n       }\n     }\n     // TODO(user): Make this save to file OR output to the application\n-    logger.info(sb.toString());\n+    logger.fine(sb.toString());\n   }\n \n   // -------------------------------------------------------------------------\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 333,
    "bugNodeStartChar": 11424,
    "bugNodeLength": 26,
    "fixLineNum": 333,
    "fixNodeStartChar": 11424,
    "fixNodeLength": 26,
    "sourceBeforeFix": "logger.info(sb.toString())",
    "sourceAfterFix": "logger.fine(sb.toString())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/AmbiguateProperties.java b/src/com/google/javascript/jscomp/AmbiguateProperties.java\nindex c72c004..2929e04 100644\n--- a/src/com/google/javascript/jscomp/AmbiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/AmbiguateProperties.java\n@@ -240,7 +240,7 @@\n       }\n     }\n \n-    logger.info(\"Collapsed \" + numRenamedPropertyNames + \" properties into \"\n+    logger.fine(\"Collapsed \" + numRenamedPropertyNames + \" properties into \"\n                 + numNewPropertyNames + \" and skipped renaming \"\n                 + numSkippedPropertyNames + \" properties.\");\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 243,
    "bugNodeStartChar": 8571,
    "bugNodeLength": 197,
    "fixLineNum": 243,
    "fixNodeStartChar": 8571,
    "fixNodeLength": 197,
    "sourceBeforeFix": "logger.info(\"Collapsed \" + numRenamedPropertyNames + \" properties into \"+ numNewPropertyNames+ \" and skipped renaming \"+ numSkippedPropertyNames+ \" properties.\")",
    "sourceAfterFix": "logger.fine(\"Collapsed \" + numRenamedPropertyNames + \" properties into \"+ numNewPropertyNames+ \" and skipped renaming \"+ numSkippedPropertyNames+ \" properties.\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/AmbiguateProperties.java b/src/com/google/javascript/jscomp/AmbiguateProperties.java\nindex c72c004..2929e04 100644\n--- a/src/com/google/javascript/jscomp/AmbiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/AmbiguateProperties.java\n@@ -240,7 +240,7 @@\n       }\n     }\n \n-    logger.info(\"Collapsed \" + numRenamedPropertyNames + \" properties into \"\n+    logger.fine(\"Collapsed \" + numRenamedPropertyNames + \" properties into \"\n                 + numNewPropertyNames + \" and skipped renaming \"\n                 + numSkippedPropertyNames + \" properties.\");\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 243,
    "bugNodeStartChar": 8571,
    "bugNodeLength": 197,
    "fixLineNum": 243,
    "fixNodeStartChar": 8571,
    "fixNodeLength": 197,
    "sourceBeforeFix": "logger.info(\"Collapsed \" + numRenamedPropertyNames + \" properties into \"+ numNewPropertyNames+ \" and skipped renaming \"+ numSkippedPropertyNames+ \" properties.\")",
    "sourceAfterFix": "logger.fine(\"Collapsed \" + numRenamedPropertyNames + \" properties into \"+ numNewPropertyNames+ \" and skipped renaming \"+ numSkippedPropertyNames+ \" properties.\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d16c12e..3f38020 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -757,7 +757,7 @@\n   }\n \n   private void externExports() {\n-    logger.info(\"Creating extern file for exports\");\n+    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n \n     ExternExportsPass pass = new ExternExportsPass(this);\n@@ -795,7 +795,7 @@\n    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n-    logger.info(\"Remove try/catch/finally\");\n+    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);\n@@ -808,7 +808,7 @@\n    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n-    logger.info(\"Strip code\");\n+    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);\n@@ -1784,7 +1784,7 @@\n \n   /** Control Flow Analysis. */\n   ControlFlowGraph<Node> computeCFG() {\n-    logger.info(\"Computing Control Flow Graph\");\n+    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);\n@@ -1793,7 +1793,7 @@\n   }\n \n   public void normalize() {\n-    logger.info(\"Normalizing\");\n+    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();\n@@ -1806,7 +1806,7 @@\n   }\n \n   void recordFunctionInformation() {\n-    logger.info(\"Recording function information\");\n+    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 760,
    "bugNodeStartChar": 23589,
    "bugNodeLength": 47,
    "fixLineNum": 760,
    "fixNodeStartChar": 23589,
    "fixNodeLength": 47,
    "sourceBeforeFix": "logger.info(\"Creating extern file for exports\")",
    "sourceAfterFix": "logger.fine(\"Creating extern file for exports\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d16c12e..3f38020 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -757,7 +757,7 @@\n   }\n \n   private void externExports() {\n-    logger.info(\"Creating extern file for exports\");\n+    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n \n     ExternExportsPass pass = new ExternExportsPass(this);\n@@ -795,7 +795,7 @@\n    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n-    logger.info(\"Remove try/catch/finally\");\n+    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);\n@@ -808,7 +808,7 @@\n    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n-    logger.info(\"Strip code\");\n+    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);\n@@ -1784,7 +1784,7 @@\n \n   /** Control Flow Analysis. */\n   ControlFlowGraph<Node> computeCFG() {\n-    logger.info(\"Computing Control Flow Graph\");\n+    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);\n@@ -1793,7 +1793,7 @@\n   }\n \n   public void normalize() {\n-    logger.info(\"Normalizing\");\n+    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();\n@@ -1806,7 +1806,7 @@\n   }\n \n   void recordFunctionInformation() {\n-    logger.info(\"Recording function information\");\n+    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 760,
    "bugNodeStartChar": 23589,
    "bugNodeLength": 47,
    "fixLineNum": 760,
    "fixNodeStartChar": 23589,
    "fixNodeLength": 47,
    "sourceBeforeFix": "logger.info(\"Creating extern file for exports\")",
    "sourceAfterFix": "logger.fine(\"Creating extern file for exports\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d16c12e..3f38020 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -757,7 +757,7 @@\n   }\n \n   private void externExports() {\n-    logger.info(\"Creating extern file for exports\");\n+    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n \n     ExternExportsPass pass = new ExternExportsPass(this);\n@@ -795,7 +795,7 @@\n    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n-    logger.info(\"Remove try/catch/finally\");\n+    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);\n@@ -808,7 +808,7 @@\n    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n-    logger.info(\"Strip code\");\n+    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);\n@@ -1784,7 +1784,7 @@\n \n   /** Control Flow Analysis. */\n   ControlFlowGraph<Node> computeCFG() {\n-    logger.info(\"Computing Control Flow Graph\");\n+    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);\n@@ -1793,7 +1793,7 @@\n   }\n \n   public void normalize() {\n-    logger.info(\"Normalizing\");\n+    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();\n@@ -1806,7 +1806,7 @@\n   }\n \n   void recordFunctionInformation() {\n-    logger.info(\"Recording function information\");\n+    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 798,
    "bugNodeStartChar": 24460,
    "bugNodeLength": 39,
    "fixLineNum": 798,
    "fixNodeStartChar": 24460,
    "fixNodeLength": 39,
    "sourceBeforeFix": "logger.info(\"Remove try/catch/finally\")",
    "sourceAfterFix": "logger.fine(\"Remove try/catch/finally\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d16c12e..3f38020 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -757,7 +757,7 @@\n   }\n \n   private void externExports() {\n-    logger.info(\"Creating extern file for exports\");\n+    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n \n     ExternExportsPass pass = new ExternExportsPass(this);\n@@ -795,7 +795,7 @@\n    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n-    logger.info(\"Remove try/catch/finally\");\n+    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);\n@@ -808,7 +808,7 @@\n    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n-    logger.info(\"Strip code\");\n+    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);\n@@ -1784,7 +1784,7 @@\n \n   /** Control Flow Analysis. */\n   ControlFlowGraph<Node> computeCFG() {\n-    logger.info(\"Computing Control Flow Graph\");\n+    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);\n@@ -1793,7 +1793,7 @@\n   }\n \n   public void normalize() {\n-    logger.info(\"Normalizing\");\n+    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();\n@@ -1806,7 +1806,7 @@\n   }\n \n   void recordFunctionInformation() {\n-    logger.info(\"Recording function information\");\n+    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 798,
    "bugNodeStartChar": 24460,
    "bugNodeLength": 39,
    "fixLineNum": 798,
    "fixNodeStartChar": 24460,
    "fixNodeLength": 39,
    "sourceBeforeFix": "logger.info(\"Remove try/catch/finally\")",
    "sourceAfterFix": "logger.fine(\"Remove try/catch/finally\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d16c12e..3f38020 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -757,7 +757,7 @@\n   }\n \n   private void externExports() {\n-    logger.info(\"Creating extern file for exports\");\n+    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n \n     ExternExportsPass pass = new ExternExportsPass(this);\n@@ -795,7 +795,7 @@\n    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n-    logger.info(\"Remove try/catch/finally\");\n+    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);\n@@ -808,7 +808,7 @@\n    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n-    logger.info(\"Strip code\");\n+    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);\n@@ -1784,7 +1784,7 @@\n \n   /** Control Flow Analysis. */\n   ControlFlowGraph<Node> computeCFG() {\n-    logger.info(\"Computing Control Flow Graph\");\n+    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);\n@@ -1793,7 +1793,7 @@\n   }\n \n   public void normalize() {\n-    logger.info(\"Normalizing\");\n+    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();\n@@ -1806,7 +1806,7 @@\n   }\n \n   void recordFunctionInformation() {\n-    logger.info(\"Recording function information\");\n+    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 811,
    "bugNodeStartChar": 24912,
    "bugNodeLength": 25,
    "fixLineNum": 811,
    "fixNodeStartChar": 24912,
    "fixNodeLength": 25,
    "sourceBeforeFix": "logger.info(\"Strip code\")",
    "sourceAfterFix": "logger.fine(\"Strip code\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d16c12e..3f38020 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -757,7 +757,7 @@\n   }\n \n   private void externExports() {\n-    logger.info(\"Creating extern file for exports\");\n+    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n \n     ExternExportsPass pass = new ExternExportsPass(this);\n@@ -795,7 +795,7 @@\n    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n-    logger.info(\"Remove try/catch/finally\");\n+    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);\n@@ -808,7 +808,7 @@\n    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n-    logger.info(\"Strip code\");\n+    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);\n@@ -1784,7 +1784,7 @@\n \n   /** Control Flow Analysis. */\n   ControlFlowGraph<Node> computeCFG() {\n-    logger.info(\"Computing Control Flow Graph\");\n+    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);\n@@ -1793,7 +1793,7 @@\n   }\n \n   public void normalize() {\n-    logger.info(\"Normalizing\");\n+    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();\n@@ -1806,7 +1806,7 @@\n   }\n \n   void recordFunctionInformation() {\n-    logger.info(\"Recording function information\");\n+    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 811,
    "bugNodeStartChar": 24912,
    "bugNodeLength": 25,
    "fixLineNum": 811,
    "fixNodeStartChar": 24912,
    "fixNodeLength": 25,
    "sourceBeforeFix": "logger.info(\"Strip code\")",
    "sourceAfterFix": "logger.fine(\"Strip code\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d16c12e..3f38020 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -757,7 +757,7 @@\n   }\n \n   private void externExports() {\n-    logger.info(\"Creating extern file for exports\");\n+    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n \n     ExternExportsPass pass = new ExternExportsPass(this);\n@@ -795,7 +795,7 @@\n    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n-    logger.info(\"Remove try/catch/finally\");\n+    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);\n@@ -808,7 +808,7 @@\n    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n-    logger.info(\"Strip code\");\n+    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);\n@@ -1784,7 +1784,7 @@\n \n   /** Control Flow Analysis. */\n   ControlFlowGraph<Node> computeCFG() {\n-    logger.info(\"Computing Control Flow Graph\");\n+    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);\n@@ -1793,7 +1793,7 @@\n   }\n \n   public void normalize() {\n-    logger.info(\"Normalizing\");\n+    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();\n@@ -1806,7 +1806,7 @@\n   }\n \n   void recordFunctionInformation() {\n-    logger.info(\"Recording function information\");\n+    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1787,
    "bugNodeStartChar": 54809,
    "bugNodeLength": 43,
    "fixLineNum": 1787,
    "fixNodeStartChar": 54809,
    "fixNodeLength": 43,
    "sourceBeforeFix": "logger.info(\"Computing Control Flow Graph\")",
    "sourceAfterFix": "logger.fine(\"Computing Control Flow Graph\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d16c12e..3f38020 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -757,7 +757,7 @@\n   }\n \n   private void externExports() {\n-    logger.info(\"Creating extern file for exports\");\n+    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n \n     ExternExportsPass pass = new ExternExportsPass(this);\n@@ -795,7 +795,7 @@\n    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n-    logger.info(\"Remove try/catch/finally\");\n+    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);\n@@ -808,7 +808,7 @@\n    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n-    logger.info(\"Strip code\");\n+    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);\n@@ -1784,7 +1784,7 @@\n \n   /** Control Flow Analysis. */\n   ControlFlowGraph<Node> computeCFG() {\n-    logger.info(\"Computing Control Flow Graph\");\n+    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);\n@@ -1793,7 +1793,7 @@\n   }\n \n   public void normalize() {\n-    logger.info(\"Normalizing\");\n+    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();\n@@ -1806,7 +1806,7 @@\n   }\n \n   void recordFunctionInformation() {\n-    logger.info(\"Recording function information\");\n+    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1787,
    "bugNodeStartChar": 54809,
    "bugNodeLength": 43,
    "fixLineNum": 1787,
    "fixNodeStartChar": 54809,
    "fixNodeLength": 43,
    "sourceBeforeFix": "logger.info(\"Computing Control Flow Graph\")",
    "sourceAfterFix": "logger.fine(\"Computing Control Flow Graph\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d16c12e..3f38020 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -757,7 +757,7 @@\n   }\n \n   private void externExports() {\n-    logger.info(\"Creating extern file for exports\");\n+    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n \n     ExternExportsPass pass = new ExternExportsPass(this);\n@@ -795,7 +795,7 @@\n    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n-    logger.info(\"Remove try/catch/finally\");\n+    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);\n@@ -808,7 +808,7 @@\n    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n-    logger.info(\"Strip code\");\n+    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);\n@@ -1784,7 +1784,7 @@\n \n   /** Control Flow Analysis. */\n   ControlFlowGraph<Node> computeCFG() {\n-    logger.info(\"Computing Control Flow Graph\");\n+    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);\n@@ -1793,7 +1793,7 @@\n   }\n \n   public void normalize() {\n-    logger.info(\"Normalizing\");\n+    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();\n@@ -1806,7 +1806,7 @@\n   }\n \n   void recordFunctionInformation() {\n-    logger.info(\"Recording function information\");\n+    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1796,
    "bugNodeStartChar": 55091,
    "bugNodeLength": 26,
    "fixLineNum": 1796,
    "fixNodeStartChar": 55091,
    "fixNodeLength": 26,
    "sourceBeforeFix": "logger.info(\"Normalizing\")",
    "sourceAfterFix": "logger.fine(\"Normalizing\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d16c12e..3f38020 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -757,7 +757,7 @@\n   }\n \n   private void externExports() {\n-    logger.info(\"Creating extern file for exports\");\n+    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n \n     ExternExportsPass pass = new ExternExportsPass(this);\n@@ -795,7 +795,7 @@\n    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n-    logger.info(\"Remove try/catch/finally\");\n+    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);\n@@ -808,7 +808,7 @@\n    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n-    logger.info(\"Strip code\");\n+    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);\n@@ -1784,7 +1784,7 @@\n \n   /** Control Flow Analysis. */\n   ControlFlowGraph<Node> computeCFG() {\n-    logger.info(\"Computing Control Flow Graph\");\n+    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);\n@@ -1793,7 +1793,7 @@\n   }\n \n   public void normalize() {\n-    logger.info(\"Normalizing\");\n+    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();\n@@ -1806,7 +1806,7 @@\n   }\n \n   void recordFunctionInformation() {\n-    logger.info(\"Recording function information\");\n+    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1796,
    "bugNodeStartChar": 55091,
    "bugNodeLength": 26,
    "fixLineNum": 1796,
    "fixNodeStartChar": 55091,
    "fixNodeLength": 26,
    "sourceBeforeFix": "logger.info(\"Normalizing\")",
    "sourceAfterFix": "logger.fine(\"Normalizing\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d16c12e..3f38020 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -757,7 +757,7 @@\n   }\n \n   private void externExports() {\n-    logger.info(\"Creating extern file for exports\");\n+    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n \n     ExternExportsPass pass = new ExternExportsPass(this);\n@@ -795,7 +795,7 @@\n    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n-    logger.info(\"Remove try/catch/finally\");\n+    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);\n@@ -808,7 +808,7 @@\n    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n-    logger.info(\"Strip code\");\n+    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);\n@@ -1784,7 +1784,7 @@\n \n   /** Control Flow Analysis. */\n   ControlFlowGraph<Node> computeCFG() {\n-    logger.info(\"Computing Control Flow Graph\");\n+    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);\n@@ -1793,7 +1793,7 @@\n   }\n \n   public void normalize() {\n-    logger.info(\"Normalizing\");\n+    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();\n@@ -1806,7 +1806,7 @@\n   }\n \n   void recordFunctionInformation() {\n-    logger.info(\"Recording function information\");\n+    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1809,
    "bugNodeStartChar": 55373,
    "bugNodeLength": 45,
    "fixLineNum": 1809,
    "fixNodeStartChar": 55373,
    "fixNodeLength": 45,
    "sourceBeforeFix": "logger.info(\"Recording function information\")",
    "sourceAfterFix": "logger.fine(\"Recording function information\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/Compiler.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d16c12e..3f38020 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -757,7 +757,7 @@\n   }\n \n   private void externExports() {\n-    logger.info(\"Creating extern file for exports\");\n+    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n \n     ExternExportsPass pass = new ExternExportsPass(this);\n@@ -795,7 +795,7 @@\n    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n-    logger.info(\"Remove try/catch/finally\");\n+    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);\n@@ -808,7 +808,7 @@\n    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n-    logger.info(\"Strip code\");\n+    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);\n@@ -1784,7 +1784,7 @@\n \n   /** Control Flow Analysis. */\n   ControlFlowGraph<Node> computeCFG() {\n-    logger.info(\"Computing Control Flow Graph\");\n+    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);\n@@ -1793,7 +1793,7 @@\n   }\n \n   public void normalize() {\n-    logger.info(\"Normalizing\");\n+    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();\n@@ -1806,7 +1806,7 @@\n   }\n \n   void recordFunctionInformation() {\n-    logger.info(\"Recording function information\");\n+    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1809,
    "bugNodeStartChar": 55373,
    "bugNodeLength": 45,
    "fixLineNum": 1809,
    "fixNodeStartChar": 55373,
    "fixNodeLength": 45,
    "sourceBeforeFix": "logger.info(\"Recording function information\")",
    "sourceAfterFix": "logger.fine(\"Recording function information\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java b/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java\nindex 12551f8..2512d12 100755\n--- a/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java\n+++ b/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java\n@@ -71,7 +71,7 @@\n \n   @Override\n   public void process(Node externs, Node root) {\n-    logger.info(\"Moving functions + variable into deeper modules\");\n+    logger.fine(\"Moving functions + variable into deeper modules\");\n \n     // If there are <2 modules, then we will never move anything, so we're done\n     if (graph != null && graph.getModuleCount() > 1) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 74,
    "bugNodeStartChar": 2368,
    "bugNodeLength": 62,
    "fixLineNum": 74,
    "fixNodeStartChar": 2368,
    "fixNodeLength": 62,
    "sourceBeforeFix": "logger.info(\"Moving functions + variable into deeper modules\")",
    "sourceAfterFix": "logger.fine(\"Moving functions + variable into deeper modules\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java b/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java\nindex 12551f8..2512d12 100755\n--- a/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java\n+++ b/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java\n@@ -71,7 +71,7 @@\n \n   @Override\n   public void process(Node externs, Node root) {\n-    logger.info(\"Moving functions + variable into deeper modules\");\n+    logger.fine(\"Moving functions + variable into deeper modules\");\n \n     // If there are <2 modules, then we will never move anything, so we're done\n     if (graph != null && graph.getModuleCount() > 1) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 74,
    "bugNodeStartChar": 2368,
    "bugNodeLength": 62,
    "fixLineNum": 74,
    "fixNodeStartChar": 2368,
    "fixNodeLength": 62,
    "sourceBeforeFix": "logger.info(\"Moving functions + variable into deeper modules\")",
    "sourceAfterFix": "logger.fine(\"Moving functions + variable into deeper modules\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex 4e7046e..52082f6 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -592,9 +592,9 @@\n         }\n       }\n     }\n-    logger.info(\"Renamed \" + instancesRenamed + \" instances of \"\n+    logger.fine(\"Renamed \" + instancesRenamed + \" instances of \"\n                 + propsRenamed + \" properties.\");\n-    logger.info(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n+    logger.fine(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n                 + \"properties, \" + propsSkipped + \" instances of properties \"\n                 + \"that were skipped for specific types and \" + singleTypeProps\n                 + \" properties that were referenced from only one type.\");\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 595,
    "bugNodeStartChar": 20295,
    "bugNodeLength": 109,
    "fixLineNum": 595,
    "fixNodeStartChar": 20295,
    "fixNodeLength": 109,
    "sourceBeforeFix": "logger.info(\"Renamed \" + instancesRenamed + \" instances of \"+ propsRenamed+ \" properties.\")",
    "sourceAfterFix": "logger.fine(\"Renamed \" + instancesRenamed + \" instances of \"+ propsRenamed+ \" properties.\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex 4e7046e..52082f6 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -592,9 +592,9 @@\n         }\n       }\n     }\n-    logger.info(\"Renamed \" + instancesRenamed + \" instances of \"\n+    logger.fine(\"Renamed \" + instancesRenamed + \" instances of \"\n                 + propsRenamed + \" properties.\");\n-    logger.info(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n+    logger.fine(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n                 + \"properties, \" + propsSkipped + \" instances of properties \"\n                 + \"that were skipped for specific types and \" + singleTypeProps\n                 + \" properties that were referenced from only one type.\");\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 595,
    "bugNodeStartChar": 20295,
    "bugNodeLength": 109,
    "fixLineNum": 595,
    "fixNodeStartChar": 20295,
    "fixNodeLength": 109,
    "sourceBeforeFix": "logger.info(\"Renamed \" + instancesRenamed + \" instances of \"+ propsRenamed+ \" properties.\")",
    "sourceAfterFix": "logger.fine(\"Renamed \" + instancesRenamed + \" instances of \"+ propsRenamed+ \" properties.\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex 4e7046e..52082f6 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -592,9 +592,9 @@\n         }\n       }\n     }\n-    logger.info(\"Renamed \" + instancesRenamed + \" instances of \"\n+    logger.fine(\"Renamed \" + instancesRenamed + \" instances of \"\n                 + propsRenamed + \" properties.\");\n-    logger.info(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n+    logger.fine(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n                 + \"properties, \" + propsSkipped + \" instances of properties \"\n                 + \"that were skipped for specific types and \" + singleTypeProps\n                 + \" properties that were referenced from only one type.\");\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 597,
    "bugNodeStartChar": 20410,
    "bugNodeLength": 300,
    "fixLineNum": 597,
    "fixNodeStartChar": 20410,
    "fixNodeLength": 300,
    "sourceBeforeFix": "logger.info(\"Skipped renaming \" + instancesSkipped + \" invalidated \"+ \"properties, \"+ propsSkipped+ \" instances of properties \"+ \"that were skipped for specific types and \"+ singleTypeProps+ \" properties that were referenced from only one type.\")",
    "sourceAfterFix": "logger.fine(\"Skipped renaming \" + instancesSkipped + \" invalidated \"+ \"properties, \"+ propsSkipped+ \" instances of properties \"+ \"that were skipped for specific types and \"+ singleTypeProps+ \" properties that were referenced from only one type.\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex 4e7046e..52082f6 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -592,9 +592,9 @@\n         }\n       }\n     }\n-    logger.info(\"Renamed \" + instancesRenamed + \" instances of \"\n+    logger.fine(\"Renamed \" + instancesRenamed + \" instances of \"\n                 + propsRenamed + \" properties.\");\n-    logger.info(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n+    logger.fine(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n                 + \"properties, \" + propsSkipped + \" instances of properties \"\n                 + \"that were skipped for specific types and \" + singleTypeProps\n                 + \" properties that were referenced from only one type.\");\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 597,
    "bugNodeStartChar": 20410,
    "bugNodeLength": 300,
    "fixLineNum": 597,
    "fixNodeStartChar": 20410,
    "fixNodeLength": 300,
    "sourceBeforeFix": "logger.info(\"Skipped renaming \" + instancesSkipped + \" invalidated \"+ \"properties, \"+ propsSkipped+ \" instances of properties \"+ \"that were skipped for specific types and \"+ singleTypeProps+ \" properties that were referenced from only one type.\")",
    "sourceAfterFix": "logger.fine(\"Skipped renaming \" + instancesSkipped + \" invalidated \"+ \"properties, \"+ propsSkipped+ \" instances of properties \"+ \"that were skipped for specific types and \"+ singleTypeProps+ \" properties that were referenced from only one type.\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ExpandJqueryAliases.java b/src/com/google/javascript/jscomp/ExpandJqueryAliases.java\nindex ef09ce8..51f9fac 100644\n--- a/src/com/google/javascript/jscomp/ExpandJqueryAliases.java\n+++ b/src/com/google/javascript/jscomp/ExpandJqueryAliases.java\n@@ -77,7 +77,7 @@\n \n   @Override\n   public void process(Node externs, Node root) {\n-    logger.info(\"Expanding Jquery Aliases\");\n+    logger.fine(\"Expanding Jquery Aliases\");\n \n     // Traverse the tree and collect strings\n     NodeTraversal.traverse(compiler, root, this);\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 80,
    "bugNodeStartChar": 2717,
    "bugNodeLength": 39,
    "fixLineNum": 80,
    "fixNodeStartChar": 2717,
    "fixNodeLength": 39,
    "sourceBeforeFix": "logger.info(\"Expanding Jquery Aliases\")",
    "sourceAfterFix": "logger.fine(\"Expanding Jquery Aliases\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/ExpandJqueryAliases.java b/src/com/google/javascript/jscomp/ExpandJqueryAliases.java\nindex ef09ce8..51f9fac 100644\n--- a/src/com/google/javascript/jscomp/ExpandJqueryAliases.java\n+++ b/src/com/google/javascript/jscomp/ExpandJqueryAliases.java\n@@ -77,7 +77,7 @@\n \n   @Override\n   public void process(Node externs, Node root) {\n-    logger.info(\"Expanding Jquery Aliases\");\n+    logger.fine(\"Expanding Jquery Aliases\");\n \n     // Traverse the tree and collect strings\n     NodeTraversal.traverse(compiler, root, this);\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 80,
    "bugNodeStartChar": 2717,
    "bugNodeLength": 39,
    "fixLineNum": 80,
    "fixNodeStartChar": 2717,
    "fixNodeLength": 39,
    "sourceBeforeFix": "logger.info(\"Expanding Jquery Aliases\")",
    "sourceAfterFix": "logger.fine(\"Expanding Jquery Aliases\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/NameAnonymousFunctions.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NameAnonymousFunctions.java b/src/com/google/javascript/jscomp/NameAnonymousFunctions.java\nindex d58507a..9f85ad0 100644\n--- a/src/com/google/javascript/jscomp/NameAnonymousFunctions.java\n+++ b/src/com/google/javascript/jscomp/NameAnonymousFunctions.java\n@@ -53,7 +53,7 @@\n     AnonymousFunctionNamingCallback namingCallback =\n         new AnonymousFunctionNamingCallback(new AnonymousFunctionNamer());\n     NodeTraversal.traverse(compiler, root, namingCallback);\n-    logger.info(\"Named \" + namedCount + \" anon functions using \" +\n+    logger.fine(\"Named \" + namedCount + \" anon functions using \" +\n         bytesUsed + \" bytes\");\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 56,
    "bugNodeStartChar": 1675,
    "bugNodeLength": 92,
    "fixLineNum": 56,
    "fixNodeStartChar": 1675,
    "fixNodeLength": 92,
    "sourceBeforeFix": "logger.info(\"Named \" + namedCount + \" anon functions using \"+ bytesUsed+ \" bytes\")",
    "sourceAfterFix": "logger.fine(\"Named \" + namedCount + \" anon functions using \"+ bytesUsed+ \" bytes\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/NameAnonymousFunctions.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NameAnonymousFunctions.java b/src/com/google/javascript/jscomp/NameAnonymousFunctions.java\nindex d58507a..9f85ad0 100644\n--- a/src/com/google/javascript/jscomp/NameAnonymousFunctions.java\n+++ b/src/com/google/javascript/jscomp/NameAnonymousFunctions.java\n@@ -53,7 +53,7 @@\n     AnonymousFunctionNamingCallback namingCallback =\n         new AnonymousFunctionNamingCallback(new AnonymousFunctionNamer());\n     NodeTraversal.traverse(compiler, root, namingCallback);\n-    logger.info(\"Named \" + namedCount + \" anon functions using \" +\n+    logger.fine(\"Named \" + namedCount + \" anon functions using \" +\n         bytesUsed + \" bytes\");\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 56,
    "bugNodeStartChar": 1675,
    "bugNodeLength": 92,
    "fixLineNum": 56,
    "fixNodeStartChar": 1675,
    "fixNodeLength": 92,
    "sourceBeforeFix": "logger.info(\"Named \" + namedCount + \" anon functions using \"+ bytesUsed+ \" bytes\")",
    "sourceAfterFix": "logger.fine(\"Named \" + namedCount + \" anon functions using \"+ bytesUsed+ \" bytes\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java b/src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java\nindex 5cdadd7..d0edb5c 100644\n--- a/src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java\n+++ b/src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java\n@@ -66,7 +66,7 @@\n     AnonymousFunctionNamingCallback namingCallback =\n         new AnonymousFunctionNamingCallback(new MappedFunctionNamer());\n     NodeTraversal.traverse(compiler, root, namingCallback);\n-    logger.info(\"Named \" + namedCount + \" anon functions using \" +\n+    logger.fine(\"Named \" + namedCount + \" anon functions using \" +\n         bytesUsed + \" bytes\");\n     if (namedCount > 0) {\n       compiler.reportCodeChange();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 69,
    "bugNodeStartChar": 2183,
    "bugNodeLength": 92,
    "fixLineNum": 69,
    "fixNodeStartChar": 2183,
    "fixNodeLength": 92,
    "sourceBeforeFix": "logger.info(\"Named \" + namedCount + \" anon functions using \"+ bytesUsed+ \" bytes\")",
    "sourceAfterFix": "logger.fine(\"Named \" + namedCount + \" anon functions using \"+ bytesUsed+ \" bytes\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java b/src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java\nindex 5cdadd7..d0edb5c 100644\n--- a/src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java\n+++ b/src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java\n@@ -66,7 +66,7 @@\n     AnonymousFunctionNamingCallback namingCallback =\n         new AnonymousFunctionNamingCallback(new MappedFunctionNamer());\n     NodeTraversal.traverse(compiler, root, namingCallback);\n-    logger.info(\"Named \" + namedCount + \" anon functions using \" +\n+    logger.fine(\"Named \" + namedCount + \" anon functions using \" +\n         bytesUsed + \" bytes\");\n     if (namedCount > 0) {\n       compiler.reportCodeChange();\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 69,
    "bugNodeStartChar": 2183,
    "bugNodeLength": 92,
    "fixLineNum": 69,
    "fixNodeStartChar": 2183,
    "fixNodeLength": 92,
    "sourceBeforeFix": "logger.info(\"Named \" + namedCount + \" anon functions using \"+ bytesUsed+ \" bytes\")",
    "sourceAfterFix": "logger.fine(\"Named \" + namedCount + \" anon functions using \"+ bytesUsed+ \" bytes\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/PhaseOptimizer.java b/src/com/google/javascript/jscomp/PhaseOptimizer.java\nindex 1b8e973..c797b6a 100644\n--- a/src/com/google/javascript/jscomp/PhaseOptimizer.java\n+++ b/src/com/google/javascript/jscomp/PhaseOptimizer.java\n@@ -245,7 +245,7 @@\n \n     @Override\n     public void process(Node externs, Node root) {\n-      logger.info(name);\n+      logger.fine(name);\n       startPass(name);\n       processInternal(externs, root);\n       endPass(externs, root);\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 248,
    "bugNodeStartChar": 7219,
    "bugNodeLength": 17,
    "fixLineNum": 248,
    "fixNodeStartChar": 7219,
    "fixNodeLength": 17,
    "sourceBeforeFix": "logger.info(name)",
    "sourceAfterFix": "logger.fine(name)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/PhaseOptimizer.java b/src/com/google/javascript/jscomp/PhaseOptimizer.java\nindex 1b8e973..c797b6a 100644\n--- a/src/com/google/javascript/jscomp/PhaseOptimizer.java\n+++ b/src/com/google/javascript/jscomp/PhaseOptimizer.java\n@@ -245,7 +245,7 @@\n \n     @Override\n     public void process(Node externs, Node root) {\n-      logger.info(name);\n+      logger.fine(name);\n       startPass(name);\n       processInternal(externs, root);\n       endPass(externs, root);\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 248,
    "bugNodeStartChar": 7219,
    "bugNodeLength": 17,
    "fixLineNum": 248,
    "fixNodeStartChar": 7219,
    "fixNodeLength": 17,
    "sourceBeforeFix": "logger.info(name)",
    "sourceAfterFix": "logger.fine(name)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/deps/DepsFileParser.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/deps/DepsFileParser.java b/src/com/google/javascript/jscomp/deps/DepsFileParser.java\nindex 28b725c..e6deb73 100644\n--- a/src/com/google/javascript/jscomp/deps/DepsFileParser.java\n+++ b/src/com/google/javascript/jscomp/deps/DepsFileParser.java\n@@ -120,7 +120,7 @@\n    */\n   public List<DependencyInfo> parseFileReader(String filePath, Reader reader) {\n     depInfos = Lists.newArrayList();\n-    logger.info(\"Parsing Dep: \" + filePath);\n+    logger.fine(\"Parsing Dep: \" + filePath);\n     doParse(filePath, reader);\n     return depInfos;\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 123,
    "bugNodeStartChar": 3972,
    "bugNodeLength": 39,
    "fixLineNum": 123,
    "fixNodeStartChar": 3972,
    "fixNodeLength": 39,
    "sourceBeforeFix": "logger.info(\"Parsing Dep: \" + filePath)",
    "sourceAfterFix": "logger.fine(\"Parsing Dep: \" + filePath)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a",
    "fixCommitParentSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "bugFilePath": "src/com/google/javascript/jscomp/deps/DepsFileParser.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/deps/DepsFileParser.java b/src/com/google/javascript/jscomp/deps/DepsFileParser.java\nindex 28b725c..e6deb73 100644\n--- a/src/com/google/javascript/jscomp/deps/DepsFileParser.java\n+++ b/src/com/google/javascript/jscomp/deps/DepsFileParser.java\n@@ -120,7 +120,7 @@\n    */\n   public List<DependencyInfo> parseFileReader(String filePath, Reader reader) {\n     depInfos = Lists.newArrayList();\n-    logger.info(\"Parsing Dep: \" + filePath);\n+    logger.fine(\"Parsing Dep: \" + filePath);\n     doParse(filePath, reader);\n     return depInfos;\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 123,
    "bugNodeStartChar": 3972,
    "bugNodeLength": 39,
    "fixLineNum": 123,
    "fixNodeStartChar": 3972,
    "fixNodeLength": 39,
    "sourceBeforeFix": "logger.info(\"Parsing Dep: \" + filePath)",
    "sourceAfterFix": "logger.fine(\"Parsing Dep: \" + filePath)"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "ce819584559a211d448da934412514e00139d8f8",
    "fixCommitParentSHA1": "f636f23bdef4b27752ca249a28463ec1b6af1f0b",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 360d6dd..671e66b 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -510,7 +510,7 @@\n \n       // After inlining some of the variable uses, some variables are unused.\n       // Re-run remove unused vars to clean it up.\n-      if (options.removeUnusedVars) {\n+      if (options.removeUnusedVars || options.removeUnusedLocalVars) {\n         passes.add(removeUnusedVars);\n       }\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 513,
    "bugNodeStartChar": 17231,
    "bugNodeLength": 24,
    "fixLineNum": 513,
    "fixNodeStartChar": 17231,
    "fixNodeLength": 57,
    "sourceBeforeFix": "options.removeUnusedVars",
    "sourceAfterFix": "options.removeUnusedVars || options.removeUnusedLocalVars"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "3517e9bad4eceb4aefaa9f3a999ec83f2db33f25",
    "fixCommitParentSHA1": "400a87f52b5d1ffc28bb85ed302aefaea5c28021",
    "bugFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 33782e9..6c5d971 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1559,7 +1559,8 @@\n \n       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n+      if( functionJSDocInfo != null  &&\n+          functionJSDocInfo.getAssociatedNode() != null) {\n         isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();\n       }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1562,
    "bugNodeStartChar": 54126,
    "bugNodeLength": 25,
    "fixLineNum": 1562,
    "fixNodeStartChar": 54127,
    "fixNodeLength": 85,
    "sourceBeforeFix": "functionJSDocInfo != null",
    "sourceAfterFix": "functionJSDocInfo != null && functionJSDocInfo.getAssociatedNode() != null"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "44c2d71195e5c4a3ded0ef2b2e593cabdeeec08b",
    "fixCommitParentSHA1": "3d17a2a35084bf9da77267cf86770fc590d2c83f",
    "bugFilePath": "src/com/google/javascript/jscomp/JSModuleGraph.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/JSModuleGraph.java b/src/com/google/javascript/jscomp/JSModuleGraph.java\nindex 1ab5801..bac1570 100644\n--- a/src/com/google/javascript/jscomp/JSModuleGraph.java\n+++ b/src/com/google/javascript/jscomp/JSModuleGraph.java\n@@ -291,7 +291,7 @@\n    * @throws MissingProvideException if an entry point was not provided\n    *     by any of the inputs.\n    */\n-  List<CompilerInput> manageDependencies(\n+  public List<CompilerInput> manageDependencies(\n       List<String> entryPoints,\n       List<CompilerInput> inputs)\n       throws CircularDependencyException, MissingProvideException {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 276,
    "bugNodeStartChar": 8941,
    "bugNodeLength": 3135,
    "fixLineNum": 276,
    "fixNodeStartChar": 8941,
    "fixNodeLength": 3142,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1cc7020ef11b3789b833ee0a5b55c442cf2ed67d",
    "fixCommitParentSHA1": "c343b71ee01d27057307a167dcbfc9ac00c4201d",
    "bugFilePath": "src/com/google/debugging/sourcemap/SourceMapSection.java",
    "fixPatch": "diff --git a/src/com/google/debugging/sourcemap/SourceMapSection.java b/src/com/google/debugging/sourcemap/SourceMapSection.java\nindex baefc9f..d2e50c9 100644\n--- a/src/com/google/debugging/sourcemap/SourceMapSection.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapSection.java\n@@ -60,11 +60,11 @@\n     this.column = column;\n   }\n \n-  static SourceMapSection forMap(String value, int line, int column) {\n+  public static SourceMapSection forMap(String value, int line, int column) {\n     return new SourceMapSection(SectionType.MAP, value, line, column);\n   }\n \n-  static SourceMapSection forURL(String value, int line, int column) {\n+  public static SourceMapSection forURL(String value, int line, int column) {\n     return new SourceMapSection(SectionType.URL, value, line, column);\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 63,
    "bugNodeStartChar": 1800,
    "bugNodeLength": 143,
    "fixLineNum": 63,
    "fixNodeStartChar": 1800,
    "fixNodeLength": 150,
    "sourceBeforeFix": "8",
    "sourceAfterFix": "9"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1cc7020ef11b3789b833ee0a5b55c442cf2ed67d",
    "fixCommitParentSHA1": "c343b71ee01d27057307a167dcbfc9ac00c4201d",
    "bugFilePath": "src/com/google/debugging/sourcemap/SourceMapSection.java",
    "fixPatch": "diff --git a/src/com/google/debugging/sourcemap/SourceMapSection.java b/src/com/google/debugging/sourcemap/SourceMapSection.java\nindex baefc9f..d2e50c9 100644\n--- a/src/com/google/debugging/sourcemap/SourceMapSection.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapSection.java\n@@ -60,11 +60,11 @@\n     this.column = column;\n   }\n \n-  static SourceMapSection forMap(String value, int line, int column) {\n+  public static SourceMapSection forMap(String value, int line, int column) {\n     return new SourceMapSection(SectionType.MAP, value, line, column);\n   }\n \n-  static SourceMapSection forURL(String value, int line, int column) {\n+  public static SourceMapSection forURL(String value, int line, int column) {\n     return new SourceMapSection(SectionType.URL, value, line, column);\n   }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 67,
    "bugNodeStartChar": 1947,
    "bugNodeLength": 143,
    "fixLineNum": 67,
    "fixNodeStartChar": 1947,
    "fixNodeLength": 150,
    "sourceBeforeFix": "8",
    "sourceAfterFix": "9"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 733,
    "bugNodeStartChar": 23829,
    "bugNodeLength": 329,
    "fixLineNum": 733,
    "fixNodeStartChar": 23829,
    "fixNodeLength": 321,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 742,
    "bugNodeStartChar": 24162,
    "bugNodeLength": 351,
    "fixLineNum": 742,
    "fixNodeStartChar": 24162,
    "fixNodeLength": 343,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 751,
    "bugNodeStartChar": 24517,
    "bugNodeLength": 335,
    "fixLineNum": 751,
    "fixNodeStartChar": 24517,
    "fixNodeLength": 327,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 766,
    "bugNodeStartChar": 25092,
    "bugNodeLength": 661,
    "fixLineNum": 766,
    "fixNodeStartChar": 25092,
    "fixNodeLength": 653,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 783,
    "bugNodeStartChar": 25757,
    "bugNodeLength": 574,
    "fixLineNum": 783,
    "fixNodeStartChar": 25757,
    "fixNodeLength": 566,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 844,
    "bugNodeStartChar": 27797,
    "bugNodeLength": 661,
    "fixLineNum": 844,
    "fixNodeStartChar": 27797,
    "fixNodeLength": 653,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 874,
    "bugNodeStartChar": 28830,
    "bugNodeLength": 598,
    "fixLineNum": 874,
    "fixNodeStartChar": 28830,
    "fixNodeLength": 590,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 887,
    "bugNodeStartChar": 29432,
    "bugNodeLength": 782,
    "fixLineNum": 887,
    "fixNodeStartChar": 29432,
    "fixNodeLength": 774,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 911,
    "bugNodeStartChar": 30218,
    "bugNodeLength": 455,
    "fixLineNum": 911,
    "fixNodeStartChar": 30218,
    "fixNodeLength": 447,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 925,
    "bugNodeStartChar": 30677,
    "bugNodeLength": 538,
    "fixLineNum": 925,
    "fixNodeStartChar": 30677,
    "fixNodeLength": 530,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 939,
    "bugNodeStartChar": 31219,
    "bugNodeLength": 561,
    "fixLineNum": 939,
    "fixNodeStartChar": 31219,
    "fixNodeLength": 553,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 953,
    "bugNodeStartChar": 31784,
    "bugNodeLength": 282,
    "fixLineNum": 953,
    "fixNodeStartChar": 31784,
    "fixNodeLength": 274,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 962,
    "bugNodeStartChar": 32070,
    "bugNodeLength": 550,
    "fixLineNum": 962,
    "fixNodeStartChar": 32070,
    "fixNodeLength": 542,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 980,
    "bugNodeStartChar": 32624,
    "bugNodeLength": 351,
    "fixLineNum": 980,
    "fixNodeStartChar": 32624,
    "fixNodeLength": 343,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 990,
    "bugNodeStartChar": 32979,
    "bugNodeLength": 377,
    "fixLineNum": 990,
    "fixNodeStartChar": 32979,
    "fixNodeLength": 369,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1000,
    "bugNodeStartChar": 33360,
    "bugNodeLength": 333,
    "fixLineNum": 1000,
    "fixNodeStartChar": 33360,
    "fixNodeLength": 325,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1061,
    "bugNodeStartChar": 35338,
    "bugNodeLength": 798,
    "fixLineNum": 1061,
    "fixNodeStartChar": 35338,
    "fixNodeLength": 790,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1085,
    "bugNodeStartChar": 36140,
    "bugNodeLength": 773,
    "fixLineNum": 1085,
    "fixNodeStartChar": 36140,
    "fixNodeLength": 765,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1106,
    "bugNodeStartChar": 36917,
    "bugNodeLength": 325,
    "fixLineNum": 1106,
    "fixNodeStartChar": 36917,
    "fixNodeLength": 317,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1123,
    "bugNodeStartChar": 37621,
    "bugNodeLength": 646,
    "fixLineNum": 1123,
    "fixNodeStartChar": 37621,
    "fixNodeLength": 638,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1145,
    "bugNodeStartChar": 38271,
    "bugNodeLength": 754,
    "fixLineNum": 1145,
    "fixNodeStartChar": 38271,
    "fixNodeLength": 746,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1164,
    "bugNodeStartChar": 39029,
    "bugNodeLength": 420,
    "fixLineNum": 1164,
    "fixNodeStartChar": 39029,
    "fixNodeLength": 412,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1213,
    "bugNodeStartChar": 40801,
    "bugNodeLength": 271,
    "fixLineNum": 1213,
    "fixNodeStartChar": 40801,
    "fixNodeLength": 263,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1222,
    "bugNodeStartChar": 41076,
    "bugNodeLength": 321,
    "fixLineNum": 1222,
    "fixNodeStartChar": 41076,
    "fixNodeLength": 313,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1231,
    "bugNodeStartChar": 41401,
    "bugNodeLength": 302,
    "fixLineNum": 1231,
    "fixNodeStartChar": 41401,
    "fixNodeLength": 294,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1240,
    "bugNodeStartChar": 41707,
    "bugNodeLength": 338,
    "fixLineNum": 1240,
    "fixNodeStartChar": 41707,
    "fixNodeLength": 330,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1250,
    "bugNodeStartChar": 42049,
    "bugNodeLength": 551,
    "fixLineNum": 1250,
    "fixNodeStartChar": 42049,
    "fixNodeLength": 543,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1266,
    "bugNodeStartChar": 42604,
    "bugNodeLength": 660,
    "fixLineNum": 1266,
    "fixNodeStartChar": 42604,
    "fixNodeLength": 652,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1285,
    "bugNodeStartChar": 43268,
    "bugNodeLength": 295,
    "fixLineNum": 1285,
    "fixNodeStartChar": 43268,
    "fixNodeLength": 287,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1294,
    "bugNodeStartChar": 43567,
    "bugNodeLength": 372,
    "fixLineNum": 1294,
    "fixNodeStartChar": 43567,
    "fixNodeLength": 364,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1304,
    "bugNodeStartChar": 43943,
    "bugNodeLength": 327,
    "fixLineNum": 1304,
    "fixNodeStartChar": 43943,
    "fixNodeLength": 319,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1313,
    "bugNodeStartChar": 44274,
    "bugNodeLength": 373,
    "fixLineNum": 1313,
    "fixNodeStartChar": 44274,
    "fixNodeLength": 365,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1324,
    "bugNodeStartChar": 44651,
    "bugNodeLength": 341,
    "fixLineNum": 1324,
    "fixNodeStartChar": 44651,
    "fixNodeLength": 333,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1334,
    "bugNodeStartChar": 44996,
    "bugNodeLength": 480,
    "fixLineNum": 1334,
    "fixNodeStartChar": 44996,
    "fixNodeLength": 472,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1350,
    "bugNodeStartChar": 45480,
    "bugNodeLength": 486,
    "fixLineNum": 1350,
    "fixNodeStartChar": 45480,
    "fixNodeLength": 478,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1364,
    "bugNodeStartChar": 45970,
    "bugNodeLength": 277,
    "fixLineNum": 1364,
    "fixNodeStartChar": 45970,
    "fixNodeLength": 269,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1375,
    "bugNodeStartChar": 46251,
    "bugNodeLength": 368,
    "fixLineNum": 1375,
    "fixNodeStartChar": 46251,
    "fixNodeLength": 360,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1387,
    "bugNodeStartChar": 46623,
    "bugNodeLength": 1192,
    "fixLineNum": 1387,
    "fixNodeStartChar": 46623,
    "fixNodeLength": 1184,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1420,
    "bugNodeStartChar": 47819,
    "bugNodeLength": 395,
    "fixLineNum": 1420,
    "fixNodeStartChar": 47819,
    "fixNodeLength": 387,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1433,
    "bugNodeStartChar": 48218,
    "bugNodeLength": 351,
    "fixLineNum": 1433,
    "fixNodeStartChar": 48218,
    "fixNodeLength": 343,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1445,
    "bugNodeStartChar": 48573,
    "bugNodeLength": 927,
    "fixLineNum": 1445,
    "fixNodeStartChar": 48573,
    "fixNodeLength": 919,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1470,
    "bugNodeStartChar": 49504,
    "bugNodeLength": 344,
    "fixLineNum": 1470,
    "fixNodeStartChar": 49504,
    "fixNodeLength": 336,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1480,
    "bugNodeStartChar": 49852,
    "bugNodeLength": 301,
    "fixLineNum": 1480,
    "fixNodeStartChar": 49852,
    "fixNodeLength": 293,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1491,
    "bugNodeStartChar": 50157,
    "bugNodeLength": 327,
    "fixLineNum": 1491,
    "fixNodeStartChar": 50157,
    "fixNodeLength": 319,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1502,
    "bugNodeStartChar": 50488,
    "bugNodeLength": 455,
    "fixLineNum": 1502,
    "fixNodeStartChar": 50488,
    "fixNodeLength": 447,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1515,
    "bugNodeStartChar": 50947,
    "bugNodeLength": 993,
    "fixLineNum": 1515,
    "fixNodeStartChar": 50947,
    "fixNodeLength": 985,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1547,
    "bugNodeStartChar": 51944,
    "bugNodeLength": 586,
    "fixLineNum": 1547,
    "fixNodeStartChar": 51944,
    "fixNodeLength": 578,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1566,
    "bugNodeStartChar": 52534,
    "bugNodeLength": 291,
    "fixLineNum": 1566,
    "fixNodeStartChar": 52534,
    "fixNodeLength": 283,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1575,
    "bugNodeStartChar": 52829,
    "bugNodeLength": 299,
    "fixLineNum": 1575,
    "fixNodeStartChar": 52829,
    "fixNodeLength": 291,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1584,
    "bugNodeStartChar": 53132,
    "bugNodeLength": 605,
    "fixLineNum": 1584,
    "fixNodeStartChar": 53132,
    "fixNodeLength": 597,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1601,
    "bugNodeStartChar": 53741,
    "bugNodeLength": 613,
    "fixLineNum": 1601,
    "fixNodeStartChar": 53741,
    "fixNodeLength": 605,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1618,
    "bugNodeStartChar": 54358,
    "bugNodeLength": 341,
    "fixLineNum": 1618,
    "fixNodeStartChar": 54358,
    "fixNodeLength": 333,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1629,
    "bugNodeStartChar": 54703,
    "bugNodeLength": 505,
    "fixLineNum": 1629,
    "fixNodeStartChar": 54703,
    "fixNodeLength": 497,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1644,
    "bugNodeStartChar": 55212,
    "bugNodeLength": 415,
    "fixLineNum": 1644,
    "fixNodeStartChar": 55212,
    "fixNodeLength": 407,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1656,
    "bugNodeStartChar": 55631,
    "bugNodeLength": 316,
    "fixLineNum": 1656,
    "fixNodeStartChar": 55631,
    "fixNodeLength": 308,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1665,
    "bugNodeStartChar": 55951,
    "bugNodeLength": 348,
    "fixLineNum": 1665,
    "fixNodeStartChar": 55951,
    "fixNodeLength": 340,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1674,
    "bugNodeStartChar": 56303,
    "bugNodeLength": 376,
    "fixLineNum": 1674,
    "fixNodeStartChar": 56303,
    "fixNodeLength": 368,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1687,
    "bugNodeStartChar": 56683,
    "bugNodeLength": 377,
    "fixLineNum": 1687,
    "fixNodeStartChar": 56683,
    "fixNodeLength": 369,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1699,
    "bugNodeStartChar": 57064,
    "bugNodeLength": 329,
    "fixLineNum": 1699,
    "fixNodeStartChar": 57064,
    "fixNodeLength": 321,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1710,
    "bugNodeStartChar": 57397,
    "bugNodeLength": 339,
    "fixLineNum": 1710,
    "fixNodeStartChar": 57397,
    "fixNodeLength": 331,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1721,
    "bugNodeStartChar": 57740,
    "bugNodeLength": 321,
    "fixLineNum": 1721,
    "fixNodeStartChar": 57740,
    "fixNodeLength": 313,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1730,
    "bugNodeStartChar": 58065,
    "bugNodeLength": 322,
    "fixLineNum": 1730,
    "fixNodeStartChar": 58065,
    "fixNodeLength": 314,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1739,
    "bugNodeStartChar": 58391,
    "bugNodeLength": 337,
    "fixLineNum": 1739,
    "fixNodeStartChar": 58391,
    "fixNodeLength": 329,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1748,
    "bugNodeStartChar": 58732,
    "bugNodeLength": 261,
    "fixLineNum": 1748,
    "fixNodeStartChar": 58732,
    "fixNodeLength": 253,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1756,
    "bugNodeStartChar": 58997,
    "bugNodeLength": 532,
    "fixLineNum": 1756,
    "fixNodeStartChar": 58997,
    "fixNodeLength": 524,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1771,
    "bugNodeStartChar": 59533,
    "bugNodeLength": 253,
    "fixLineNum": 1771,
    "fixNodeStartChar": 59533,
    "fixNodeLength": 245,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1779,
    "bugNodeStartChar": 59790,
    "bugNodeLength": 353,
    "fixLineNum": 1779,
    "fixNodeStartChar": 59790,
    "fixNodeLength": 345,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1789,
    "bugNodeStartChar": 60147,
    "bugNodeLength": 532,
    "fixLineNum": 1789,
    "fixNodeStartChar": 60147,
    "fixNodeLength": 524,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1806,
    "bugNodeStartChar": 60683,
    "bugNodeLength": 273,
    "fixLineNum": 1806,
    "fixNodeStartChar": 60683,
    "fixNodeLength": 265,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1815,
    "bugNodeStartChar": 60960,
    "bugNodeLength": 338,
    "fixLineNum": 1815,
    "fixNodeStartChar": 60960,
    "fixNodeLength": 330,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1824,
    "bugNodeStartChar": 61302,
    "bugNodeLength": 436,
    "fixLineNum": 1824,
    "fixNodeStartChar": 61302,
    "fixNodeLength": 428,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1837,
    "bugNodeStartChar": 61742,
    "bugNodeLength": 460,
    "fixLineNum": 1837,
    "fixNodeStartChar": 61742,
    "fixNodeLength": 452,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1852,
    "bugNodeStartChar": 62206,
    "bugNodeLength": 270,
    "fixLineNum": 1852,
    "fixNodeStartChar": 62206,
    "fixNodeLength": 262,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1861,
    "bugNodeStartChar": 62480,
    "bugNodeLength": 308,
    "fixLineNum": 1861,
    "fixNodeStartChar": 62480,
    "fixNodeLength": 300,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1870,
    "bugNodeStartChar": 62792,
    "bugNodeLength": 839,
    "fixLineNum": 1870,
    "fixNodeStartChar": 62792,
    "fixNodeLength": 831,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1928,
    "bugNodeStartChar": 64757,
    "bugNodeLength": 817,
    "fixLineNum": 1928,
    "fixNodeStartChar": 64757,
    "fixNodeLength": 809,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1974,
    "bugNodeStartChar": 66331,
    "bugNodeLength": 247,
    "fixLineNum": 1974,
    "fixNodeStartChar": 66331,
    "fixNodeLength": 239,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1983,
    "bugNodeStartChar": 66582,
    "bugNodeLength": 308,
    "fixLineNum": 1983,
    "fixNodeStartChar": 66582,
    "fixNodeLength": 300,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1992,
    "bugNodeStartChar": 66894,
    "bugNodeLength": 267,
    "fixLineNum": 1992,
    "fixNodeStartChar": 66894,
    "fixNodeLength": 259,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 2001,
    "bugNodeStartChar": 67165,
    "bugNodeLength": 279,
    "fixLineNum": 2001,
    "fixNodeStartChar": 67165,
    "fixNodeLength": 271,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 2010,
    "bugNodeStartChar": 67448,
    "bugNodeLength": 921,
    "fixLineNum": 2010,
    "fixNodeStartChar": 67448,
    "fixNodeLength": 913,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 2104,
    "bugNodeStartChar": 70570,
    "bugNodeLength": 895,
    "fixLineNum": 2104,
    "fixNodeStartChar": 70570,
    "fixNodeLength": 887,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0",
    "fixCommitParentSHA1": "ed28ddf3185af4116f95f5a10cf7b0c89248f6ce",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8b95e6c..cac1ae9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -731,7 +731,7 @@\n   }\n \n   /** Checks for validity of the control structures. */\n-  private final HotSwapPassFactory checkControlStructures =\n+  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -740,7 +740,7 @@\n   };\n \n   /** Checks that all constructed classes are goog.require()d. */\n-  private final HotSwapPassFactory checkRequires =\n+  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -749,7 +749,7 @@\n   };\n \n   /** Makes sure @constructor is paired with goog.provides(). */\n-  private final HotSwapPassFactory checkProvides =\n+  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -764,7 +764,7 @@\n           \"functions are set.\");\n \n   /** Generates exports for @export annotations. */\n-  private final PassFactory generateExports =\n+  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -781,7 +781,7 @@\n   };\n \n   /** Generates exports for functions associated with JSUnit. */\n-  private final PassFactory exportTestFunctions =\n+  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -846,7 +846,7 @@\n    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n-  private final PassFactory replaceMessages =\n+  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -872,7 +872,7 @@\n   };\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n-  private final PassFactory closureCheckGetCssName =\n+  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -889,7 +889,7 @@\n    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n-  private final PassFactory closureReplaceGetCssName =\n+  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -912,7 +912,7 @@\n    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n-  private final PassFactory createSyntheticBlocks =\n+  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -923,7 +923,7 @@\n   };\n \n   /** Various peephole optimizations. */\n-  private final PassFactory peepholeOptimizations =\n+  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -937,7 +937,7 @@\n   };\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n-  private final PassFactory latePeepholeOptimizations =\n+  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -951,7 +951,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final HotSwapPassFactory checkVars =\n+  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -960,7 +960,7 @@\n   };\n \n   /** Checks for RegExp references. */\n-  private final PassFactory checkRegExp =\n+  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -978,7 +978,7 @@\n   };\n \n   /** Checks that no vars are illegally shadowed. */\n-  private final PassFactory checkShadowVars =\n+  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -988,7 +988,7 @@\n   };\n \n   /** Checks that references to variables look reasonable. */\n-  private final HotSwapPassFactory checkVariableReferences =\n+  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -998,7 +998,7 @@\n   };\n \n   /** Pre-process goog.testing.ObjectPropertyString. */\n-  private final PassFactory objectPropertyStringPreprocess =\n+  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1059,7 +1059,7 @@\n };\n \n   /** Checks type usage */\n-  private final HotSwapPassFactory checkTypes =\n+  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler\n@@ -1086,7 +1086,7 @@\n    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n-  private final HotSwapPassFactory checkControlFlow =\n+  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1104,7 +1104,7 @@\n   };\n \n   /** Checks access controls. Depends on type-inference. */\n-  private final HotSwapPassFactory checkAccessControls =\n+  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1121,7 +1121,7 @@\n   }\n \n   /** A compiler pass that resolves types in the global scope. */\n-  private class GlobalTypeResolver implements HotSwapCompilerPass {\n+  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n \n     GlobalTypeResolver(AbstractCompiler compiler) {\n@@ -1143,7 +1143,7 @@\n   }\n \n   /** Checks global name usage. */\n-  private final PassFactory checkGlobalNames =\n+  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1162,7 +1162,7 @@\n   };\n \n   /** Checks that the code is ES5 or Caja compliant. */\n-  private final PassFactory checkStrictMode =\n+  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1211,7 +1211,7 @@\n   };\n \n   /** Checks that all constants are not modified */\n-  private final PassFactory checkConsts =\n+  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1220,7 +1220,7 @@\n   };\n \n   /** Computes the names of functions for later analysis. */\n-  private final PassFactory computeFunctionNames =\n+  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1229,7 +1229,7 @@\n   };\n \n   /** Skips Caja-private properties in for-in loops */\n-  private final PassFactory ignoreCajaProperties =\n+  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1238,7 +1238,7 @@\n   };\n \n   /** Inserts runtime type assertions for debugging. */\n-  private final PassFactory runtimeTypeCheck =\n+  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1248,7 +1248,7 @@\n   };\n \n   /** Generates unique ids. */\n-  private final PassFactory replaceIdGenerators =\n+  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1264,7 +1264,7 @@\n   };\n \n   /** Replace strings. */\n-  private final PassFactory replaceStrings =\n+  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1283,7 +1283,7 @@\n   };\n \n   /** Optimizes the \"arguments\" array. */\n-  private final PassFactory optimizeArgumentsArray =\n+  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1292,7 +1292,7 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory closureCodeRemoval =\n+  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1302,7 +1302,7 @@\n   };\n \n   /** Special case optimizations for closure functions. */\n-  private final PassFactory closureOptimizePrimitives =\n+  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1311,7 +1311,7 @@\n   };\n \n   /** Collapses names in the global scope. */\n-  private final PassFactory collapseProperties =\n+  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1322,7 +1322,7 @@\n   };\n \n   /** Rewrite properties as variables. */\n-  private final PassFactory collapseObjectLiterals =\n+  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1335,7 +1335,7 @@\n    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n-  private final PassFactory tightenTypesBuilder =\n+  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1348,7 +1348,7 @@\n   };\n \n   /** Devirtualize property names based on type information. */\n-  private final PassFactory disambiguateProperties =\n+  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1364,7 +1364,7 @@\n   /**\n    * Chain calls to functions that return this.\n    */\n-  private final PassFactory chainCalls =\n+  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1376,7 +1376,7 @@\n    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n-  private final PassFactory devirtualizePrototypeMethods =\n+  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1388,7 +1388,7 @@\n    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1421,7 +1421,7 @@\n    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n-  private final PassFactory markPureFunctions =\n+  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1434,7 +1434,7 @@\n    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n-  private final PassFactory markNoSideEffectCalls =\n+  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1443,7 +1443,7 @@\n   };\n \n   /** Inlines variables heuristically. */\n-  private final PassFactory inlineVariables =\n+  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1468,7 +1468,7 @@\n   };\n \n   /** Inlines variables that are marked as constants. */\n-  private final PassFactory inlineConstants =\n+  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1480,7 +1480,7 @@\n   /**\n    * Perform local control flow optimizations.\n    */\n-  private final PassFactory minimizeExitPoints =\n+  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1491,7 +1491,7 @@\n   /**\n    * Use data flow analysis to remove dead branches.\n    */\n-  private final PassFactory removeUnreachableCode =\n+  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1502,7 +1502,7 @@\n   /**\n    * Remove prototype properties that do not appear to be used.\n    */\n-  private final PassFactory removeUnusedPrototypeProperties =\n+  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1516,7 +1516,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass =\n+  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1548,7 +1548,7 @@\n    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n-  private final PassFactory smartNamePass2 =\n+  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1564,7 +1564,7 @@\n   };\n \n   /** Inlines simple methods, like getters */\n-  private final PassFactory inlineSimpleMethods =\n+  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1573,7 +1573,7 @@\n   };\n \n   /** Kills dead assignments. */\n-  private final PassFactory deadAssignmentsElimination =\n+  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1582,7 +1582,7 @@\n   };\n \n   /** Inlines function calls. */\n-  private final PassFactory inlineFunctions =\n+  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1599,7 +1599,7 @@\n   };\n \n   /** Removes variables that are never used. */\n-  private final PassFactory removeUnusedVars =\n+  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1618,7 +1618,7 @@\n   /**\n    * Move global symbols to a deeper common module\n    */\n-  private final PassFactory crossModuleCodeMotion =\n+  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1629,7 +1629,7 @@\n   /**\n    * Move methods to a deeper common module\n    */\n-  private final PassFactory crossModuleMethodMotion =\n+  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1644,7 +1644,7 @@\n   /**\n    * Specialize the initial module at the cost of later modules\n    */\n-  private final PassFactory specializeInitialModule =\n+  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1654,7 +1654,7 @@\n   };\n \n   /** A data-flow based variable inliner. */\n-  private final PassFactory flowSensitiveInlineVariables =\n+  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1663,7 +1663,7 @@\n   };\n \n   /** Uses register-allocation algorithms to use fewer variables. */\n-  private final PassFactory coalesceVariableNames =\n+  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1675,7 +1675,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory exploitAssign =\n+  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1688,7 +1688,7 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n-  private final PassFactory collapseVariableDeclarations =\n+  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1699,7 +1699,7 @@\n   /**\n    * Simple global collapses of variable declarations.\n    */\n-  private final PassFactory groupVariableDeclarations =\n+  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1710,7 +1710,7 @@\n   /**\n    * Extracts common sub-expressions.\n    */\n-  private final PassFactory extractPrototypeMemberDeclarations =\n+  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1719,7 +1719,7 @@\n   };\n \n   /** Rewrites common function definitions to be more compact. */\n-  private final PassFactory rewriteFunctionExpressions =\n+  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1728,7 +1728,7 @@\n   };\n \n   /** Collapses functions to not use the VAR keyword. */\n-  private final PassFactory collapseAnonymousFunctions =\n+  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1737,7 +1737,7 @@\n   };\n \n   /** Moves function declarations to the top, to simulate actual hoisting. */\n-  private final PassFactory moveFunctionDeclarations =\n+  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1745,7 +1745,7 @@\n     }\n   };\n \n-  private final PassFactory nameUnmappedAnonymousFunctions =\n+  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1753,7 +1753,7 @@\n     }\n   };\n \n-  private final PassFactory nameMappedAnonymousFunctions =\n+  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1768,7 +1768,7 @@\n     }\n   };\n \n-  private final PassFactory operaCompoundAssignFix =\n+  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1777,7 +1777,7 @@\n   };\n \n   /** Alias external symbols. */\n-  private final PassFactory aliasExternals =\n+  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1790,7 +1790,7 @@\n    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n-  private final PassFactory aliasStrings =\n+  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1804,7 +1804,7 @@\n   };\n \n   /** Aliases common keywords (true, false) */\n-  private final PassFactory aliasKeywords =\n+  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1813,7 +1813,7 @@\n   };\n \n   /** Handling for the ObjectPropertyString primitive. */\n-  private final PassFactory objectPropertyStringPostprocess =\n+  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1825,7 +1825,7 @@\n    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n-  private final PassFactory ambiguateProperties =\n+  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1837,7 +1837,7 @@\n   /**\n    * Mark the point at which the normalized AST assumptions no longer hold.\n    */\n-  private final PassFactory markUnnormalized =\n+  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1850,7 +1850,7 @@\n   };\n \n   /** Denormalize the AST for code generation. */\n-  private final PassFactory denormalize =\n+  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1859,7 +1859,7 @@\n   };\n \n   /** Inverting name normalization. */\n-  private final PassFactory invertContextualRenaming =\n+  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1870,7 +1870,7 @@\n   /**\n    * Renames properties.\n    */\n-  private final PassFactory renameProperties =\n+  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1926,7 +1926,7 @@\n   }\n \n   /** Renames variables. */\n-  private final PassFactory renameVars =\n+  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -1972,7 +1972,7 @@\n   }\n \n   /** Renames labels */\n-  private final PassFactory renameLabels =\n+  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1981,7 +1981,7 @@\n   };\n \n   /** Convert bracket access to dot access */\n-  private final PassFactory convertToDottedProperties =\n+  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1990,7 +1990,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckAst =\n+  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -1999,7 +1999,7 @@\n   };\n \n   /** Checks that all variables are defined. */\n-  private final PassFactory sanityCheckVars =\n+  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n@@ -2008,7 +2008,7 @@\n   };\n \n   /** Adds instrumentations according to an instrumentation template. */\n-  private final PassFactory instrumentFunctions =\n+  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2101,7 +2101,7 @@\n     return additionalReplacements;\n   }\n \n-  private final PassFactory printNameReferenceGraph =\n+  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n@@ -2126,7 +2126,7 @@\n     }\n   };\n \n-  private final PassFactory printNameReferenceReport =\n+  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 2129,
    "bugNodeStartChar": 71469,
    "bugNodeLength": 1001,
    "fixLineNum": 2129,
    "fixNodeStartChar": 71469,
    "fixNodeLength": 993,
    "sourceBeforeFix": "18",
    "sourceAfterFix": "16"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "fixCommitSHA1": "46ac40646a39bd7aafde961695de777d725c0b7b",
    "fixCommitParentSHA1": "22c4ea0db9484352812536abe754df9540ce7793",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex b96deef..918ffc9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -932,7 +932,7 @@\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       return new PeepholeOptimizationsPass(compiler,\n-            new PeepholeSubstituteAlternateSyntax(true),\n+            new PeepholeSubstituteAlternateSyntax(false),\n             new PeepholeReplaceKnownMethods(),\n             new PeepholeRemoveDeadCode(),\n             new PeepholeFoldConstants(),\n@@ -942,13 +942,13 @@\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n   final PassFactory latePeepholeOptimizations =\n-      new PassFactory(\"peepholeOptimizations\", false) {\n+      new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       return new PeepholeOptimizationsPass(compiler,\n             new StatementFusion(),\n             new PeepholeRemoveDeadCode(),\n-            new PeepholeSubstituteAlternateSyntax(false),\n+            new PeepholeSubstituteAlternateSyntax(true),\n             new PeepholeReplaceKnownMethods(),\n             new PeepholeFoldConstants());\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 935,
    "bugNodeStartChar": 31035,
    "bugNodeLength": 43,
    "fixLineNum": 935,
    "fixNodeStartChar": 31035,
    "fixNodeLength": 44,
    "sourceBeforeFix": "new PeepholeSubstituteAlternateSyntax(true)",
    "sourceAfterFix": "new PeepholeSubstituteAlternateSyntax(false)"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "fixCommitSHA1": "46ac40646a39bd7aafde961695de777d725c0b7b",
    "fixCommitParentSHA1": "22c4ea0db9484352812536abe754df9540ce7793",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex b96deef..918ffc9 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -932,7 +932,7 @@\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       return new PeepholeOptimizationsPass(compiler,\n-            new PeepholeSubstituteAlternateSyntax(true),\n+            new PeepholeSubstituteAlternateSyntax(false),\n             new PeepholeReplaceKnownMethods(),\n             new PeepholeRemoveDeadCode(),\n             new PeepholeFoldConstants(),\n@@ -942,13 +942,13 @@\n \n   /** Same as peepholeOptimizations but aggressively merges code together */\n   final PassFactory latePeepholeOptimizations =\n-      new PassFactory(\"peepholeOptimizations\", false) {\n+      new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       return new PeepholeOptimizationsPass(compiler,\n             new StatementFusion(),\n             new PeepholeRemoveDeadCode(),\n-            new PeepholeSubstituteAlternateSyntax(false),\n+            new PeepholeSubstituteAlternateSyntax(true),\n             new PeepholeReplaceKnownMethods(),\n             new PeepholeFoldConstants());\n     }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 951,
    "bugNodeStartChar": 31685,
    "bugNodeLength": 44,
    "fixLineNum": 951,
    "fixNodeStartChar": 31685,
    "fixNodeLength": 43,
    "sourceBeforeFix": "new PeepholeSubstituteAlternateSyntax(false)",
    "sourceAfterFix": "new PeepholeSubstituteAlternateSyntax(true)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "552148a7cdf57d0adfab8ca14c99d5f600627512",
    "fixCommitParentSHA1": "aebca72a977c23bf2fa7901eb70e52d0702fddf8",
    "bugFilePath": "src/com/google/javascript/jscomp/CheckGlobalNames.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalNames.java b/src/com/google/javascript/jscomp/CheckGlobalNames.java\nindex 1e63880..8542008 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalNames.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalNames.java\n@@ -43,7 +43,7 @@\n   static final DiagnosticType NAME_DEFINED_LATE_WARNING =\n       DiagnosticType.warning(\n           \"JSC_NAME_DEFINED_LATE\",\n-          \"{0} is not defined yet, so properties cannot be referenced on it\");\n+          \"{0} defined before its owner. {1} is defined at {2}:{3}\");\n \n   static final DiagnosticType STRICT_MODULE_DEP_QNAME =\n       DiagnosticType.disabled(\n@@ -131,7 +131,11 @@\n           parent.declaration.preOrderIndex > ref.preOrderIndex) {\n         compiler.report(\n             JSError.make(ref.source.getName(), ref.node,\n-                NAME_DEFINED_LATE_WARNING, parent.fullName()));\n+                NAME_DEFINED_LATE_WARNING,\n+                name.fullName(),\n+                parent.fullName(),\n+                parent.declaration.source.getName(),\n+                String.valueOf(parent.declaration.node.getLineno())));\n       }\n     }\n   }\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 133,
    "bugNodeStartChar": 4736,
    "bugNodeLength": 106,
    "fixLineNum": 133,
    "fixNodeStartChar": 4736,
    "fixNodeLength": 277,
    "sourceBeforeFix": "JSError.make(ref.source.getName(),ref.node,NAME_DEFINED_LATE_WARNING,parent.fullName())",
    "sourceAfterFix": "JSError.make(ref.source.getName(),ref.node,NAME_DEFINED_LATE_WARNING,name.fullName(),parent.fullName(),parent.declaration.source.getName(),String.valueOf(parent.declaration.node.getLineno()))"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "290bffbf3b0a6917be44513accef3a082543bbb4",
    "fixCommitParentSHA1": "63c9ab97253d7bfb1d5e2a27c39c9c3a8a6d3d7e",
    "bugFilePath": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\nindex 65b2cda..bc7f764 100644\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n@@ -1570,7 +1570,7 @@\n         reporter.warning(\n             \"Duplicate record field \" + fieldName,\n             sourceName,\n-            n.getLineno(), \"\", n.getCharno());\n+            n.getLineno(), \"\", fieldNameNode.getCharno());\n       }\n     }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1573,
    "bugNodeStartChar": 57240,
    "bugNodeLength": 13,
    "fixLineNum": 1573,
    "fixNodeStartChar": 57240,
    "fixNodeLength": 25,
    "sourceBeforeFix": "n.getCharno()",
    "sourceAfterFix": "fieldNameNode.getCharno()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "290bffbf3b0a6917be44513accef3a082543bbb4",
    "fixCommitParentSHA1": "63c9ab97253d7bfb1d5e2a27c39c9c3a8a6d3d7e",
    "bugFilePath": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "fixPatch": "diff --git a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\nindex 65b2cda..bc7f764 100644\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n@@ -1570,7 +1570,7 @@\n         reporter.warning(\n             \"Duplicate record field \" + fieldName,\n             sourceName,\n-            n.getLineno(), \"\", n.getCharno());\n+            n.getLineno(), \"\", fieldNameNode.getCharno());\n       }\n     }\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1573,
    "bugNodeStartChar": 57240,
    "bugNodeLength": 13,
    "fixLineNum": 1573,
    "fixNodeStartChar": 57240,
    "fixNodeLength": 25,
    "sourceBeforeFix": "n.getCharno()",
    "sourceAfterFix": "fieldNameNode.getCharno()"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "e76e5680cb1816ba1e420fd6aa2c37f6fdb8c941",
    "fixCommitParentSHA1": "027f4949c97913eac7dc4ba2402ceaf66246685e",
    "bugFilePath": "src/com/google/javascript/jscomp/CommandLineRunner.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex b1f0ccf..a5ce6ae 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -637,7 +637,8 @@\n     \"w3c_selectors.js\",\n     \"w3c_xml.js\",\n     \"window.js\",\n-    \"webkit_notifications.js\");\n+    \"webkit_notifications.js\",\n+    \"webgl.js\");\n \n   /**\n    * @return a mutable list\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 593,
    "bugNodeStartChar": 22725,
    "bugNodeLength": 862,
    "fixLineNum": 593,
    "fixNodeStartChar": 22725,
    "fixNodeLength": 878,
    "sourceBeforeFix": "ImmutableList.of(\"es3.js\",\"es5.js\",\"w3c_event.js\",\"w3c_event3.js\",\"gecko_event.js\",\"ie_event.js\",\"webkit_event.js\",\"w3c_dom1.js\",\"w3c_dom2.js\",\"w3c_dom3.js\",\"gecko_dom.js\",\"ie_dom.js\",\"webkit_dom.js\",\"w3c_css.js\",\"gecko_css.js\",\"ie_css.js\",\"webkit_css.js\",\"google.js\",\"deprecated.js\",\"fileapi.js\",\"flash.js\",\"gears_symbols.js\",\"gears_types.js\",\"gecko_xml.js\",\"html5.js\",\"ie_vml.js\",\"iphone.js\",\"webstorage.js\",\"w3c_css3d.js\",\"w3c_elementtraversal.js\",\"w3c_geolocation.js\",\"w3c_indexeddb.js\",\"w3c_range.js\",\"w3c_selectors.js\",\"w3c_xml.js\",\"window.js\",\"webkit_notifications.js\")",
    "sourceAfterFix": "ImmutableList.of(\"es3.js\",\"es5.js\",\"w3c_event.js\",\"w3c_event3.js\",\"gecko_event.js\",\"ie_event.js\",\"webkit_event.js\",\"w3c_dom1.js\",\"w3c_dom2.js\",\"w3c_dom3.js\",\"gecko_dom.js\",\"ie_dom.js\",\"webkit_dom.js\",\"w3c_css.js\",\"gecko_css.js\",\"ie_css.js\",\"webkit_css.js\",\"google.js\",\"deprecated.js\",\"fileapi.js\",\"flash.js\",\"gears_symbols.js\",\"gears_types.js\",\"gecko_xml.js\",\"html5.js\",\"ie_vml.js\",\"iphone.js\",\"webstorage.js\",\"w3c_css3d.js\",\"w3c_elementtraversal.js\",\"w3c_geolocation.js\",\"w3c_indexeddb.js\",\"w3c_range.js\",\"w3c_selectors.js\",\"w3c_xml.js\",\"window.js\",\"webkit_notifications.js\",\"webgl.js\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc",
    "fixCommitParentSHA1": "e4cf805a6a27301672660756202e8dedee1e012b",
    "bugFilePath": "test/com/google/javascript/rhino/NodeTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/rhino/NodeTest.java b/test/com/google/javascript/rhino/NodeTest.java\nindex 5b5ad2b..6ad4d06 100644\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n@@ -107,13 +107,13 @@\n \n   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n-    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n+    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n \n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n-    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n+    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n \n   public void testCheckTreeEqualsImplDifferentIncProp() {\n@@ -130,7 +130,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsSameNull() {\n@@ -138,7 +138,7 @@\n     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferent() {\n@@ -148,7 +148,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferentNull() {\n@@ -157,7 +157,7 @@\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testVarArgs1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 110,
    "bugNodeStartChar": 3912,
    "bugNodeLength": 34,
    "fixLineNum": 110,
    "fixNodeStartChar": 3912,
    "fixNodeLength": 27,
    "sourceBeforeFix": "node1.checkTreeEqualsSilent(node1)",
    "sourceAfterFix": "node1.isEquivalentTo(node1)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc",
    "fixCommitParentSHA1": "e4cf805a6a27301672660756202e8dedee1e012b",
    "bugFilePath": "test/com/google/javascript/rhino/NodeTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/rhino/NodeTest.java b/test/com/google/javascript/rhino/NodeTest.java\nindex 5b5ad2b..6ad4d06 100644\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n@@ -107,13 +107,13 @@\n \n   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n-    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n+    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n \n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n-    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n+    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n \n   public void testCheckTreeEqualsImplDifferentIncProp() {\n@@ -130,7 +130,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsSameNull() {\n@@ -138,7 +138,7 @@\n     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferent() {\n@@ -148,7 +148,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferentNull() {\n@@ -157,7 +157,7 @@\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testVarArgs1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 110,
    "bugNodeStartChar": 3912,
    "bugNodeLength": 34,
    "fixLineNum": 110,
    "fixNodeStartChar": 3912,
    "fixNodeLength": 27,
    "sourceBeforeFix": "node1.checkTreeEqualsSilent(node1)",
    "sourceAfterFix": "node1.isEquivalentTo(node1)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc",
    "fixCommitParentSHA1": "e4cf805a6a27301672660756202e8dedee1e012b",
    "bugFilePath": "test/com/google/javascript/rhino/NodeTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/rhino/NodeTest.java b/test/com/google/javascript/rhino/NodeTest.java\nindex 5b5ad2b..6ad4d06 100644\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n@@ -107,13 +107,13 @@\n \n   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n-    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n+    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n \n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n-    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n+    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n \n   public void testCheckTreeEqualsImplDifferentIncProp() {\n@@ -130,7 +130,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsSameNull() {\n@@ -138,7 +138,7 @@\n     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferent() {\n@@ -148,7 +148,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferentNull() {\n@@ -157,7 +157,7 @@\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testVarArgs1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 116,
    "bugNodeStartChar": 4092,
    "bugNodeLength": 34,
    "fixLineNum": 116,
    "fixNodeStartChar": 4092,
    "fixNodeLength": 27,
    "sourceBeforeFix": "node1.checkTreeEqualsSilent(node2)",
    "sourceAfterFix": "node1.isEquivalentTo(node2)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc",
    "fixCommitParentSHA1": "e4cf805a6a27301672660756202e8dedee1e012b",
    "bugFilePath": "test/com/google/javascript/rhino/NodeTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/rhino/NodeTest.java b/test/com/google/javascript/rhino/NodeTest.java\nindex 5b5ad2b..6ad4d06 100644\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n@@ -107,13 +107,13 @@\n \n   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n-    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n+    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n \n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n-    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n+    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n \n   public void testCheckTreeEqualsImplDifferentIncProp() {\n@@ -130,7 +130,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsSameNull() {\n@@ -138,7 +138,7 @@\n     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferent() {\n@@ -148,7 +148,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferentNull() {\n@@ -157,7 +157,7 @@\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testVarArgs1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 116,
    "bugNodeStartChar": 4092,
    "bugNodeLength": 34,
    "fixLineNum": 116,
    "fixNodeStartChar": 4092,
    "fixNodeLength": 27,
    "sourceBeforeFix": "node1.checkTreeEqualsSilent(node2)",
    "sourceAfterFix": "node1.isEquivalentTo(node2)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc",
    "fixCommitParentSHA1": "e4cf805a6a27301672660756202e8dedee1e012b",
    "bugFilePath": "test/com/google/javascript/rhino/NodeTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/rhino/NodeTest.java b/test/com/google/javascript/rhino/NodeTest.java\nindex 5b5ad2b..6ad4d06 100644\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n@@ -107,13 +107,13 @@\n \n   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n-    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n+    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n \n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n-    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n+    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n \n   public void testCheckTreeEqualsImplDifferentIncProp() {\n@@ -130,7 +130,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsSameNull() {\n@@ -138,7 +138,7 @@\n     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferent() {\n@@ -148,7 +148,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferentNull() {\n@@ -157,7 +157,7 @@\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testVarArgs1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 133,
    "bugNodeStartChar": 4825,
    "bugNodeLength": 43,
    "fixLineNum": 133,
    "fixNodeStartChar": 4825,
    "fixNodeLength": 32,
    "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)",
    "sourceAfterFix": "node1.isEquivalentToTyped(node2)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc",
    "fixCommitParentSHA1": "e4cf805a6a27301672660756202e8dedee1e012b",
    "bugFilePath": "test/com/google/javascript/rhino/NodeTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/rhino/NodeTest.java b/test/com/google/javascript/rhino/NodeTest.java\nindex 5b5ad2b..6ad4d06 100644\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n@@ -107,13 +107,13 @@\n \n   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n-    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n+    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n \n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n-    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n+    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n \n   public void testCheckTreeEqualsImplDifferentIncProp() {\n@@ -130,7 +130,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsSameNull() {\n@@ -138,7 +138,7 @@\n     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferent() {\n@@ -148,7 +148,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferentNull() {\n@@ -157,7 +157,7 @@\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testVarArgs1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 133,
    "bugNodeStartChar": 4825,
    "bugNodeLength": 43,
    "fixLineNum": 133,
    "fixNodeStartChar": 4825,
    "fixNodeLength": 32,
    "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)",
    "sourceAfterFix": "node1.isEquivalentToTyped(node2)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc",
    "fixCommitParentSHA1": "e4cf805a6a27301672660756202e8dedee1e012b",
    "bugFilePath": "test/com/google/javascript/rhino/NodeTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/rhino/NodeTest.java b/test/com/google/javascript/rhino/NodeTest.java\nindex 5b5ad2b..6ad4d06 100644\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n@@ -107,13 +107,13 @@\n \n   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n-    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n+    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n \n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n-    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n+    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n \n   public void testCheckTreeEqualsImplDifferentIncProp() {\n@@ -130,7 +130,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsSameNull() {\n@@ -138,7 +138,7 @@\n     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferent() {\n@@ -148,7 +148,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferentNull() {\n@@ -157,7 +157,7 @@\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testVarArgs1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 141,
    "bugNodeStartChar": 5192,
    "bugNodeLength": 43,
    "fixLineNum": 141,
    "fixNodeStartChar": 5192,
    "fixNodeLength": 32,
    "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)",
    "sourceAfterFix": "node1.isEquivalentToTyped(node2)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc",
    "fixCommitParentSHA1": "e4cf805a6a27301672660756202e8dedee1e012b",
    "bugFilePath": "test/com/google/javascript/rhino/NodeTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/rhino/NodeTest.java b/test/com/google/javascript/rhino/NodeTest.java\nindex 5b5ad2b..6ad4d06 100644\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n@@ -107,13 +107,13 @@\n \n   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n-    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n+    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n \n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n-    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n+    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n \n   public void testCheckTreeEqualsImplDifferentIncProp() {\n@@ -130,7 +130,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsSameNull() {\n@@ -138,7 +138,7 @@\n     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferent() {\n@@ -148,7 +148,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferentNull() {\n@@ -157,7 +157,7 @@\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testVarArgs1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 141,
    "bugNodeStartChar": 5192,
    "bugNodeLength": 43,
    "fixLineNum": 141,
    "fixNodeStartChar": 5192,
    "fixNodeLength": 32,
    "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)",
    "sourceAfterFix": "node1.isEquivalentToTyped(node2)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc",
    "fixCommitParentSHA1": "e4cf805a6a27301672660756202e8dedee1e012b",
    "bugFilePath": "test/com/google/javascript/rhino/NodeTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/rhino/NodeTest.java b/test/com/google/javascript/rhino/NodeTest.java\nindex 5b5ad2b..6ad4d06 100644\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n@@ -107,13 +107,13 @@\n \n   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n-    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n+    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n \n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n-    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n+    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n \n   public void testCheckTreeEqualsImplDifferentIncProp() {\n@@ -130,7 +130,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsSameNull() {\n@@ -138,7 +138,7 @@\n     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferent() {\n@@ -148,7 +148,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferentNull() {\n@@ -157,7 +157,7 @@\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testVarArgs1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 151,
    "bugNodeStartChar": 5703,
    "bugNodeLength": 43,
    "fixLineNum": 151,
    "fixNodeStartChar": 5703,
    "fixNodeLength": 32,
    "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)",
    "sourceAfterFix": "node1.isEquivalentToTyped(node2)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc",
    "fixCommitParentSHA1": "e4cf805a6a27301672660756202e8dedee1e012b",
    "bugFilePath": "test/com/google/javascript/rhino/NodeTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/rhino/NodeTest.java b/test/com/google/javascript/rhino/NodeTest.java\nindex 5b5ad2b..6ad4d06 100644\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n@@ -107,13 +107,13 @@\n \n   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n-    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n+    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n \n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n-    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n+    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n \n   public void testCheckTreeEqualsImplDifferentIncProp() {\n@@ -130,7 +130,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsSameNull() {\n@@ -138,7 +138,7 @@\n     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferent() {\n@@ -148,7 +148,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferentNull() {\n@@ -157,7 +157,7 @@\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testVarArgs1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 151,
    "bugNodeStartChar": 5703,
    "bugNodeLength": 43,
    "fixLineNum": 151,
    "fixNodeStartChar": 5703,
    "fixNodeLength": 32,
    "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)",
    "sourceAfterFix": "node1.isEquivalentToTyped(node2)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc",
    "fixCommitParentSHA1": "e4cf805a6a27301672660756202e8dedee1e012b",
    "bugFilePath": "test/com/google/javascript/rhino/NodeTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/rhino/NodeTest.java b/test/com/google/javascript/rhino/NodeTest.java\nindex 5b5ad2b..6ad4d06 100644\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n@@ -107,13 +107,13 @@\n \n   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n-    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n+    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n \n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n-    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n+    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n \n   public void testCheckTreeEqualsImplDifferentIncProp() {\n@@ -130,7 +130,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsSameNull() {\n@@ -138,7 +138,7 @@\n     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferent() {\n@@ -148,7 +148,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferentNull() {\n@@ -157,7 +157,7 @@\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testVarArgs1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 160,
    "bugNodeStartChar": 6147,
    "bugNodeLength": 43,
    "fixLineNum": 160,
    "fixNodeStartChar": 6147,
    "fixNodeLength": 32,
    "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)",
    "sourceAfterFix": "node1.isEquivalentToTyped(node2)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc",
    "fixCommitParentSHA1": "e4cf805a6a27301672660756202e8dedee1e012b",
    "bugFilePath": "test/com/google/javascript/rhino/NodeTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/rhino/NodeTest.java b/test/com/google/javascript/rhino/NodeTest.java\nindex 5b5ad2b..6ad4d06 100644\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n@@ -107,13 +107,13 @@\n \n   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n-    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n+    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n \n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n-    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n+    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n \n   public void testCheckTreeEqualsImplDifferentIncProp() {\n@@ -130,7 +130,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsSameNull() {\n@@ -138,7 +138,7 @@\n     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferent() {\n@@ -148,7 +148,7 @@\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testCheckTreeTypeAwareEqualsDifferentNull() {\n@@ -157,7 +157,7 @@\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n-    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n+    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n \n   public void testVarArgs1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 160,
    "bugNodeStartChar": 6147,
    "bugNodeLength": 43,
    "fixLineNum": 160,
    "fixNodeStartChar": 6147,
    "fixNodeLength": 32,
    "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)",
    "sourceAfterFix": "node1.isEquivalentToTyped(node2)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "4031a54f71a1df311b0b9ab24640297e0d526bfe",
    "fixCommitParentSHA1": "9c1eea2dc00e2feb14c13e9a00d6a392f680df17",
    "bugFilePath": "src/com/google/javascript/jscomp/VarCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/VarCheck.java b/src/com/google/javascript/jscomp/VarCheck.java\nindex 19b4d21..8de8c93 100644\n--- a/src/com/google/javascript/jscomp/VarCheck.java\n+++ b/src/com/google/javascript/jscomp/VarCheck.java\n@@ -53,7 +53,7 @@\n       \"module {1}\");\n \n   static final DiagnosticType NAME_REFERENCE_IN_EXTERNS_ERROR =\n-    DiagnosticType.error(\n+    DiagnosticType.warning(\n       \"JSC_NAME_REFERENCE_IN_EXTERNS\",\n       \"accessing name {0} in externs has no effect\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 56,
    "bugNodeStartChar": 2062,
    "bugNodeLength": 113,
    "fixLineNum": 56,
    "fixNodeStartChar": 2062,
    "fixNodeLength": 115,
    "sourceBeforeFix": "DiagnosticType.error(\"JSC_NAME_REFERENCE_IN_EXTERNS\",\"accessing name {0} in externs has no effect\")",
    "sourceAfterFix": "DiagnosticType.warning(\"JSC_NAME_REFERENCE_IN_EXTERNS\",\"accessing name {0} in externs has no effect\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "4031a54f71a1df311b0b9ab24640297e0d526bfe",
    "fixCommitParentSHA1": "9c1eea2dc00e2feb14c13e9a00d6a392f680df17",
    "bugFilePath": "src/com/google/javascript/jscomp/VarCheck.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/VarCheck.java b/src/com/google/javascript/jscomp/VarCheck.java\nindex 19b4d21..8de8c93 100644\n--- a/src/com/google/javascript/jscomp/VarCheck.java\n+++ b/src/com/google/javascript/jscomp/VarCheck.java\n@@ -53,7 +53,7 @@\n       \"module {1}\");\n \n   static final DiagnosticType NAME_REFERENCE_IN_EXTERNS_ERROR =\n-    DiagnosticType.error(\n+    DiagnosticType.warning(\n       \"JSC_NAME_REFERENCE_IN_EXTERNS\",\n       \"accessing name {0} in externs has no effect\");\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 56,
    "bugNodeStartChar": 2062,
    "bugNodeLength": 113,
    "fixLineNum": 56,
    "fixNodeStartChar": 2062,
    "fixNodeLength": 115,
    "sourceBeforeFix": "DiagnosticType.error(\"JSC_NAME_REFERENCE_IN_EXTERNS\",\"accessing name {0} in externs has no effect\")",
    "sourceAfterFix": "DiagnosticType.warning(\"JSC_NAME_REFERENCE_IN_EXTERNS\",\"accessing name {0} in externs has no effect\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "4031a54f71a1df311b0b9ab24640297e0d526bfe",
    "fixCommitParentSHA1": "9c1eea2dc00e2feb14c13e9a00d6a392f680df17",
    "bugFilePath": "test/com/google/javascript/jscomp/VarCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/VarCheckTest.java b/test/com/google/javascript/jscomp/VarCheckTest.java\nindex 79d60c3..f23a762 100644\n--- a/test/com/google/javascript/jscomp/VarCheckTest.java\n+++ b/test/com/google/javascript/jscomp/VarCheckTest.java\n@@ -107,12 +107,12 @@\n \n   public void testVarReferenceInExterns() {\n     testSame(\"asdf;\", \"var asdf;\",\n-        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR, true);\n+        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);\n   }\n \n   public void testCallInExterns() {\n     testSame(\"yz();\", \"function yz() {}\",\n-        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR, true);\n+        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);\n   }\n \n   public void testPropReferenceInExterns1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 109,
    "bugNodeStartChar": 3091,
    "bugNodeLength": 86,
    "fixLineNum": 109,
    "fixNodeStartChar": 3091,
    "fixNodeLength": 80,
    "sourceBeforeFix": "testSame(\"asdf;\",\"var asdf;\",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,true)",
    "sourceAfterFix": "testSame(\"asdf;\",\"var asdf;\",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR)"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "4031a54f71a1df311b0b9ab24640297e0d526bfe",
    "fixCommitParentSHA1": "9c1eea2dc00e2feb14c13e9a00d6a392f680df17",
    "bugFilePath": "test/com/google/javascript/jscomp/VarCheckTest.java",
    "fixPatch": "diff --git a/test/com/google/javascript/jscomp/VarCheckTest.java b/test/com/google/javascript/jscomp/VarCheckTest.java\nindex 79d60c3..f23a762 100644\n--- a/test/com/google/javascript/jscomp/VarCheckTest.java\n+++ b/test/com/google/javascript/jscomp/VarCheckTest.java\n@@ -107,12 +107,12 @@\n \n   public void testVarReferenceInExterns() {\n     testSame(\"asdf;\", \"var asdf;\",\n-        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR, true);\n+        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);\n   }\n \n   public void testCallInExterns() {\n     testSame(\"yz();\", \"function yz() {}\",\n-        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR, true);\n+        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);\n   }\n \n   public void testPropReferenceInExterns1() {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 114,
    "bugNodeStartChar": 3224,
    "bugNodeLength": 93,
    "fixLineNum": 114,
    "fixNodeStartChar": 3224,
    "fixNodeLength": 87,
    "sourceBeforeFix": "testSame(\"yz();\",\"function yz() {}\",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,true)",
    "sourceAfterFix": "testSame(\"yz();\",\"function yz() {}\",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "aafd3788df73bd0d21c9411014a7cbda0a5bbd17",
    "fixCommitParentSHA1": "ad757409572dcd9f8c47a37aa6af9b2cc42d2fa9",
    "bugFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 8575230..07d45ef 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -348,7 +348,7 @@\n     // Abstract method removal works best on minimally modified code, and also\n     // only needs to run once.\n     if (options.closurePass && options.removeAbstractMethods) {\n-      passes.add(removeAbstractMethods);\n+      passes.add(closureCodeRemoval);\n     }\n \n     // Collapsing properties can undo constant inlining, so we do this before\n@@ -1209,11 +1209,11 @@\n   };\n \n   /** Remove variables set to goog.abstractMethod. */\n-  private final PassFactory removeAbstractMethods =\n-      new PassFactory(\"removeAbstractMethods\", true) {\n+  private final PassFactory closureCodeRemoval =\n+      new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n-      return new GoogleCodeRemoval(compiler);\n+      return new ClosureCodeRemoval(compiler);\n     }\n   };\n \n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 1216,
    "bugNodeStartChar": 40908,
    "bugNodeLength": 31,
    "fixLineNum": 1216,
    "fixNodeStartChar": 40908,
    "fixNodeLength": 32,
    "sourceBeforeFix": "new GoogleCodeRemoval(compiler)",
    "sourceAfterFix": "new ClosureCodeRemoval(compiler)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "5592f80e96e7fe3b7751c441efdd8eba6ccfc4ba",
    "fixCommitParentSHA1": "f975b58c3a9ece334d9c281ef415d901e18d96ed",
    "bugFilePath": "src/com/google/javascript/jscomp/AbstractCompilerRunner.java",
    "fixPatch": "diff --git a/src/com/google/javascript/jscomp/AbstractCompilerRunner.java b/src/com/google/javascript/jscomp/AbstractCompilerRunner.java\nindex ebb524a..5289e5a 100644\n--- a/src/com/google/javascript/jscomp/AbstractCompilerRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCompilerRunner.java\n@@ -356,7 +356,7 @@\n   /**\n    * An exception thrown when command-line flags are used incorrectly.\n    */\n-  static class FlagUsageException extends Exception {\n+  protected static class FlagUsageException extends Exception {\n     private static final long serialVersionUID = 1L;\n \n     FlagUsageException(String message) {\n",
    "projectName": "google.closure-compiler",
    "bugLineNum": 356,
    "bugNodeStartChar": 12936,
    "bugNodeLength": 261,
    "fixLineNum": 356,
    "fixNodeStartChar": 12936,
    "fixNodeLength": 271,
    "sourceBeforeFix": "8",
    "sourceAfterFix": "12"
  }
]